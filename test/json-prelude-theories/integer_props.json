{"tag":"module-with-hash","module":{"tag":"theory","id":"integer_props","declarations":[{"tag":"var-decl","id":"m","type":{"typehash":"dd549bdd7d8a15a06f13ced67340fc2d1b26e8bc"}},{"tag":"var-decl","id":"n","type":{"typehash":"dd549bdd7d8a15a06f13ced67340fc2d1b26e8bc"}},{"tag":"var-decl","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"var-decl","id":"j","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"var-decl","id":"k","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"var-decl","id":"n0j","type":{"typehash":"6783f9c1be1a4a97d1c9d29ab99b2957649635cc"}},{"tag":"var-decl","id":"N","type":{"typehash":"4cbac461721255f0a1d780741851615ca1d643d8"}},{"tag":"var-decl","id":"I","type":{"typehash":"f482ae9d1b6155680b2c8a7c9d5b178e76cd8177"}},{"tag":"formula-decl","id":"integer_pred_ax","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}],"expression":{"tag":"exists","bindings":[{"tag":"variable","id":"n","type":{"typehash":"dd549bdd7d8a15a06f13ced67340fc2d1b26e8bc"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"OR","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"variable","id":"n","type":{"typehash":"dd549bdd7d8a15a06f13ced67340fc2d1b26e8bc"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"apply","operator":{"tag":"constant","id":"-","theory":"number_fields","type":{"typehash":"f0e449ce6955458c18f72ec15d05e245a9a7df4a"}},"argument":{"tag":"variable","id":"n","type":{"typehash":"dd549bdd7d8a15a06f13ced67340fc2d1b26e8bc"}}}]}}]}}}},"proof":{"tag":"proof-info","script":"(\"\" (skosimp*)\n ((\"\" (case \"i!1 >= 0\")\n   ((\"1\" (inst 1 \"i!1\") nil nil)\n    (\"2\" (inst 2 \"-i!1\")\n     ((\"1\" (assert) nil nil) (\"2\" (assert) nil nil)) nil))\n   nil))\n nil)","status":"proved"}},{"tag":"formula-decl","id":"div_simple","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"variable","id":"n0j","type":{"typehash":"6783f9c1be1a4a97d1c9d29ab99b2957649635cc"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}],"type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"exists","bindings":[{"tag":"variable","id":"k","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"apply","operator":{"tag":"constant","id":"*","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"k","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"variable","id":"n0j","type":{"typehash":"6783f9c1be1a4a97d1c9d29ab99b2957649635cc"}}]}}]}}},{"tag":"apply","operator":{"tag":"constant","id":"integer_pred","theory":"integers","type":{"typehash":"4e480c5400c53df5b58cca7d1bbe3ee6c2f584cc"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/","theory":"number_fields","type":{"typehash":"5a7aa47bdc764b6116531680cb42827b010cf6a7"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"variable","id":"n0j","type":{"typehash":"6783f9c1be1a4a97d1c9d29ab99b2957649635cc"}}]}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (grind :if-match nil)\n ((\"\" (inst 2 \"i!1\/n0j!1\") ((\"\" (assert) nil nil)) nil)) nil)","status":"proved"}},{"tag":"formula-decl","id":"lub_nat_TCC1","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"N","type":{"typehash":"4cbac461721255f0a1d780741851615ca1d643d8"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"nonempty?","theory":"sets","actuals":[{"tag":"type-actual","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}}],"type":{"typehash":"0bcd5895a59719824037a41797f14f8070a8abbf"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}},{"tag":"type-actual","type":{"typehash":"dd549bdd7d8a15a06f13ced67340fc2d1b26e8bc"}},{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}],"type":{"typehash":"04a7d4becd8b9c3c4c3fe5a65f52e2ab7fb2c6d1"}},"argument":{"tag":"variable","id":"N","type":{"typehash":"4cbac461721255f0a1d780741851615ca1d643d8"}}}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"proved"}},{"tag":"formula-decl","id":"lub_nat","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"N","type":{"typehash":"4cbac461721255f0a1d780741851615ca1d643d8"}},{"tag":"variable","id":"m","type":{"typehash":"dd549bdd7d8a15a06f13ced67340fc2d1b26e8bc"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"upper_bound?","theory":"bounded_real_defs","type":{"typehash":"81e3b4d4f32e709e0a8bd77089769ca76bbe0bf0"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"m","type":{"typehash":"dd549bdd7d8a15a06f13ced67340fc2d1b26e8bc"}},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}},{"tag":"type-actual","type":{"typehash":"dd549bdd7d8a15a06f13ced67340fc2d1b26e8bc"}},{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}],"type":{"typehash":"04a7d4becd8b9c3c4c3fe5a65f52e2ab7fb2c6d1"}},"argument":{"tag":"variable","id":"N","type":{"typehash":"4cbac461721255f0a1d780741851615ca1d643d8"}}}]}},{"tag":"exists","bindings":[{"tag":"variable","id":"n","type":{"typehash":"e54c97c3be084c1018fef4760e85d284fd086b1a"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"least_upper_bound?","theory":"bounded_real_defs","type":{"typehash":"81e3b4d4f32e709e0a8bd77089769ca76bbe0bf0"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"e54c97c3be084c1018fef4760e85d284fd086b1a"}},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}},{"tag":"type-actual","type":{"typehash":"dd549bdd7d8a15a06f13ced67340fc2d1b26e8bc"}},{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}],"type":{"typehash":"04a7d4becd8b9c3c4c3fe5a65f52e2ab7fb2c6d1"}},"argument":{"tag":"variable","id":"N","type":{"typehash":"4cbac461721255f0a1d780741851615ca1d643d8"}}}]}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (induct \"m\")\n ((\"1\" (skosimp*)\n   ((\"1\" (expand \"upper_bound?\")\n     ((\"1\" (typepred \"N!1\")\n       ((\"1\" (expand \"nonempty?\")\n         ((\"1\" (expand \"empty?\")\n           ((\"1\" (skosimp*)\n             ((\"1\" (expand \"member\")\n               ((\"1\" (inst 1 \"x!1\")\n                 ((\"1\" (expand \"least_upper_bound?\")\n                   ((\"1\" (split)\n                     ((\"1\" (expand \"upper_bound?\")\n                       ((\"1\" (skosimp*)\n                         ((\"1\" (inst -2 \"s!1\") ((\"1\" (assert) nil nil))\n                           nil))\n                         nil))\n                       nil)\n                      (\"2\" (skosimp*)\n                       ((\"2\" (expand \"upper_bound?\")\n                         ((\"2\" (inst -1 \"x!1\")\n                           ((\"2\" (expand \"extend\")\n                             ((\"2\" (propax) nil nil)) nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil)\n  (\"2\" (skosimp*)\n   ((\"2\" (inst -1 \"N!1\")\n     ((\"2\" (assert)\n       ((\"2\" (replace 1)\n         ((\"2\" (assert)\n           ((\"2\" (expand \"upper_bound?\")\n             ((\"2\" (skosimp*)\n               ((\"2\" (inst 2 \"s!1\")\n                 ((\"1\" (expand \"least_upper_bound?\")\n                   ((\"1\" (split)\n                     ((\"1\" (expand \"upper_bound?\")\n                       ((\"1\" (skosimp*)\n                         ((\"1\" (inst -1 \"s!2\")\n                           ((\"1\" (assert)\n                             ((\"1\"\n                               (case\n                                \"forall (i, j: int): i < j iff i + 1 <= j\")\n                               ((\"1\"\n                                 (inst -1 \"s!1\" \"s!2\")\n                                 ((\"1\" (assert) nil nil)\n                                  (\"2\"\n                                   (typepred \"s!2\")\n                                   ((\"2\"\n                                     (expand \"extend\")\n                                     ((\"2\" (prop) nil nil))\n                                     nil))\n                                   nil)\n                                  (\"3\"\n                                   (typepred \"s!1\")\n                                   ((\"3\"\n                                     (expand \"extend\")\n                                     ((\"3\" (prop) nil nil))\n                                     nil))\n                                   nil))\n                                 nil)\n                                (\"2\"\n                                 (skosimp)\n                                 ((\"2\"\n                                   (ground)\n                                   ((\"2\" (assert :flush? t) nil nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil)\n                      (\"2\" (skosimp)\n                       ((\"2\" (expand \"upper_bound?\")\n                         ((\"2\" (inst -1 \"s!1\") nil nil)) nil))\n                       nil))\n                     nil))\n                   nil)\n                  (\"2\" (typepred \"s!1\")\n                   ((\"2\" (expand \"extend\") ((\"2\" (prop) nil nil)) nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil)\n  (\"3\" (hide 2)\n   ((\"3\" (skosimp)\n     ((\"3\" (skosimp)\n       ((\"3\" (expand \"nonempty?\")\n         ((\"3\" (expand \"empty?\")\n           ((\"3\" (typepred \"N!1\")\n             ((\"3\" (expand \"nonempty?\")\n               ((\"3\" (expand \"empty?\")\n                 ((\"3\" (skosimp)\n                   ((\"3\" (inst -3 \"x!1\")\n                     ((\"3\" (expand \"member\")\n                       ((\"3\" (expand \"extend\") ((\"3\" (propax) nil nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil)\n  (\"4\" (hide 2)\n   ((\"4\" (skosimp)\n     ((\"4\" (typepred \"N!1\")\n       ((\"4\" (expand \"nonempty?\")\n         ((\"4\" (expand \"empty?\")\n           ((\"4\" (skosimp)\n             ((\"4\" (expand \"member\")\n               ((\"4\" (inst -2 \"x!1\")\n                 ((\"4\" (expand \"extend\") ((\"4\" (propax) nil nil)) nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"proved"}},{"tag":"formula-decl","id":"lub_int_TCC1","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"I","type":{"typehash":"f482ae9d1b6155680b2c8a7c9d5b178e76cd8177"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"nonempty?","theory":"sets","actuals":[{"tag":"type-actual","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}}],"type":{"typehash":"0bcd5895a59719824037a41797f14f8070a8abbf"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}},{"tag":"type-actual","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}],"type":{"typehash":"2a9687c37c61a0dc1c9ca946babf6ddcaa3bf745"}},"argument":{"tag":"variable","id":"I","type":{"typehash":"f482ae9d1b6155680b2c8a7c9d5b178e76cd8177"}}}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"proved"}},{"tag":"formula-decl","id":"lub_int","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"I","type":{"typehash":"f482ae9d1b6155680b2c8a7c9d5b178e76cd8177"}},{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"upper_bound?","theory":"bounded_real_defs","type":{"typehash":"81e3b4d4f32e709e0a8bd77089769ca76bbe0bf0"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}},{"tag":"type-actual","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}],"type":{"typehash":"2a9687c37c61a0dc1c9ca946babf6ddcaa3bf745"}},"argument":{"tag":"variable","id":"I","type":{"typehash":"f482ae9d1b6155680b2c8a7c9d5b178e76cd8177"}}}]}},{"tag":"exists","bindings":[{"tag":"variable","id":"j","type":{"typehash":"ca3f8ae442d30e739c200adf04409d80f7e1ce86"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"least_upper_bound?","theory":"bounded_real_defs","type":{"typehash":"81e3b4d4f32e709e0a8bd77089769ca76bbe0bf0"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"j","type":{"typehash":"ca3f8ae442d30e739c200adf04409d80f7e1ce86"}},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}},{"tag":"type-actual","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}],"type":{"typehash":"2a9687c37c61a0dc1c9ca946babf6ddcaa3bf745"}},"argument":{"tag":"variable","id":"I","type":{"typehash":"f482ae9d1b6155680b2c8a7c9d5b178e76cd8177"}}}]}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (skosimp*)\n ((\"\" (typepred \"I!1\")\n   ((\"\" (expand \"nonempty?\")\n     ((\"\" (expand \"empty?\")\n       ((\"\" (skosimp*)\n         ((\"\" (lemma \"lub_nat\")\n           ((\"\" (expand \"member\")\n             ((\"\" (inst - \"{n|I!1(n+x!1)}\" \"i!1-x!1\")\n               ((\"1\" (prop)\n                 ((\"1\" (skosimp*)\n                   ((\"1\" (inst + \"n!1+x!1\")\n                     ((\"1\" (assert)\n                       ((\"1\" (expand \"least_upper_bound?\")\n                         ((\"1\" (prop)\n                           ((\"1\" (expand \"upper_bound?\")\n                             ((\"1\" (skosimp*)\n                               ((\"1\"\n                                 (assert)\n                                 ((\"1\"\n                                   (inst - \"s!1-x!1\")\n                                   ((\"1\" (assert) nil nil)\n                                    (\"2\"\n                                     (assert)\n                                     ((\"2\"\n                                       (expand \"extend\")\n                                       ((\"2\"\n                                         (split 1)\n                                         ((\"1\"\n                                           (flatten)\n                                           ((\"1\"\n                                             (typepred \"s!1\")\n                                             ((\"1\"\n                                               (expand \"extend\")\n                                               ((\"1\" (assert) nil nil))\n                                               nil))\n                                             nil))\n                                           nil)\n                                          (\"2\"\n                                           (typepred \"s!1\")\n                                           ((\"2\"\n                                             (expand \"extend\")\n                                             ((\"2\"\n                                               (prop)\n                                               ((\"1\"\n                                                 (lemma\n                                                  \"rat_minus_rat_is_rat\")\n                                                 ((\"1\"\n                                                   (inst?)\n                                                   nil\n                                                   nil))\n                                                 nil)\n                                                (\"2\"\n                                                 (lemma\n                                                  \"int_minus_int_is_int\")\n                                                 ((\"2\"\n                                                   (inst?)\n                                                   ((\"2\"\n                                                     (assert)\n                                                     nil\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil)\n                            (\"2\" (skosimp*)\n                             ((\"2\" (inst - \"y!1-x!1\")\n                               ((\"2\"\n                                 (assert)\n                                 ((\"2\"\n                                   (expand \"upper_bound?\")\n                                   ((\"2\"\n                                     (skosimp*)\n                                     ((\"2\"\n                                       (inst?)\n                                       ((\"2\"\n                                         (expand \"extend\")\n                                         ((\"2\" (propax) nil nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil)\n                  (\"2\" (expand \"upper_bound?\")\n                   ((\"2\" (skosimp*)\n                     ((\"2\" (typepred \"s!1\")\n                       ((\"2\" (expand \"extend\" -1)\n                         ((\"2\" (prop)\n                           ((\"2\" (inst - \"s!1+x!1\")\n                             ((\"1\" (assert) nil nil)\n                              (\"2\" (expand \"extend\" 1)\n                               ((\"2\"\n                                 (prop)\n                                 ((\"1\"\n                                   (lemma \"rat_plus_rat_is_rat\")\n                                   ((\"1\" (inst?) nil nil))\n                                   nil)\n                                  (\"2\"\n                                   (lemma \"int_plus_int_is_int\")\n                                   ((\"2\"\n                                     (inst?)\n                                     ((\"2\" (assert) nil nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil)\n                (\"2\" (assert)\n                 ((\"2\" (expand \"upper_bound?\")\n                   ((\"2\" (inst -2 \"x!1\")\n                     ((\"1\" (assert) nil nil)\n                      (\"2\" (expand \"extend\") ((\"2\" (propax) nil nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil)\n                (\"3\" (expand \"nonempty?\")\n                 ((\"3\" (expand \"empty?\")\n                   ((\"3\" (inst -1 \"0\")\n                     ((\"3\" (expand \"member\") ((\"3\" (propax) nil nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"proved"}},{"tag":"formula-decl","id":"glb_nat","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"N","type":{"typehash":"4cbac461721255f0a1d780741851615ca1d643d8"}}],"expression":{"tag":"exists","bindings":[{"tag":"variable","id":"n","type":{"typehash":"20d0a2f9928662164117ef642f2a212c6d9ed052"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"greatest_lower_bound?","theory":"bounded_real_defs","type":{"typehash":"81e3b4d4f32e709e0a8bd77089769ca76bbe0bf0"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"20d0a2f9928662164117ef642f2a212c6d9ed052"}},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}},{"tag":"type-actual","type":{"typehash":"dd549bdd7d8a15a06f13ced67340fc2d1b26e8bc"}},{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}],"type":{"typehash":"04a7d4becd8b9c3c4c3fe5a65f52e2ab7fb2c6d1"}},"argument":{"tag":"variable","id":"N","type":{"typehash":"4cbac461721255f0a1d780741851615ca1d643d8"}}}]}}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"lub_int\")\n ((\"\" (skosimp*)\n   ((\"\" (inst -1 \"{i: nonpos_int | N!1(-i)}\" \"0\")\n     ((\"1\" (grind :if-match nil)\n       ((\"1\" (inst 1 \"-j!1\")\n         ((\"1\" (prop)\n           ((\"1\" (skosimp*)\n             ((\"1\" (inst -3 \"-s!1\")\n               ((\"1\" (assert) nil nil)\n                (\"2\" (typepred \"s!1\")\n                 ((\"2\" (expand \"extend\")\n                   ((\"2\" (assert)\n                     ((\"2\" (prop)\n                       ((\"1\" (assert) nil nil) (\"2\" (assert) nil nil)\n                        (\"3\" (assert)\n                         ((\"3\" (lemma \"minus_rat_is_rat\")\n                           ((\"3\" (inst -1 \"s!1\") nil nil)) nil))\n                         nil)\n                        (\"4\" (lemma \"minus_int_is_int\")\n                         ((\"4\" (inst -1 \"s!1\") ((\"4\" (assert) nil nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil)\n            (\"2\" (hide -3)\n             ((\"2\" (skosimp*)\n               ((\"2\" (inst -4 \"-y!1\")\n                 ((\"2\" (prop)\n                   ((\"1\" (assert) nil nil)\n                    (\"2\" (skosimp*)\n                     ((\"2\" (inst -1 \"-s!1\")\n                       ((\"1\" (assert) nil nil)\n                        (\"2\" (typepred \"s!1\")\n                         ((\"2\" (expand \"extend\")\n                           ((\"2\" (prop)\n                             ((\"1\" (lemma \"minus_rat_is_rat\")\n                               ((\"1\" (inst -1 \"s!1\") nil nil)) nil)\n                              (\"2\" (lemma \"minus_int_is_int\")\n                               ((\"2\"\n                                 (inst -1 \"s!1\")\n                                 ((\"2\" (assert) nil nil))\n                                 nil))\n                               nil)\n                              (\"3\" (assert) nil nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil)\n      (\"2\" (hide 2)\n       ((\"2\" (expand \"extend\")\n         ((\"2\" (typepred \"N!1\")\n           ((\"2\" (expand \"nonempty?\")\n             ((\"2\" (expand \"empty?\")\n               ((\"2\" (skosimp*)\n                 ((\"2\" (inst -2 \"-x!1\")\n                   ((\"2\" (expand \"member\") ((\"2\" (assert) nil nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"proved"}},{"tag":"formula-decl","id":"glb_int","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"I","type":{"typehash":"f482ae9d1b6155680b2c8a7c9d5b178e76cd8177"}},{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"lower_bound?","theory":"bounded_real_defs","type":{"typehash":"81e3b4d4f32e709e0a8bd77089769ca76bbe0bf0"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}},{"tag":"type-actual","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}],"type":{"typehash":"2a9687c37c61a0dc1c9ca946babf6ddcaa3bf745"}},"argument":{"tag":"variable","id":"I","type":{"typehash":"f482ae9d1b6155680b2c8a7c9d5b178e76cd8177"}}}]}},{"tag":"exists","bindings":[{"tag":"variable","id":"j","type":{"typehash":"e2831f3aa686708b839d92024fcc526ab2a32bcb"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"greatest_lower_bound?","theory":"bounded_real_defs","type":{"typehash":"81e3b4d4f32e709e0a8bd77089769ca76bbe0bf0"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"j","type":{"typehash":"e2831f3aa686708b839d92024fcc526ab2a32bcb"}},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}},{"tag":"type-actual","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}],"type":{"typehash":"2a9687c37c61a0dc1c9ca946babf6ddcaa3bf745"}},"argument":{"tag":"variable","id":"I","type":{"typehash":"f482ae9d1b6155680b2c8a7c9d5b178e76cd8177"}}}]}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"lub_int\")\n ((\"\" (skosimp*)\n   ((\"\" (inst -1 \"{i: int | I!1(-i)}\" \"-i!1\")\n     ((\"1\" (prop)\n       ((\"1\" (skosimp*)\n         ((\"1\" (grind :if-match nil)\n           ((\"1\" (inst 1 \"-j!1\")\n             ((\"1\" (prop)\n               ((\"1\" (skosimp*)\n                 ((\"1\" (inst -1 \"-s!1\")\n                   ((\"1\" (assert) nil nil)\n                    (\"2\" (hide -1 -2 2)\n                     ((\"2\" (typepred \"s!1\")\n                       ((\"2\" (expand \"extend\")\n                         ((\"2\" (assert)\n                           ((\"2\" (prop)\n                             ((\"1\" (assert) nil nil)\n                              (\"2\" (lemma \"minus_rat_is_rat\")\n                               ((\"2\" (inst -1 \"s!1\") nil nil)) nil)\n                              (\"3\" (lemma \"minus_int_is_int\")\n                               ((\"3\"\n                                 (inst -1 \"s!1\")\n                                 ((\"3\" (assert) nil nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil)\n                (\"2\" (skosimp*)\n                 ((\"2\" (inst -3 \"-y!1\")\n                   ((\"2\" (assert)\n                     ((\"2\" (skosimp*)\n                       ((\"2\" (inst -1 \"-s!1\")\n                         ((\"1\" (assert) nil nil)\n                          (\"2\" (hide -1 -2 2 3)\n                           ((\"2\" (typepred \"s!1\")\n                             ((\"2\" (expand \"extend\")\n                               ((\"2\"\n                                 (assert)\n                                 ((\"2\"\n                                   (ground)\n                                   ((\"1\"\n                                     (lemma \"minus_rat_is_rat\")\n                                     ((\"1\" (inst -1 \"s!1\") nil nil))\n                                     nil)\n                                    (\"2\"\n                                     (lemma \"minus_int_is_int\")\n                                     ((\"2\" (inst -1 \"s!1\") nil nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil)\n        (\"2\" (hide 2)\n         ((\"2\" (grind :if-match nil)\n           ((\"2\" (inst -4 \"-s!1\")\n             ((\"1\" (assert) nil nil)\n              (\"2\" (hide -1 -2 -3 2)\n               ((\"2\" (typepred \"s!1\")\n                 ((\"2\" (expand \"extend\")\n                   ((\"2\" (ground)\n                     ((\"1\" (lemma \"minus_rat_is_rat\")\n                       ((\"1\" (inst -1 \"s!1\") nil nil)) nil)\n                      (\"2\" (lemma \"minus_int_is_int\")\n                       ((\"2\" (inst -1 \"s!1\") nil nil)) nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil)\n      (\"2\" (hide -1 2)\n       ((\"2\" (typepred \"I!1\")\n         ((\"2\" (grind :if-match nil)\n           ((\"2\" (inst -3 \"-x!1\") ((\"2\" (assert) nil nil)) nil)) nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"proved"}}]},"type-hash":{"tag":"typelist","entries":{"5a7aa47bdc764b6116531680cb42827b010cf6a7":{"tag":"functiontype","domain":{"typehash":"20070eab10fb8c80ed53293ccbd5acf51a299119"},"range":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}},"f482ae9d1b6155680b2c8a7c9d5b178e76cd8177":{"tag":"subtype","supertype":{"typehash":"b5bed0701932a6f64af1103161313a3540e13d12"},"predicate":{"tag":"constant","id":"nonempty?","theory":"sets","actuals":[{"tag":"type-actual","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}],"type":{"typehash":"1379a80b0753002dc168a18152c12d45b3a51b88"}},"print-type":[{"tag":"subtype","supertype":[[]],"predicate":[]}]},"20d0a2f9928662164117ef642f2a212c6d9ed052":{"tag":"subtype","supertype":{"typehash":"dd549bdd7d8a15a06f13ced67340fc2d1b26e8bc"},"predicate":{"tag":"variable","id":"N","type":{"typehash":"4cbac461721255f0a1d780741851615ca1d643d8"}},"print-type":[{"tag":"subtype","supertype":[[]],"predicate":[]}]},"e54c97c3be084c1018fef4760e85d284fd086b1a":{"tag":"subtype","supertype":{"typehash":"dd549bdd7d8a15a06f13ced67340fc2d1b26e8bc"},"predicate":{"tag":"variable","id":"N","type":{"typehash":"4cbac461721255f0a1d780741851615ca1d643d8"}},"print-type":[{"tag":"subtype","supertype":[[]],"predicate":[]}]},"2a9687c37c61a0dc1c9ca946babf6ddcaa3bf745":{"tag":"functiontype","domain":{"typehash":"b5bed0701932a6f64af1103161313a3540e13d12"},"range":{"typehash":"5f72d24643ab14e4b255c8b1ac6dd982887152d4"}},"146a37095d79b99006383a517eb8738d36d01122":{"tag":"functiontype","domain":{"typehash":"11c15fe18e476f962d4d8a6529ffdee55c710026"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"255fc968a29595c401e05c55e3263dd5e336ff42":{"tag":"tupletype","types":[{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"},{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}]},"717a9c25eb892eba350c91b4c9080187b6bc2aa4":{"tag":"subtype","supertype":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"},"predicate":{"tag":"constant","id":"rational_pred","theory":"rationals","type":{"typehash":"5f72d24643ab14e4b255c8b1ac6dd982887152d4"}},"print-type":[{"tag":"typename","id":"rational","theory":"rationals","actuals":[]}]},"f9dfc0c5daed68d735ec591f7efd16ec22075ef8":{"tag":"functiontype","domain":{"typehash":"e82fb70ca2174d284e3c0dc69979ae0796a1bdf1"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"4cbac461721255f0a1d780741851615ca1d643d8":{"tag":"subtype","supertype":{"typehash":"a3b0bdf66494f561d9d80f4fc354a4004edaf7f6"},"predicate":{"tag":"constant","id":"nonempty?","theory":"sets","actuals":[{"tag":"type-actual","type":{"typehash":"dd549bdd7d8a15a06f13ced67340fc2d1b26e8bc"}}],"type":{"typehash":"fb790f24025ee65b94e82fa5d3af07ccc48ec5b5"}},"print-type":[{"tag":"subtype","supertype":[[]],"predicate":[]}]},"d288fd11ae1e75ed5502a350466c5a64f3c1f435":{"tag":"typename","id":"number","theory":"numbers","actuals":[]},"0bcd5895a59719824037a41797f14f8070a8abbf":{"tag":"functiontype","domain":{"typehash":"5f72d24643ab14e4b255c8b1ac6dd982887152d4"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"34012ce34c4ce7e8874dfceb61781aace60c5d79":{"tag":"functiontype","domain":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"1379a80b0753002dc168a18152c12d45b3a51b88":{"tag":"functiontype","domain":{"typehash":"b5bed0701932a6f64af1103161313a3540e13d12"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03":{"tag":"subtype","supertype":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},"predicate":{"tag":"constant","id":"real_pred","theory":"reals","type":{"typehash":"34012ce34c4ce7e8874dfceb61781aace60c5d79"}},"print-type":[{"tag":"typename","id":"real","theory":"reals","actuals":[]}]},"5f72d24643ab14e4b255c8b1ac6dd982887152d4":{"tag":"functiontype","domain":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"f4f200a0d337e4a60b30dfe136d073c7265be3e1":{"tag":"subtype","supertype":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"},"predicate":{"tag":"constant","id":"number_field_pred","theory":"number_fields","type":{"typehash":"a56a4a9403ce4ae14abf07cdf6b328b8f111f42b"}},"print-type":[{"tag":"typename","id":"number_field","theory":"number_fields","actuals":[]}]},"aece8f38c7b6554bf39a6677488f47877026313a":{"tag":"subtype","supertype":{"typehash":"717a9c25eb892eba350c91b4c9080187b6bc2aa4"},"predicate":{"tag":"constant","id":"integer_pred","theory":"integers","type":{"typehash":"4e480c5400c53df5b58cca7d1bbe3ee6c2f584cc"}},"print-type":[{"tag":"typename","id":"int","theory":"integers","actuals":[]}]},"11c15fe18e476f962d4d8a6529ffdee55c710026":{"tag":"tupletype","types":[{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"},{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}]},"81e3b4d4f32e709e0a8bd77089769ca76bbe0bf0":{"tag":"functiontype","domain":{"typehash":"2a7b917f04cda2052721ea5abf241d482d73e0e1"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"2a7b917f04cda2052721ea5abf241d482d73e0e1":{"tag":"tupletype","types":[{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"},{"typehash":"e19d18a23bf2716546ac9d7b8f976bde724f8401"}]},"350b58e8264ad023a2d621d5506d89de8beb16e3":{"tag":"functiontype","domain":{"typehash":"39d6637d76121441a824031ab58b03e07adec56e"},"range":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}},"4e480c5400c53df5b58cca7d1bbe3ee6c2f584cc":{"tag":"functiontype","domain":{"typehash":"717a9c25eb892eba350c91b4c9080187b6bc2aa4"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"04a7d4becd8b9c3c4c3fe5a65f52e2ab7fb2c6d1":{"tag":"functiontype","domain":{"typehash":"a3b0bdf66494f561d9d80f4fc354a4004edaf7f6"},"range":{"typehash":"5f72d24643ab14e4b255c8b1ac6dd982887152d4"}},"b5bed0701932a6f64af1103161313a3540e13d12":{"tag":"functiontype","domain":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"},"print-type":[{"tag":"typename","id":"set","theory":"sets","actuals":[{"tag":"type-actual","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}]}]},"c83548ec8aa59e7bd86b18520461274afa56431f":{"tag":"subtype","supertype":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"r","type":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"\/=","theory":"notequal","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"r","type":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}},{"tag":"integer","integer-value":0}]}}},"print-type":[{"tag":"typename","id":"nznum","theory":"number_fields","actuals":[]}]},"6783f9c1be1a4a97d1c9d29ab99b2957649635cc":{"tag":"subtype","supertype":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"\/=","theory":"notequal","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"integer","integer-value":0}]}}},"print-type":[{"tag":"typename","id":"nzint","theory":"integers","actuals":[]}]},"dd549bdd7d8a15a06f13ced67340fc2d1b26e8bc":{"tag":"subtype","supertype":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":">=","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"integer","integer-value":0}]}}},"print-type":[{"tag":"typename","id":"nat","theory":"naturalnumbers","actuals":[]}]},"4f19419082f24e96423f3b076548a2c3de11ecd9":{"tag":"typename","id":"boolean","theory":"booleans","actuals":[]},"f0e449ce6955458c18f72ec15d05e245a9a7df4a":{"tag":"functiontype","domain":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},"range":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}},"a56a4a9403ce4ae14abf07cdf6b328b8f111f42b":{"tag":"functiontype","domain":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"39d6637d76121441a824031ab58b03e07adec56e":{"tag":"tupletype","types":[{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}]},"e2831f3aa686708b839d92024fcc526ab2a32bcb":{"tag":"subtype","supertype":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"},"predicate":{"tag":"variable","id":"I","type":{"typehash":"f482ae9d1b6155680b2c8a7c9d5b178e76cd8177"}},"print-type":[{"tag":"subtype","supertype":[[]],"predicate":[]}]},"a3b0bdf66494f561d9d80f4fc354a4004edaf7f6":{"tag":"functiontype","domain":{"typehash":"dd549bdd7d8a15a06f13ced67340fc2d1b26e8bc"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"},"print-type":[{"tag":"typename","id":"set","theory":"sets","actuals":[{"tag":"type-actual","type":{"typehash":"dd549bdd7d8a15a06f13ced67340fc2d1b26e8bc"}}]}]},"e82fb70ca2174d284e3c0dc69979ae0796a1bdf1":{"tag":"tupletype","types":[{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"},{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}]},"ca3f8ae442d30e739c200adf04409d80f7e1ce86":{"tag":"subtype","supertype":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"},"predicate":{"tag":"variable","id":"I","type":{"typehash":"f482ae9d1b6155680b2c8a7c9d5b178e76cd8177"}},"print-type":[{"tag":"subtype","supertype":[[]],"predicate":[]}]},"e19d18a23bf2716546ac9d7b8f976bde724f8401":{"tag":"subtype","supertype":{"typehash":"5f72d24643ab14e4b255c8b1ac6dd982887152d4"},"predicate":{"tag":"constant","id":"nonempty?","theory":"sets","actuals":[{"tag":"type-actual","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}}],"type":{"typehash":"0bcd5895a59719824037a41797f14f8070a8abbf"}},"print-type":[{"tag":"subtype","supertype":[[]],"predicate":[]}]},"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf":{"tag":"functiontype","domain":{"typehash":"255fc968a29595c401e05c55e3263dd5e336ff42"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"fb790f24025ee65b94e82fa5d3af07ccc48ec5b5":{"tag":"functiontype","domain":{"typehash":"a3b0bdf66494f561d9d80f4fc354a4004edaf7f6"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"20070eab10fb8c80ed53293ccbd5acf51a299119":{"tag":"tupletype","types":[{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},{"typehash":"c83548ec8aa59e7bd86b18520461274afa56431f"}]}}}}