{"tag":"module-with-hash","module":{"tag":"theory","id":"integer_props","declarations":[{"tag":"var-decl","id":"m","type":{"typehash":"1573404743"}},{"tag":"var-decl","id":"n","type":{"typehash":"1573404743"}},{"tag":"var-decl","id":"i","type":{"typehash":"3321106813"}},{"tag":"var-decl","id":"j","type":{"typehash":"3321106813"}},{"tag":"var-decl","id":"k","type":{"typehash":"3321106813"}},{"tag":"var-decl","id":"n0j","type":{"typehash":"3297885759"}},{"tag":"var-decl","id":"N","type":{"typehash":"146729287"}},{"tag":"var-decl","id":"I","type":{"typehash":"1894431357"}},{"tag":"formula-decl","id":"integer_pred_ax","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}}],"expression":{"tag":"exists","bindings":[{"tag":"variable","id":"n","type":{"typehash":"1573404743"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"OR","theory":"booleans","type":{"typehash":"1120869698"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"2910104866"}}],"type":{"typehash":"2895152588"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}},{"tag":"variable","id":"n","type":{"typehash":"1573404743"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"2910104866"}}],"type":{"typehash":"2895152588"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}},{"tag":"apply","operator":{"tag":"constant","id":"-","theory":"number_fields","type":{"typehash":"3527654237"}},"argument":{"tag":"variable","id":"n","type":{"typehash":"1573404743"}}}]}}]}}}},"proof":{"tag":"proof-info","script":"(\"\" (skosimp*)\n ((\"\" (case \"i!1 >= 0\")\n   ((\"1\" (inst 1 \"i!1\") nil nil)\n    (\"2\" (inst 2 \"-i!1\")\n     ((\"1\" (assert) nil nil) (\"2\" (assert) nil nil)) nil))\n   nil))\n nil)","status":"proved"}},{"tag":"formula-decl","id":"div_simple","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}},{"tag":"variable","id":"n0j","type":{"typehash":"3297885759"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"2614391051"}}],"type":{"typehash":"1120869698"}},"argument":{"tag":"tuple","exprs":[{"tag":"exists","bindings":[{"tag":"variable","id":"k","type":{"typehash":"3321106813"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"2910104866"}}],"type":{"typehash":"2895152588"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}},{"tag":"apply","operator":{"tag":"constant","id":"*","theory":"number_fields","type":{"typehash":"3936226261"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"k","type":{"typehash":"3321106813"}},{"tag":"variable","id":"n0j","type":{"typehash":"3297885759"}}]}}]}}},{"tag":"apply","operator":{"tag":"constant","id":"integer_pred","theory":"integers","type":{"typehash":"3523209364"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/","theory":"number_fields","type":{"typehash":"3889784157"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}},{"tag":"variable","id":"n0j","type":{"typehash":"3297885759"}}]}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (grind :if-match nil)\n ((\"\" (inst 2 \"i!1\/n0j!1\") ((\"\" (assert) nil nil)) nil)) nil)","status":"proved"}},{"tag":"formula-decl","id":"lub_nat_TCC1","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"N","type":{"typehash":"146729287"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"nonempty?","theory":"sets","actuals":[{"tag":"type-actual","type":{"typehash":"4227483815"}}],"type":{"typehash":"3278273460"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"4227483815"}},{"tag":"type-actual","type":{"typehash":"1573404743"}},{"tag":"type-actual","type":{"typehash":"2614391051"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"}}}],"type":{"typehash":"1116925311"}},"argument":{"tag":"variable","id":"N","type":{"typehash":"146729287"}}}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"proved"}},{"tag":"formula-decl","id":"lub_nat","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"N","type":{"typehash":"146729287"}},{"tag":"variable","id":"m","type":{"typehash":"1573404743"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","theory":"booleans","type":{"typehash":"1120869698"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"upper_bound?","theory":"bounded_real_defs","type":{"typehash":"3651108074"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"m","type":{"typehash":"1573404743"}},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"4227483815"}},{"tag":"type-actual","type":{"typehash":"1573404743"}},{"tag":"type-actual","type":{"typehash":"2614391051"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"}}}],"type":{"typehash":"1116925311"}},"argument":{"tag":"variable","id":"N","type":{"typehash":"146729287"}}}]}},{"tag":"exists","bindings":[{"tag":"variable","id":"n","type":{"typehash":"1233827798"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"least_upper_bound?","theory":"bounded_real_defs","type":{"typehash":"3651108074"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"1233827798"}},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"4227483815"}},{"tag":"type-actual","type":{"typehash":"1573404743"}},{"tag":"type-actual","type":{"typehash":"2614391051"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"}}}],"type":{"typehash":"1116925311"}},"argument":{"tag":"variable","id":"N","type":{"typehash":"146729287"}}}]}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (induct \"m\")\n ((\"1\" (skosimp*)\n   ((\"1\" (expand \"upper_bound?\")\n     ((\"1\" (typepred \"N!1\")\n       ((\"1\" (expand \"nonempty?\")\n         ((\"1\" (expand \"empty?\")\n           ((\"1\" (skosimp*)\n             ((\"1\" (expand \"member\")\n               ((\"1\" (inst 1 \"x!1\")\n                 ((\"1\" (expand \"least_upper_bound?\")\n                   ((\"1\" (split)\n                     ((\"1\" (expand \"upper_bound?\")\n                       ((\"1\" (skosimp*)\n                         ((\"1\" (inst -2 \"s!1\") ((\"1\" (assert) nil nil))\n                           nil))\n                         nil))\n                       nil)\n                      (\"2\" (skosimp*)\n                       ((\"2\" (expand \"upper_bound?\")\n                         ((\"2\" (inst -1 \"x!1\")\n                           ((\"2\" (expand \"extend\")\n                             ((\"2\" (propax) nil nil)) nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil)\n  (\"2\" (skosimp*)\n   ((\"2\" (inst -1 \"N!1\")\n     ((\"2\" (assert)\n       ((\"2\" (replace 1)\n         ((\"2\" (assert)\n           ((\"2\" (expand \"upper_bound?\")\n             ((\"2\" (skosimp*)\n               ((\"2\" (inst 2 \"s!1\")\n                 ((\"1\" (expand \"least_upper_bound?\")\n                   ((\"1\" (split)\n                     ((\"1\" (expand \"upper_bound?\")\n                       ((\"1\" (skosimp*)\n                         ((\"1\" (inst -1 \"s!2\")\n                           ((\"1\" (assert)\n                             ((\"1\"\n                               (case\n                                \"forall (i, j: int): i < j iff i + 1 <= j\")\n                               ((\"1\"\n                                 (inst -1 \"s!1\" \"s!2\")\n                                 ((\"1\" (assert) nil nil)\n                                  (\"2\"\n                                   (typepred \"s!2\")\n                                   ((\"2\"\n                                     (expand \"extend\")\n                                     ((\"2\" (prop) nil nil))\n                                     nil))\n                                   nil)\n                                  (\"3\"\n                                   (typepred \"s!1\")\n                                   ((\"3\"\n                                     (expand \"extend\")\n                                     ((\"3\" (prop) nil nil))\n                                     nil))\n                                   nil))\n                                 nil)\n                                (\"2\"\n                                 (skosimp)\n                                 ((\"2\"\n                                   (ground)\n                                   ((\"2\" (assert :flush? t) nil nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil)\n                      (\"2\" (skosimp)\n                       ((\"2\" (expand \"upper_bound?\")\n                         ((\"2\" (inst -1 \"s!1\") nil nil)) nil))\n                       nil))\n                     nil))\n                   nil)\n                  (\"2\" (typepred \"s!1\")\n                   ((\"2\" (expand \"extend\") ((\"2\" (prop) nil nil)) nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil)\n  (\"3\" (hide 2)\n   ((\"3\" (skosimp)\n     ((\"3\" (skosimp)\n       ((\"3\" (expand \"nonempty?\")\n         ((\"3\" (expand \"empty?\")\n           ((\"3\" (typepred \"N!1\")\n             ((\"3\" (expand \"nonempty?\")\n               ((\"3\" (expand \"empty?\")\n                 ((\"3\" (skosimp)\n                   ((\"3\" (inst -3 \"x!1\")\n                     ((\"3\" (expand \"member\")\n                       ((\"3\" (expand \"extend\") ((\"3\" (propax) nil nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil)\n  (\"4\" (hide 2)\n   ((\"4\" (skosimp)\n     ((\"4\" (typepred \"N!1\")\n       ((\"4\" (expand \"nonempty?\")\n         ((\"4\" (expand \"empty?\")\n           ((\"4\" (skosimp)\n             ((\"4\" (expand \"member\")\n               ((\"4\" (inst -2 \"x!1\")\n                 ((\"4\" (expand \"extend\") ((\"4\" (propax) nil nil)) nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"proved"}},{"tag":"formula-decl","id":"lub_int_TCC1","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"I","type":{"typehash":"1894431357"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"nonempty?","theory":"sets","actuals":[{"tag":"type-actual","type":{"typehash":"4227483815"}}],"type":{"typehash":"3278273460"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"4227483815"}},{"tag":"type-actual","type":{"typehash":"3321106813"}},{"tag":"type-actual","type":{"typehash":"2614391051"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"}}}],"type":{"typehash":"3812766295"}},"argument":{"tag":"variable","id":"I","type":{"typehash":"1894431357"}}}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"proved"}},{"tag":"formula-decl","id":"lub_int","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"I","type":{"typehash":"1894431357"}},{"tag":"variable","id":"i","type":{"typehash":"3321106813"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","theory":"booleans","type":{"typehash":"1120869698"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"upper_bound?","theory":"bounded_real_defs","type":{"typehash":"3651108074"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"4227483815"}},{"tag":"type-actual","type":{"typehash":"3321106813"}},{"tag":"type-actual","type":{"typehash":"2614391051"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"}}}],"type":{"typehash":"3812766295"}},"argument":{"tag":"variable","id":"I","type":{"typehash":"1894431357"}}}]}},{"tag":"exists","bindings":[{"tag":"variable","id":"j","type":{"typehash":"1233084707"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"least_upper_bound?","theory":"bounded_real_defs","type":{"typehash":"3651108074"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"j","type":{"typehash":"1233084707"}},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"4227483815"}},{"tag":"type-actual","type":{"typehash":"3321106813"}},{"tag":"type-actual","type":{"typehash":"2614391051"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"}}}],"type":{"typehash":"3812766295"}},"argument":{"tag":"variable","id":"I","type":{"typehash":"1894431357"}}}]}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (skosimp*)\n ((\"\" (typepred \"I!1\")\n   ((\"\" (expand \"nonempty?\")\n     ((\"\" (expand \"empty?\")\n       ((\"\" (skosimp*)\n         ((\"\" (lemma \"lub_nat\")\n           ((\"\" (expand \"member\")\n             ((\"\" (inst - \"{n|I!1(n+x!1)}\" \"i!1-x!1\")\n               ((\"1\" (prop)\n                 ((\"1\" (skosimp*)\n                   ((\"1\" (inst + \"n!1+x!1\")\n                     ((\"1\" (assert)\n                       ((\"1\" (expand \"least_upper_bound?\")\n                         ((\"1\" (prop)\n                           ((\"1\" (expand \"upper_bound?\")\n                             ((\"1\" (skosimp*)\n                               ((\"1\"\n                                 (assert)\n                                 ((\"1\"\n                                   (inst - \"s!1-x!1\")\n                                   ((\"1\" (assert) nil nil)\n                                    (\"2\"\n                                     (assert)\n                                     ((\"2\"\n                                       (expand \"extend\")\n                                       ((\"2\"\n                                         (split 1)\n                                         ((\"1\"\n                                           (flatten)\n                                           ((\"1\"\n                                             (typepred \"s!1\")\n                                             ((\"1\"\n                                               (expand \"extend\")\n                                               ((\"1\" (assert) nil nil))\n                                               nil))\n                                             nil))\n                                           nil)\n                                          (\"2\"\n                                           (typepred \"s!1\")\n                                           ((\"2\"\n                                             (expand \"extend\")\n                                             ((\"2\"\n                                               (prop)\n                                               ((\"1\"\n                                                 (lemma\n                                                  \"rat_minus_rat_is_rat\")\n                                                 ((\"1\"\n                                                   (inst?)\n                                                   nil\n                                                   nil))\n                                                 nil)\n                                                (\"2\"\n                                                 (lemma\n                                                  \"int_minus_int_is_int\")\n                                                 ((\"2\"\n                                                   (inst?)\n                                                   ((\"2\"\n                                                     (assert)\n                                                     nil\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil)\n                            (\"2\" (skosimp*)\n                             ((\"2\" (inst - \"y!1-x!1\")\n                               ((\"2\"\n                                 (assert)\n                                 ((\"2\"\n                                   (expand \"upper_bound?\")\n                                   ((\"2\"\n                                     (skosimp*)\n                                     ((\"2\"\n                                       (inst?)\n                                       ((\"2\"\n                                         (expand \"extend\")\n                                         ((\"2\" (propax) nil nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil)\n                  (\"2\" (expand \"upper_bound?\")\n                   ((\"2\" (skosimp*)\n                     ((\"2\" (typepred \"s!1\")\n                       ((\"2\" (expand \"extend\" -1)\n                         ((\"2\" (prop)\n                           ((\"2\" (inst - \"s!1+x!1\")\n                             ((\"1\" (assert) nil nil)\n                              (\"2\" (expand \"extend\" 1)\n                               ((\"2\"\n                                 (prop)\n                                 ((\"1\"\n                                   (lemma \"rat_plus_rat_is_rat\")\n                                   ((\"1\" (inst?) nil nil))\n                                   nil)\n                                  (\"2\"\n                                   (lemma \"int_plus_int_is_int\")\n                                   ((\"2\"\n                                     (inst?)\n                                     ((\"2\" (assert) nil nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil)\n                (\"2\" (assert)\n                 ((\"2\" (expand \"upper_bound?\")\n                   ((\"2\" (inst -2 \"x!1\")\n                     ((\"1\" (assert) nil nil)\n                      (\"2\" (expand \"extend\") ((\"2\" (propax) nil nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil)\n                (\"3\" (expand \"nonempty?\")\n                 ((\"3\" (expand \"empty?\")\n                   ((\"3\" (inst -1 \"0\")\n                     ((\"3\" (expand \"member\") ((\"3\" (propax) nil nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"proved"}},{"tag":"formula-decl","id":"glb_nat","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"N","type":{"typehash":"146729287"}}],"expression":{"tag":"exists","bindings":[{"tag":"variable","id":"n","type":{"typehash":"1233827798"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"greatest_lower_bound?","theory":"bounded_real_defs","type":{"typehash":"3651108074"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"1233827798"}},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"4227483815"}},{"tag":"type-actual","type":{"typehash":"1573404743"}},{"tag":"type-actual","type":{"typehash":"2614391051"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"}}}],"type":{"typehash":"1116925311"}},"argument":{"tag":"variable","id":"N","type":{"typehash":"146729287"}}}]}}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"lub_int\")\n ((\"\" (skosimp*)\n   ((\"\" (inst -1 \"{i: nonpos_int | N!1(-i)}\" \"0\")\n     ((\"1\" (grind :if-match nil)\n       ((\"1\" (inst 1 \"-j!1\")\n         ((\"1\" (prop)\n           ((\"1\" (skosimp*)\n             ((\"1\" (inst -3 \"-s!1\")\n               ((\"1\" (assert) nil nil)\n                (\"2\" (typepred \"s!1\")\n                 ((\"2\" (expand \"extend\")\n                   ((\"2\" (assert)\n                     ((\"2\" (prop)\n                       ((\"1\" (assert) nil nil) (\"2\" (assert) nil nil)\n                        (\"3\" (assert)\n                         ((\"3\" (lemma \"minus_rat_is_rat\")\n                           ((\"3\" (inst -1 \"s!1\") nil nil)) nil))\n                         nil)\n                        (\"4\" (lemma \"minus_int_is_int\")\n                         ((\"4\" (inst -1 \"s!1\") ((\"4\" (assert) nil nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil)\n            (\"2\" (hide -3)\n             ((\"2\" (skosimp*)\n               ((\"2\" (inst -4 \"-y!1\")\n                 ((\"2\" (prop)\n                   ((\"1\" (assert) nil nil)\n                    (\"2\" (skosimp*)\n                     ((\"2\" (inst -1 \"-s!1\")\n                       ((\"1\" (assert) nil nil)\n                        (\"2\" (typepred \"s!1\")\n                         ((\"2\" (expand \"extend\")\n                           ((\"2\" (prop)\n                             ((\"1\" (lemma \"minus_rat_is_rat\")\n                               ((\"1\" (inst -1 \"s!1\") nil nil)) nil)\n                              (\"2\" (lemma \"minus_int_is_int\")\n                               ((\"2\"\n                                 (inst -1 \"s!1\")\n                                 ((\"2\" (assert) nil nil))\n                                 nil))\n                               nil)\n                              (\"3\" (assert) nil nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil)\n      (\"2\" (hide 2)\n       ((\"2\" (expand \"extend\")\n         ((\"2\" (typepred \"N!1\")\n           ((\"2\" (expand \"nonempty?\")\n             ((\"2\" (expand \"empty?\")\n               ((\"2\" (skosimp*)\n                 ((\"2\" (inst -2 \"-x!1\")\n                   ((\"2\" (expand \"member\") ((\"2\" (assert) nil nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"proved"}},{"tag":"formula-decl","id":"glb_int","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"I","type":{"typehash":"1894431357"}},{"tag":"variable","id":"i","type":{"typehash":"3321106813"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","theory":"booleans","type":{"typehash":"1120869698"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"lower_bound?","theory":"bounded_real_defs","type":{"typehash":"3651108074"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"4227483815"}},{"tag":"type-actual","type":{"typehash":"3321106813"}},{"tag":"type-actual","type":{"typehash":"2614391051"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"}}}],"type":{"typehash":"3812766295"}},"argument":{"tag":"variable","id":"I","type":{"typehash":"1894431357"}}}]}},{"tag":"exists","bindings":[{"tag":"variable","id":"j","type":{"typehash":"1233084707"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"greatest_lower_bound?","theory":"bounded_real_defs","type":{"typehash":"3651108074"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"j","type":{"typehash":"1233084707"}},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","type":{"typehash":"4227483815"}},{"tag":"type-actual","type":{"typehash":"3321106813"}},{"tag":"type-actual","type":{"typehash":"2614391051"}},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"}}}],"type":{"typehash":"3812766295"}},"argument":{"tag":"variable","id":"I","type":{"typehash":"1894431357"}}}]}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"lub_int\")\n ((\"\" (skosimp*)\n   ((\"\" (inst -1 \"{i: int | I!1(-i)}\" \"-i!1\")\n     ((\"1\" (prop)\n       ((\"1\" (skosimp*)\n         ((\"1\" (grind :if-match nil)\n           ((\"1\" (inst 1 \"-j!1\")\n             ((\"1\" (prop)\n               ((\"1\" (skosimp*)\n                 ((\"1\" (inst -1 \"-s!1\")\n                   ((\"1\" (assert) nil nil)\n                    (\"2\" (hide -1 -2 2)\n                     ((\"2\" (typepred \"s!1\")\n                       ((\"2\" (expand \"extend\")\n                         ((\"2\" (assert)\n                           ((\"2\" (prop)\n                             ((\"1\" (assert) nil nil)\n                              (\"2\" (lemma \"minus_rat_is_rat\")\n                               ((\"2\" (inst -1 \"s!1\") nil nil)) nil)\n                              (\"3\" (lemma \"minus_int_is_int\")\n                               ((\"3\"\n                                 (inst -1 \"s!1\")\n                                 ((\"3\" (assert) nil nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil)\n                (\"2\" (skosimp*)\n                 ((\"2\" (inst -3 \"-y!1\")\n                   ((\"2\" (assert)\n                     ((\"2\" (skosimp*)\n                       ((\"2\" (inst -1 \"-s!1\")\n                         ((\"1\" (assert) nil nil)\n                          (\"2\" (hide -1 -2 2 3)\n                           ((\"2\" (typepred \"s!1\")\n                             ((\"2\" (expand \"extend\")\n                               ((\"2\"\n                                 (assert)\n                                 ((\"2\"\n                                   (ground)\n                                   ((\"1\"\n                                     (lemma \"minus_rat_is_rat\")\n                                     ((\"1\" (inst -1 \"s!1\") nil nil))\n                                     nil)\n                                    (\"2\"\n                                     (lemma \"minus_int_is_int\")\n                                     ((\"2\" (inst -1 \"s!1\") nil nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil)\n        (\"2\" (hide 2)\n         ((\"2\" (grind :if-match nil)\n           ((\"2\" (inst -4 \"-s!1\")\n             ((\"1\" (assert) nil nil)\n              (\"2\" (hide -1 -2 -3 2)\n               ((\"2\" (typepred \"s!1\")\n                 ((\"2\" (expand \"extend\")\n                   ((\"2\" (ground)\n                     ((\"1\" (lemma \"minus_rat_is_rat\")\n                       ((\"1\" (inst -1 \"s!1\") nil nil)) nil)\n                      (\"2\" (lemma \"minus_int_is_int\")\n                       ((\"2\" (inst -1 \"s!1\") nil nil)) nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil)\n      (\"2\" (hide -1 2)\n       ((\"2\" (typepred \"I!1\")\n         ((\"2\" (grind :if-match nil)\n           ((\"2\" (inst -3 \"-x!1\") ((\"2\" (assert) nil nil)) nil)) nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"proved"}}]},"type-hash":{"tag":"typelist","entries":{"3889784157":{"tag":"functiontype","domain":{"typehash":"3504433184"},"range":{"typehash":"1175884576"}},"1894431357":{"tag":"subtype","supertype":{"typehash":"666670594"},"predicate":{"tag":"constant","id":"nonempty?","theory":"sets","actuals":[{"tag":"type-actual","type":{"typehash":"3321106813"}}],"type":{"typehash":"3947732748"}}},"1233827798":{"tag":"subtype","supertype":{"typehash":"1573404743"},"predicate":{"tag":"variable","id":"N","type":{"typehash":"146729287"}}},"1233827798":{"tag":"subtype","supertype":{"typehash":"1573404743"},"predicate":{"tag":"variable","id":"N","type":{"typehash":"146729287"}}},"3812766295":{"tag":"functiontype","domain":{"typehash":"666670594"},"range":{"typehash":"2479424598"}},"2895152588":{"tag":"functiontype","domain":{"typehash":"140380514"},"range":{"typehash":"2614391051"}},"4092517361":{"tag":"tupletype","types":[{"typehash":"4227483815"},{"typehash":"4227483815"}]},"2601892550":{"tag":"subtype","supertype":{"typehash":"4227483815"},"predicate":{"tag":"constant","id":"rational_pred","theory":"rationals","type":{"typehash":"2479424598"}}},"1120869698":{"tag":"functiontype","domain":{"typehash":"3548206365"},"range":{"typehash":"2614391051"}},"146729287":{"tag":"subtype","supertype":{"typehash":"1466233750"},"predicate":{"tag":"constant","id":"nonempty?","theory":"sets","actuals":[{"tag":"type-actual","type":{"typehash":"1573404743"}}],"type":{"typehash":"1251891764"}}},"2910104866":{"tag":"typename","id":"number","theory":"numbers","actuals":[]},"3278273460":{"tag":"functiontype","domain":{"typehash":"2479424598"},"range":{"typehash":"2614391051"}},"671193416":{"tag":"functiontype","domain":{"typehash":"1175884576"},"range":{"typehash":"2614391051"}},"3947732748":{"tag":"functiontype","domain":{"typehash":"666670594"},"range":{"typehash":"2614391051"}},"4227483815":{"tag":"subtype","supertype":{"typehash":"1175884576"},"predicate":{"tag":"constant","id":"real_pred","theory":"reals","type":{"typehash":"671193416"}}},"2479424598":{"tag":"functiontype","domain":{"typehash":"4227483815"},"range":{"typehash":"2614391051"}},"1175884576":{"tag":"subtype","supertype":{"typehash":"2910104866"},"predicate":{"tag":"constant","id":"number_field_pred","theory":"number_fields","type":{"typehash":"4139633996"}}},"3321106813":{"tag":"subtype","supertype":{"typehash":"2601892550"},"predicate":{"tag":"constant","id":"integer_pred","theory":"integers","type":{"typehash":"3523209364"}}},"140380514":{"tag":"tupletype","types":[{"typehash":"2910104866"},{"typehash":"2910104866"}]},"3651108074":{"tag":"functiontype","domain":{"typehash":"2665841905"},"range":{"typehash":"2614391051"}},"2665841905":{"tag":"tupletype","types":[{"typehash":"4227483815"},{"typehash":"2800808359"}]},"3936226261":{"tag":"functiontype","domain":{"typehash":"3527654236"},"range":{"typehash":"1175884576"}},"3523209364":{"tag":"functiontype","domain":{"typehash":"2601892550"},"range":{"typehash":"2614391051"}},"1116925311":{"tag":"functiontype","domain":{"typehash":"1466233750"},"range":{"typehash":"2479424598"}},"666670594":{"tag":"functiontype","domain":{"typehash":"3321106813"},"range":{"typehash":"2614391051"}},"1152663522":{"tag":"subtype","supertype":{"typehash":"1175884576"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"r","type":{"typehash":"1175884576"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"\/=","theory":"notequal","actuals":[{"tag":"type-actual","type":{"typehash":"2910104866"}}],"type":{"typehash":"2895152588"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"r","type":{"typehash":"1175884576"}},{"tag":"integer","integer-value":0}]}}}},"3297885759":{"tag":"subtype","supertype":{"typehash":"3321106813"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"\/=","theory":"notequal","actuals":[{"tag":"type-actual","type":{"typehash":"2910104866"}}],"type":{"typehash":"2895152588"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}},{"tag":"integer","integer-value":0}]}}}},"1573404743":{"tag":"subtype","supertype":{"typehash":"3321106813"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":">=","theory":"reals","type":{"typehash":"2209491690"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}},{"tag":"integer","integer-value":0}]}}}},"2614391051":{"tag":"typename","id":"boolean","theory":"booleans","actuals":[]},"3527654237":{"tag":"functiontype","domain":{"typehash":"1175884576"},"range":{"typehash":"1175884576"}},"4139633996":{"tag":"functiontype","domain":{"typehash":"2910104866"},"range":{"typehash":"2614391051"}},"3527654236":{"tag":"tupletype","types":[{"typehash":"1175884576"},{"typehash":"1175884576"}]},"1233084707":{"tag":"subtype","supertype":{"typehash":"3321106813"},"predicate":{"tag":"variable","id":"I","type":{"typehash":"1894431357"}}},"1466233750":{"tag":"functiontype","domain":{"typehash":"1573404743"},"range":{"typehash":"2614391051"}},"3548206365":{"tag":"tupletype","types":[{"typehash":"2614391051"},{"typehash":"2614391051"}]},"1233084707":{"tag":"subtype","supertype":{"typehash":"3321106813"},"predicate":{"tag":"variable","id":"I","type":{"typehash":"1894431357"}}},"2800808359":{"tag":"subtype","supertype":{"typehash":"2479424598"},"predicate":{"tag":"constant","id":"nonempty?","theory":"sets","actuals":[{"tag":"type-actual","type":{"typehash":"4227483815"}}],"type":{"typehash":"3278273460"}}},"2209491690":{"tag":"functiontype","domain":{"typehash":"4092517361"},"range":{"typehash":"2614391051"}},"1251891764":{"tag":"functiontype","domain":{"typehash":"1466233750"},"range":{"typehash":"2614391051"}},"3504433184":{"tag":"tupletype","types":[{"typehash":"1175884576"},{"typehash":"1152663522"}]}}}}