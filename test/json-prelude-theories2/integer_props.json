{"tag":"module-with-hash","module":{"tag":"theory","id":"integer_props","declarations":[{"tag":"var-decl","id":"m","declared-type":{"typehash":"3070201317"},"type":{"typehash":"1573404743"},"place":[3320,2,3320,15]},{"tag":"var-decl","id":"n","declared-type":{"typehash":"3070201317"},"type":{"typehash":"1573404743"},"place":[3320,5,3320,15]},{"tag":"var-decl","id":"i","declared-type":{"typehash":"1732140688"},"type":{"typehash":"3321106813"},"place":[3321,2,3321,18]},{"tag":"var-decl","id":"j","declared-type":{"typehash":"1732140688"},"type":{"typehash":"3321106813"},"place":[3321,5,3321,18]},{"tag":"var-decl","id":"k","declared-type":{"typehash":"1732140688"},"type":{"typehash":"3321106813"},"place":[3321,8,3321,18]},{"tag":"var-decl","id":"n0j","declared-type":{"typehash":"2755754254"},"type":{"typehash":"3297885759"},"place":[3322,2,3322,16]},{"tag":"var-decl","id":"N","declared-type":{"typehash":"1172569153"},"type":{"typehash":"146729287"},"place":[3324,2,3324,25]},{"tag":"var-decl","id":"I","declared-type":{"typehash":"1172569153"},"type":{"typehash":"1894431357"},"place":[3326,2,3326,25]},{"tag":"formula-decl","id":"integer_pred_ax","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}}],"expression":{"tag":"exists","bindings":[{"tag":"variable","id":"n","type":{"typehash":"1573404743"},"place":[3328,32,3328,33]}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"OR","theory":"booleans","type":{"typehash":"1120869698"},"place":[3328,41,3328,43]},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","theory":"equalities","actuals":[{"tag":"type-actual","typehash":"2910104866","place":[3328,37,3328,38,"actual created for name ="]}],"type":{"typehash":"2895152588"},"place":[3328,37,3328,38]},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}},{"tag":"variable","id":"n","type":{"typehash":"1573404743"},"place":[3328,39,3328,40]}]},"place":[3328,35,3328,40]},{"tag":"apply","operator":{"tag":"constant","id":"=","theory":"equalities","actuals":[{"tag":"type-actual","typehash":"2910104866","place":[3328,46,3328,47,"actual created for name ="]}],"type":{"typehash":"2895152588"},"place":[3328,46,3328,47]},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}},{"tag":"apply","operator":{"tag":"constant","id":"-","theory":"number_fields","type":{"typehash":"3527654237"},"place":[3328,48,3328,49]},"argument":{"tag":"variable","id":"n","type":{"typehash":"1573404743"},"place":[3328,49,3328,50]},"place":[3328,48,3328,50]}]},"place":[3328,44,3328,50]}],"place":[3328,35,3328,50]},"place":[3328,35,3328,50]},"place":[3328,25,3328,50]}},"proof":{"tag":"proof-info","script":"(\"\" (skosimp*)\n ((\"\" (case \"i!1 >= 0\")\n   ((\"1\" (inst 1 \"i!1\") nil nil)\n    (\"2\" (inst 2 \"-i!1\")\n     ((\"1\" (assert) nil nil) (\"2\" (assert) nil nil)) nil))\n   nil))\n nil)","status":"proved"},"place":[3328,2,3328,50]},{"tag":"formula-decl","id":"div_simple","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}},{"tag":"variable","id":"n0j","type":{"typehash":"3297885759"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","theory":"equalities","actuals":[{"tag":"type-actual","typehash":"2614391051","place":[3330,42,3330,43,"actual created for name ="]}],"type":{"typehash":"1120869698"},"place":[3330,42,3330,43]},"argument":{"tag":"tuple","exprs":[{"tag":"exists","bindings":[{"tag":"variable","id":"k","type":{"typehash":"3321106813"},"place":[3330,28,3330,29]}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","theory":"equalities","actuals":[{"tag":"type-actual","typehash":"2910104866","place":[3330,33,3330,34,"actual created for name ="]}],"type":{"typehash":"2895152588"},"place":[3330,33,3330,34]},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}},{"tag":"apply","operator":{"tag":"constant","id":"*","theory":"number_fields","type":{"typehash":"3936226261"},"place":[3330,36,3330,37]},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"k","type":{"typehash":"3321106813"},"place":[3330,35,3330,36]},{"tag":"variable","id":"n0j","type":{"typehash":"3297885759"}}],"place":[3330,35,3330,40]},"place":[3330,35,3330,40]}]},"place":[3330,31,3330,40]},"place":[3330,21,3330,40]},{"tag":"apply","operator":{"tag":"constant","id":"integer_pred","theory":"integers","type":{"typehash":"3523209364"},"place":[3330,44,3330,56]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/","theory":"number_fields","type":{"typehash":"3889784157"},"place":[3330,58,3330,59]},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}},{"tag":"variable","id":"n0j","type":{"typehash":"3297885759"}}],"place":[3330,57,3330,62]},"place":[3330,57,3330,62]},"place":[3330,44,3330,63]}]},"place":[3330,21,3330,63]}},"proof":{"tag":"proof-info","script":"(\"\" (grind :if-match nil)\n ((\"\" (inst 2 \"i!1\/n0j!1\") ((\"\" (assert) nil nil)) nil)) nil)","status":"proved"},"place":[3330,2,3330,63]},{"tag":"formula-decl","id":"lub_nat_TCC1","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"N","type":{"typehash":"146729287"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"nonempty?","theory":"sets","actuals":[{"tag":"type-actual","typehash":"4227483815","place":[3345,50,3345,51,"creating actual real for conversion extend[real, int, bool, FALSE]"]}],"type":{"typehash":"3278273460"},"place":[1938,10,1938,25]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","typehash":"4227483815","place":[3345,50,3345,51,"creating actual real for conversion extend[real, int, bool, FALSE]"]},{"tag":"type-actual","typehash":"1573404743","place":[3341,45,3341,46,"creating actual nat for conversion extend[real, nat, bool, FALSE]"]},{"tag":"type-actual","typehash":"2614391051","place":[35,41,35,67,"creating actual bool for conversion extend\n                                    [int, subrange(i, j), bool, FALSE]"]},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]}],"type":{"typehash":"1116925311"},"place":[373,13,373,38]},"argument":{"tag":"variable","id":"N","type":{"typehash":"146729287"}},"place":[3333,20,3333,21]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"proved"}},{"tag":"formula-decl","id":"lub_nat","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"N","type":{"typehash":"146729287"}},{"tag":"variable","id":"m","type":{"typehash":"1573404743"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","theory":"booleans","type":{"typehash":"1120869698"},"place":[3334,6,3334,8]},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"upper_bound?","theory":"bounded_real_defs","type":{"typehash":"3651108074"},"place":[3333,4,3333,16]},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"m","type":{"typehash":"1573404743"}},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","typehash":"4227483815","place":[3345,50,3345,51,"creating actual real for conversion extend[real, int, bool, FALSE]"]},{"tag":"type-actual","typehash":"1573404743","place":[3341,45,3341,46,"creating actual nat for conversion extend[real, nat, bool, FALSE]"]},{"tag":"type-actual","typehash":"2614391051","place":[35,41,35,67,"creating actual bool for conversion extend\n                                    [int, subrange(i, j), bool, FALSE]"]},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]}],"type":{"typehash":"1116925311"},"place":[373,13,373,38]},"argument":{"tag":"variable","id":"N","type":{"typehash":"146729287"}},"place":[3333,20,3333,21]}],"place":[3333,17,3333,21]},"place":[3333,4,3333,22]},{"tag":"exists","bindings":[{"tag":"variable","id":"n","type":{"typehash":"1233827798"},"place":[3334,17,3334,22]}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"least_upper_bound?","theory":"bounded_real_defs","type":{"typehash":"3651108074"},"place":[3334,25,3334,43]},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"1233827798"},"place":[3334,17,3334,22]},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","typehash":"4227483815","place":[3345,50,3345,51,"creating actual real for conversion extend[real, int, bool, FALSE]"]},{"tag":"type-actual","typehash":"1573404743","place":[3341,45,3341,46,"creating actual nat for conversion extend[real, nat, bool, FALSE]"]},{"tag":"type-actual","typehash":"2614391051","place":[35,41,35,67,"creating actual bool for conversion extend\n                                    [int, subrange(i, j), bool, FALSE]"]},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]}],"type":{"typehash":"1116925311"},"place":[373,13,373,38]},"argument":{"tag":"variable","id":"N","type":{"typehash":"146729287"}},"place":[3334,47,3334,48]}],"place":[3334,44,3334,48]},"place":[3334,25,3334,49]},"place":[3334,9,3334,49]}],"place":[3333,4,3334,49]},"place":[3333,4,3334,49]}},"proof":{"tag":"proof-info","script":"(\"\" (induct \"m\")\n ((\"1\" (skosimp*)\n   ((\"1\" (expand \"upper_bound?\")\n     ((\"1\" (typepred \"N!1\")\n       ((\"1\" (expand \"nonempty?\")\n         ((\"1\" (expand \"empty?\")\n           ((\"1\" (skosimp*)\n             ((\"1\" (expand \"member\")\n               ((\"1\" (inst 1 \"x!1\")\n                 ((\"1\" (expand \"least_upper_bound?\")\n                   ((\"1\" (split)\n                     ((\"1\" (expand \"upper_bound?\")\n                       ((\"1\" (skosimp*)\n                         ((\"1\" (inst -2 \"s!1\") ((\"1\" (assert) nil nil))\n                           nil))\n                         nil))\n                       nil)\n                      (\"2\" (skosimp*)\n                       ((\"2\" (expand \"upper_bound?\")\n                         ((\"2\" (inst -1 \"x!1\")\n                           ((\"2\" (expand \"extend\")\n                             ((\"2\" (propax) nil nil)) nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil)\n  (\"2\" (skosimp*)\n   ((\"2\" (inst -1 \"N!1\")\n     ((\"2\" (assert)\n       ((\"2\" (replace 1)\n         ((\"2\" (assert)\n           ((\"2\" (expand \"upper_bound?\")\n             ((\"2\" (skosimp*)\n               ((\"2\" (inst 2 \"s!1\")\n                 ((\"1\" (expand \"least_upper_bound?\")\n                   ((\"1\" (split)\n                     ((\"1\" (expand \"upper_bound?\")\n                       ((\"1\" (skosimp*)\n                         ((\"1\" (inst -1 \"s!2\")\n                           ((\"1\" (assert)\n                             ((\"1\"\n                               (case\n                                \"forall (i, j: int): i < j iff i + 1 <= j\")\n                               ((\"1\"\n                                 (inst -1 \"s!1\" \"s!2\")\n                                 ((\"1\" (assert) nil nil)\n                                  (\"2\"\n                                   (typepred \"s!2\")\n                                   ((\"2\"\n                                     (expand \"extend\")\n                                     ((\"2\" (prop) nil nil))\n                                     nil))\n                                   nil)\n                                  (\"3\"\n                                   (typepred \"s!1\")\n                                   ((\"3\"\n                                     (expand \"extend\")\n                                     ((\"3\" (prop) nil nil))\n                                     nil))\n                                   nil))\n                                 nil)\n                                (\"2\"\n                                 (skosimp)\n                                 ((\"2\"\n                                   (ground)\n                                   ((\"2\" (assert :flush? t) nil nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil)\n                      (\"2\" (skosimp)\n                       ((\"2\" (expand \"upper_bound?\")\n                         ((\"2\" (inst -1 \"s!1\") nil nil)) nil))\n                       nil))\n                     nil))\n                   nil)\n                  (\"2\" (typepred \"s!1\")\n                   ((\"2\" (expand \"extend\") ((\"2\" (prop) nil nil)) nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil)\n  (\"3\" (hide 2)\n   ((\"3\" (skosimp)\n     ((\"3\" (skosimp)\n       ((\"3\" (expand \"nonempty?\")\n         ((\"3\" (expand \"empty?\")\n           ((\"3\" (typepred \"N!1\")\n             ((\"3\" (expand \"nonempty?\")\n               ((\"3\" (expand \"empty?\")\n                 ((\"3\" (skosimp)\n                   ((\"3\" (inst -3 \"x!1\")\n                     ((\"3\" (expand \"member\")\n                       ((\"3\" (expand \"extend\") ((\"3\" (propax) nil nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil)\n  (\"4\" (hide 2)\n   ((\"4\" (skosimp)\n     ((\"4\" (typepred \"N!1\")\n       ((\"4\" (expand \"nonempty?\")\n         ((\"4\" (expand \"empty?\")\n           ((\"4\" (skosimp)\n             ((\"4\" (expand \"member\")\n               ((\"4\" (inst -2 \"x!1\")\n                 ((\"4\" (expand \"extend\") ((\"4\" (propax) nil nil)) nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"proved"},"place":[3332,2,3334,49]},{"tag":"formula-decl","id":"lub_int_TCC1","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"I","type":{"typehash":"1894431357"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"nonempty?","theory":"sets","actuals":[{"tag":"type-actual","typehash":"4227483815","place":[3345,50,3345,51,"creating actual real for conversion extend[real, int, bool, FALSE]"]}],"type":{"typehash":"3278273460"},"place":[1938,10,1938,25]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","typehash":"4227483815","place":[3345,50,3345,51,"creating actual real for conversion extend[real, int, bool, FALSE]"]},{"tag":"type-actual","typehash":"3321106813","place":[3345,50,3345,51,"creating actual int for conversion extend[real, int, bool, FALSE]"]},{"tag":"type-actual","typehash":"2614391051","place":[35,41,35,67,"creating actual bool for conversion extend\n                                    [int, subrange(i, j), bool, FALSE]"]},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]}],"type":{"typehash":"3812766295"},"place":[373,13,373,38]},"argument":{"tag":"variable","id":"I","type":{"typehash":"1894431357"}},"place":[3337,20,3337,21]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"proved"}},{"tag":"formula-decl","id":"lub_int","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"I","type":{"typehash":"1894431357"}},{"tag":"variable","id":"i","type":{"typehash":"3321106813"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","theory":"booleans","type":{"typehash":"1120869698"},"place":[3338,6,3338,8]},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"upper_bound?","theory":"bounded_real_defs","type":{"typehash":"3651108074"},"place":[3337,4,3337,16]},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","typehash":"4227483815","place":[3345,50,3345,51,"creating actual real for conversion extend[real, int, bool, FALSE]"]},{"tag":"type-actual","typehash":"3321106813","place":[3345,50,3345,51,"creating actual int for conversion extend[real, int, bool, FALSE]"]},{"tag":"type-actual","typehash":"2614391051","place":[35,41,35,67,"creating actual bool for conversion extend\n                                    [int, subrange(i, j), bool, FALSE]"]},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]}],"type":{"typehash":"3812766295"},"place":[373,13,373,38]},"argument":{"tag":"variable","id":"I","type":{"typehash":"1894431357"}},"place":[3337,20,3337,21]}],"place":[3337,17,3337,21]},"place":[3337,4,3337,22]},{"tag":"exists","bindings":[{"tag":"variable","id":"j","type":{"typehash":"1233084707"},"place":[3338,17,3338,22]}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"least_upper_bound?","theory":"bounded_real_defs","type":{"typehash":"3651108074"},"place":[3338,25,3338,43]},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"j","type":{"typehash":"1233084707"},"place":[3338,17,3338,22]},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","typehash":"4227483815","place":[3345,50,3345,51,"creating actual real for conversion extend[real, int, bool, FALSE]"]},{"tag":"type-actual","typehash":"3321106813","place":[3345,50,3345,51,"creating actual int for conversion extend[real, int, bool, FALSE]"]},{"tag":"type-actual","typehash":"2614391051","place":[35,41,35,67,"creating actual bool for conversion extend\n                                    [int, subrange(i, j), bool, FALSE]"]},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]}],"type":{"typehash":"3812766295"},"place":[373,13,373,38]},"argument":{"tag":"variable","id":"I","type":{"typehash":"1894431357"}},"place":[3338,47,3338,48]}],"place":[3338,44,3338,48]},"place":[3338,25,3338,49]},"place":[3338,9,3338,49]}],"place":[3337,4,3338,49]},"place":[3337,4,3338,49]}},"proof":{"tag":"proof-info","script":"(\"\" (skosimp*)\n ((\"\" (typepred \"I!1\")\n   ((\"\" (expand \"nonempty?\")\n     ((\"\" (expand \"empty?\")\n       ((\"\" (skosimp*)\n         ((\"\" (lemma \"lub_nat\")\n           ((\"\" (expand \"member\")\n             ((\"\" (inst - \"{n|I!1(n+x!1)}\" \"i!1-x!1\")\n               ((\"1\" (prop)\n                 ((\"1\" (skosimp*)\n                   ((\"1\" (inst + \"n!1+x!1\")\n                     ((\"1\" (assert)\n                       ((\"1\" (expand \"least_upper_bound?\")\n                         ((\"1\" (prop)\n                           ((\"1\" (expand \"upper_bound?\")\n                             ((\"1\" (skosimp*)\n                               ((\"1\"\n                                 (assert)\n                                 ((\"1\"\n                                   (inst - \"s!1-x!1\")\n                                   ((\"1\" (assert) nil nil)\n                                    (\"2\"\n                                     (assert)\n                                     ((\"2\"\n                                       (expand \"extend\")\n                                       ((\"2\"\n                                         (split 1)\n                                         ((\"1\"\n                                           (flatten)\n                                           ((\"1\"\n                                             (typepred \"s!1\")\n                                             ((\"1\"\n                                               (expand \"extend\")\n                                               ((\"1\" (assert) nil nil))\n                                               nil))\n                                             nil))\n                                           nil)\n                                          (\"2\"\n                                           (typepred \"s!1\")\n                                           ((\"2\"\n                                             (expand \"extend\")\n                                             ((\"2\"\n                                               (prop)\n                                               ((\"1\"\n                                                 (lemma\n                                                  \"rat_minus_rat_is_rat\")\n                                                 ((\"1\"\n                                                   (inst?)\n                                                   nil\n                                                   nil))\n                                                 nil)\n                                                (\"2\"\n                                                 (lemma\n                                                  \"int_minus_int_is_int\")\n                                                 ((\"2\"\n                                                   (inst?)\n                                                   ((\"2\"\n                                                     (assert)\n                                                     nil\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil)\n                            (\"2\" (skosimp*)\n                             ((\"2\" (inst - \"y!1-x!1\")\n                               ((\"2\"\n                                 (assert)\n                                 ((\"2\"\n                                   (expand \"upper_bound?\")\n                                   ((\"2\"\n                                     (skosimp*)\n                                     ((\"2\"\n                                       (inst?)\n                                       ((\"2\"\n                                         (expand \"extend\")\n                                         ((\"2\" (propax) nil nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil)\n                  (\"2\" (expand \"upper_bound?\")\n                   ((\"2\" (skosimp*)\n                     ((\"2\" (typepred \"s!1\")\n                       ((\"2\" (expand \"extend\" -1)\n                         ((\"2\" (prop)\n                           ((\"2\" (inst - \"s!1+x!1\")\n                             ((\"1\" (assert) nil nil)\n                              (\"2\" (expand \"extend\" 1)\n                               ((\"2\"\n                                 (prop)\n                                 ((\"1\"\n                                   (lemma \"rat_plus_rat_is_rat\")\n                                   ((\"1\" (inst?) nil nil))\n                                   nil)\n                                  (\"2\"\n                                   (lemma \"int_plus_int_is_int\")\n                                   ((\"2\"\n                                     (inst?)\n                                     ((\"2\" (assert) nil nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil)\n                (\"2\" (assert)\n                 ((\"2\" (expand \"upper_bound?\")\n                   ((\"2\" (inst -2 \"x!1\")\n                     ((\"1\" (assert) nil nil)\n                      (\"2\" (expand \"extend\") ((\"2\" (propax) nil nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil)\n                (\"3\" (expand \"nonempty?\")\n                 ((\"3\" (expand \"empty?\")\n                   ((\"3\" (inst -1 \"0\")\n                     ((\"3\" (expand \"member\") ((\"3\" (propax) nil nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"proved"},"place":[3336,2,3338,49]},{"tag":"formula-decl","id":"glb_nat","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"N","type":{"typehash":"146729287"}}],"expression":{"tag":"exists","bindings":[{"tag":"variable","id":"n","type":{"typehash":"1233827798"},"place":[3341,12,3341,17]}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"greatest_lower_bound?","theory":"bounded_real_defs","type":{"typehash":"3651108074"},"place":[3341,20,3341,41]},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"1233827798"},"place":[3341,12,3341,17]},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","typehash":"4227483815","place":[3345,50,3345,51,"creating actual real for conversion extend[real, int, bool, FALSE]"]},{"tag":"type-actual","typehash":"1573404743","place":[3341,45,3341,46,"creating actual nat for conversion extend[real, nat, bool, FALSE]"]},{"tag":"type-actual","typehash":"2614391051","place":[35,41,35,67,"creating actual bool for conversion extend\n                                    [int, subrange(i, j), bool, FALSE]"]},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]}],"type":{"typehash":"1116925311"},"place":[373,13,373,38]},"argument":{"tag":"variable","id":"N","type":{"typehash":"146729287"}},"place":[3341,45,3341,46]}],"place":[3341,42,3341,46]},"place":[3341,20,3341,47]},"place":[3341,4,3341,47]}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"lub_int\")\n ((\"\" (skosimp*)\n   ((\"\" (inst -1 \"{i: nonpos_int | N!1(-i)}\" \"0\")\n     ((\"1\" (grind :if-match nil)\n       ((\"1\" (inst 1 \"-j!1\")\n         ((\"1\" (prop)\n           ((\"1\" (skosimp*)\n             ((\"1\" (inst -3 \"-s!1\")\n               ((\"1\" (assert) nil nil)\n                (\"2\" (typepred \"s!1\")\n                 ((\"2\" (expand \"extend\")\n                   ((\"2\" (assert)\n                     ((\"2\" (prop)\n                       ((\"1\" (assert) nil nil) (\"2\" (assert) nil nil)\n                        (\"3\" (assert)\n                         ((\"3\" (lemma \"minus_rat_is_rat\")\n                           ((\"3\" (inst -1 \"s!1\") nil nil)) nil))\n                         nil)\n                        (\"4\" (lemma \"minus_int_is_int\")\n                         ((\"4\" (inst -1 \"s!1\") ((\"4\" (assert) nil nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil)\n            (\"2\" (hide -3)\n             ((\"2\" (skosimp*)\n               ((\"2\" (inst -4 \"-y!1\")\n                 ((\"2\" (prop)\n                   ((\"1\" (assert) nil nil)\n                    (\"2\" (skosimp*)\n                     ((\"2\" (inst -1 \"-s!1\")\n                       ((\"1\" (assert) nil nil)\n                        (\"2\" (typepred \"s!1\")\n                         ((\"2\" (expand \"extend\")\n                           ((\"2\" (prop)\n                             ((\"1\" (lemma \"minus_rat_is_rat\")\n                               ((\"1\" (inst -1 \"s!1\") nil nil)) nil)\n                              (\"2\" (lemma \"minus_int_is_int\")\n                               ((\"2\"\n                                 (inst -1 \"s!1\")\n                                 ((\"2\" (assert) nil nil))\n                                 nil))\n                               nil)\n                              (\"3\" (assert) nil nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil)\n      (\"2\" (hide 2)\n       ((\"2\" (expand \"extend\")\n         ((\"2\" (typepred \"N!1\")\n           ((\"2\" (expand \"nonempty?\")\n             ((\"2\" (expand \"empty?\")\n               ((\"2\" (skosimp*)\n                 ((\"2\" (inst -2 \"-x!1\")\n                   ((\"2\" (expand \"member\") ((\"2\" (assert) nil nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"proved"},"place":[3340,2,3341,47]},{"tag":"formula-decl","id":"glb_int","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"I","type":{"typehash":"1894431357"}},{"tag":"variable","id":"i","type":{"typehash":"3321106813"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","theory":"booleans","type":{"typehash":"1120869698"},"place":[3345,6,3345,8]},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"lower_bound?","theory":"bounded_real_defs","type":{"typehash":"3651108074"},"place":[3344,4,3344,16]},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"}},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","typehash":"4227483815","place":[3345,50,3345,51,"creating actual real for conversion extend[real, int, bool, FALSE]"]},{"tag":"type-actual","typehash":"3321106813","place":[3345,50,3345,51,"creating actual int for conversion extend[real, int, bool, FALSE]"]},{"tag":"type-actual","typehash":"2614391051","place":[35,41,35,67,"creating actual bool for conversion extend\n                                    [int, subrange(i, j), bool, FALSE]"]},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]}],"type":{"typehash":"3812766295"},"place":[373,13,373,38]},"argument":{"tag":"variable","id":"I","type":{"typehash":"1894431357"}},"place":[3344,20,3344,21]}],"place":[3344,17,3344,21]},"place":[3344,4,3344,22]},{"tag":"exists","bindings":[{"tag":"variable","id":"j","type":{"typehash":"1233084707"},"place":[3345,17,3345,22]}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"greatest_lower_bound?","theory":"bounded_real_defs","type":{"typehash":"3651108074"},"place":[3345,25,3345,46]},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"j","type":{"typehash":"1233084707"},"place":[3345,17,3345,22]},{"tag":"apply","operator":{"tag":"constant","id":"extend","theory":"extend","actuals":[{"tag":"type-actual","typehash":"4227483815","place":[3345,50,3345,51,"creating actual real for conversion extend[real, int, bool, FALSE]"]},{"tag":"type-actual","typehash":"3321106813","place":[3345,50,3345,51,"creating actual int for conversion extend[real, int, bool, FALSE]"]},{"tag":"type-actual","typehash":"2614391051","place":[35,41,35,67,"creating actual bool for conversion extend\n                                    [int, subrange(i, j), bool, FALSE]"]},{"tag":"const-actual","expr":{"tag":"constant","id":"FALSE","theory":"booleans","type":{"typehash":"2614391051"},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]},"place":[35,41,35,67,"creating actual FALSE for conversion extend\n                                     [int, subrange(i, j), bool, FALSE]"]}],"type":{"typehash":"3812766295"},"place":[373,13,373,38]},"argument":{"tag":"variable","id":"I","type":{"typehash":"1894431357"}},"place":[3345,50,3345,51]}],"place":[3345,47,3345,51]},"place":[3345,25,3345,52]},"place":[3345,9,3345,52]}],"place":[3344,4,3345,52]},"place":[3344,4,3345,52]}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"lub_int\")\n ((\"\" (skosimp*)\n   ((\"\" (inst -1 \"{i: int | I!1(-i)}\" \"-i!1\")\n     ((\"1\" (prop)\n       ((\"1\" (skosimp*)\n         ((\"1\" (grind :if-match nil)\n           ((\"1\" (inst 1 \"-j!1\")\n             ((\"1\" (prop)\n               ((\"1\" (skosimp*)\n                 ((\"1\" (inst -1 \"-s!1\")\n                   ((\"1\" (assert) nil nil)\n                    (\"2\" (hide -1 -2 2)\n                     ((\"2\" (typepred \"s!1\")\n                       ((\"2\" (expand \"extend\")\n                         ((\"2\" (assert)\n                           ((\"2\" (prop)\n                             ((\"1\" (assert) nil nil)\n                              (\"2\" (lemma \"minus_rat_is_rat\")\n                               ((\"2\" (inst -1 \"s!1\") nil nil)) nil)\n                              (\"3\" (lemma \"minus_int_is_int\")\n                               ((\"3\"\n                                 (inst -1 \"s!1\")\n                                 ((\"3\" (assert) nil nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil)\n                (\"2\" (skosimp*)\n                 ((\"2\" (inst -3 \"-y!1\")\n                   ((\"2\" (assert)\n                     ((\"2\" (skosimp*)\n                       ((\"2\" (inst -1 \"-s!1\")\n                         ((\"1\" (assert) nil nil)\n                          (\"2\" (hide -1 -2 2 3)\n                           ((\"2\" (typepred \"s!1\")\n                             ((\"2\" (expand \"extend\")\n                               ((\"2\"\n                                 (assert)\n                                 ((\"2\"\n                                   (ground)\n                                   ((\"1\"\n                                     (lemma \"minus_rat_is_rat\")\n                                     ((\"1\" (inst -1 \"s!1\") nil nil))\n                                     nil)\n                                    (\"2\"\n                                     (lemma \"minus_int_is_int\")\n                                     ((\"2\" (inst -1 \"s!1\") nil nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil)\n        (\"2\" (hide 2)\n         ((\"2\" (grind :if-match nil)\n           ((\"2\" (inst -4 \"-s!1\")\n             ((\"1\" (assert) nil nil)\n              (\"2\" (hide -1 -2 -3 2)\n               ((\"2\" (typepred \"s!1\")\n                 ((\"2\" (expand \"extend\")\n                   ((\"2\" (ground)\n                     ((\"1\" (lemma \"minus_rat_is_rat\")\n                       ((\"1\" (inst -1 \"s!1\") nil nil)) nil)\n                      (\"2\" (lemma \"minus_int_is_int\")\n                       ((\"2\" (inst -1 \"s!1\") nil nil)) nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil)\n      (\"2\" (hide -1 2)\n       ((\"2\" (typepred \"I!1\")\n         ((\"2\" (grind :if-match nil)\n           ((\"2\" (inst -3 \"-x!1\") ((\"2\" (assert) nil nil)) nil)) nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"proved"},"place":[3343,2,3345,52]}],"place":[3318,0,3347,18]},"type-hash":{"tag":"typelist","entries":{"3889784157":{"tag":"functiontype","domain":{"typehash":"3504433184"},"range":{"typehash":"1175884576"}},"1894431357":{"tag":"subtype","supertype":{"typehash":"666670594"},"predicate":{"tag":"constant","id":"nonempty?","theory":"sets","actuals":[{"tag":"type-actual","typehash":"3321106813","place":[3345,50,3345,51,"creating actual int for conversion extend[real, int, bool, FALSE]"]}],"type":{"typehash":"3947732748"},"place":[3326,10,3326,24]}},"1233827798":{"tag":"subtype","supertype":{"typehash":"1573404743"},"predicate":{"tag":"variable","id":"N","type":{"typehash":"146729287"}}},"1233827798":{"tag":"subtype","supertype":{"typehash":"1573404743"},"predicate":{"tag":"variable","id":"N","type":{"typehash":"146729287"}}},"3812766295":{"tag":"functiontype","domain":{"typehash":"666670594"},"range":{"typehash":"2479424598"}},"2895152588":{"tag":"functiontype","domain":{"typehash":"140380514"},"range":{"typehash":"2614391051"}},"4092517361":{"tag":"tupletype","types":[{"typehash":"4227483815","typehash":"4227483815"}]},"2601892550":{"tag":"subtype","supertype":{"typehash":"4227483815"},"predicate":{"tag":"constant","id":"rational_pred","theory":"rationals","type":{"typehash":"2479424598"}}},"1120869698":{"tag":"functiontype","domain":{"typehash":"3548206365"},"range":{"typehash":"2614391051"}},"146729287":{"tag":"subtype","supertype":{"typehash":"1466233750"},"predicate":{"tag":"constant","id":"nonempty?","theory":"sets","actuals":[{"tag":"type-actual","typehash":"1573404743","place":[3341,45,3341,46,"creating actual nat for conversion extend[real, nat, bool, FALSE]"]}],"type":{"typehash":"1251891764"},"place":[3324,10,3324,24]}},"2910104866":{"tag":"typename","id":"number","theory":"numbers","actuals":null},"1732140688":{"tag":"typename","id":"int","theory":"integers","actuals":null,"place":[3321,15,3321,18]},"3278273460":{"tag":"functiontype","domain":{"typehash":"2479424598"},"range":{"typehash":"2614391051"}},"671193416":{"tag":"functiontype","domain":{"typehash":"1175884576"},"range":{"typehash":"2614391051"}},"2755754254":{"tag":"typename","id":"nzint","theory":"integers","actuals":null,"place":[3322,11,3322,16]},"3947732748":{"tag":"functiontype","domain":{"typehash":"666670594"},"range":{"typehash":"2614391051"}},"4227483815":{"tag":"subtype","supertype":{"typehash":"1175884576"},"predicate":{"tag":"constant","id":"real_pred","theory":"reals","type":{"typehash":"671193416"}}},"2479424598":{"tag":"functiontype","domain":{"typehash":"4227483815"},"range":{"typehash":"2614391051"}},"1175884576":{"tag":"subtype","supertype":{"typehash":"2910104866"},"predicate":{"tag":"constant","id":"number_field_pred","theory":"number_fields","type":{"typehash":"4139633996"}}},"3321106813":{"tag":"subtype","supertype":{"typehash":"2601892550"},"predicate":{"tag":"constant","id":"integer_pred","theory":"integers","type":{"typehash":"3523209364"}}},"140380514":{"tag":"tupletype","types":[{"typehash":"2910104866","typehash":"2910104866"}]},"3651108074":{"tag":"functiontype","domain":{"typehash":"2665841905"},"range":{"typehash":"2614391051"}},"2665841905":{"tag":"tupletype","types":[{"typehash":"4227483815","typehash":"2800808359"}]},"3936226261":{"tag":"functiontype","domain":{"typehash":"3527654236"},"range":{"typehash":"1175884576"}},"3523209364":{"tag":"functiontype","domain":{"typehash":"2601892550"},"range":{"typehash":"2614391051"}},"1116925311":{"tag":"functiontype","domain":{"typehash":"1466233750"},"range":{"typehash":"2479424598"}},"666670594":{"tag":"functiontype","domain":{"typehash":"3321106813"},"range":{"typehash":"2614391051"},"place":[787,12,787,13,"making type from var-decl a"]},"1152663522":{"tag":"subtype","supertype":{"typehash":"1175884576"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"r","type":{"typehash":"1175884576"},"place":[1806,35,1806,50]}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"\/=","theory":"notequal","actuals":[{"tag":"type-actual","typehash":"2910104866","place":[1806,55,1806,57,"actual created for name \/="]}],"type":{"typehash":"2895152588"},"place":[1806,55,1806,57]},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"r","type":{"typehash":"1175884576"},"place":[1806,53,1806,54]},{"tag":"integer","integer-value":0,"place":[1806,58,1806,59]}]},"place":[1806,53,1806,59]},"place":[1806,34,1806,60]}},"1172569153":{"tag":"subtype","supertype":[null],"predicate":null,"place":[3326,9,3326,25]},"3070201317":{"tag":"typename","id":"nat","theory":"naturalnumbers","actuals":null,"place":[3320,12,3320,15]},"3297885759":{"tag":"subtype","supertype":{"typehash":"3321106813"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"},"place":[2176,36,2176,42]}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"\/=","theory":"notequal","actuals":[{"tag":"type-actual","typehash":"2910104866","place":[2176,47,2176,49,"actual created for name \/="]}],"type":{"typehash":"2895152588"},"place":[2176,47,2176,49]},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"},"place":[2176,45,2176,46]},{"tag":"integer","integer-value":0,"place":[2176,50,2176,51]}]},"place":[2176,45,2176,51]},"place":[2176,35,2176,52]}},"1573404743":{"tag":"subtype","supertype":{"typehash":"3321106813"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"},"place":[2198,31,2198,37]}],"expression":{"tag":"apply","operator":{"tag":"constant","id":">=","theory":"reals","type":{"typehash":"2209491690"},"place":[2198,49,2198,51]},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"3321106813"},"place":[2198,47,2198,48]},{"tag":"integer","integer-value":0,"place":[2198,52,2198,53]}]},"place":[2198,47,2198,53]},"place":[2198,30,2198,54]}},"2614391051":{"tag":"typename","id":"boolean","theory":"booleans","actuals":null,"place":[177,62,177,69]},"1172569153":{"tag":"subtype","supertype":[null],"predicate":null,"place":[3324,9,3324,25]},"3527654237":{"tag":"functiontype","domain":{"typehash":"1175884576"},"range":{"typehash":"1175884576"}},"4139633996":{"tag":"functiontype","domain":{"typehash":"2910104866"},"range":{"typehash":"2614391051"}},"3527654236":{"tag":"tupletype","types":[{"typehash":"1175884576","typehash":"1175884576"}]},"1233084707":{"tag":"subtype","supertype":{"typehash":"3321106813"},"predicate":{"tag":"variable","id":"I","type":{"typehash":"1894431357"}}},"1466233750":{"tag":"functiontype","domain":{"typehash":"1573404743"},"range":{"typehash":"2614391051"},"place":[787,12,787,13,"making type from var-decl a"]},"3548206365":{"tag":"tupletype","types":[{"typehash":"2614391051","typehash":"2614391051"}]},"1233084707":{"tag":"subtype","supertype":{"typehash":"3321106813"},"predicate":{"tag":"variable","id":"I","type":{"typehash":"1894431357"}}},"2800808359":{"tag":"subtype","supertype":{"typehash":"2479424598"},"predicate":{"tag":"constant","id":"nonempty?","theory":"sets","actuals":[{"tag":"type-actual","typehash":"4227483815","place":[3345,50,3345,51,"creating actual real for conversion extend[real, int, bool, FALSE]"]}],"type":{"typehash":"3278273460"},"place":[1938,10,1938,25]},"place":[1940,18,1940,19,"making type from var-decl S"]},"2209491690":{"tag":"functiontype","domain":{"typehash":"4092517361"},"range":{"typehash":"2614391051"}},"1251891764":{"tag":"functiontype","domain":{"typehash":"1466233750"},"range":{"typehash":"2614391051"}},"3504433184":{"tag":"tupletype","types":[{"typehash":"1175884576","typehash":"1152663522"}]}}}}