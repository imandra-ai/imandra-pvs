{"tag":"module-with-hash","module":{"tag":"theory","id":"BitvectorTwoComplementDivisionWidenNarrow","formals":[{"tag":"formal-const-decl","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}],"assuming":[{"tag":"formula-decl","id":"N_size","label":"assumption","definition":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":2}]}},"proof":[]}],"declarations":[{"tag":"formula-decl","id":"IMP_BitvectorTwoComplementDivision_TCC1","label":"obligation","definition":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":2}]}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\") ((\"\" (propax) nil nil)) nil)","status":"unchecked"}},{"tag":"importing","theory-name":["ppJsonMl*",["theoryName","imp"]]},{"tag":"formula-decl","id":"IMP_BitvectorTwoComplementDivision_TCC2","label":"obligation","definition":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}},{"tag":"integer","integer-value":2}]}},"proof":{"tag":"proof-info","script":"(\"\" (assuming-tcc) nil nil)","status":"unchecked"}},{"tag":"importing","theory-name":["ppJsonMl*",["theoryName","imp"]]},{"tag":"var-decl","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"var-decl","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"var-decl","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"var-decl","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"var-decl","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"var-decl","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"formula-decl","id":"DIVREM_eq","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}],"type":{"typehash":"86f8e00f94a81b8b2a4c3e9affb8534402002cb9"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"bv_arith_nat_defs","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"8da49496cee00b175fc98151b2b424be2d999210"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","theory":"BitvectorMultiplication","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/","theory":"BitvectorTwoComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"\/\/","theory":"BitvectorTwoComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}}]}},{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (skolem!)\n ((\"\" (expand* \"\/\" \"\/\/\")\n   ((\"\" (reduce)\n     ((\"1\" (use \"DIVREM1_eq[N]\") nil nil)\n      (\"2\" (use \"DIVREM1_eq[N]\")\n       ((\"2\" (rewrite \"times_min_first\")\n         ((\"2\" (rewrite \"times_min_second\" :dir rl) nil nil)) nil))\n       nil)\n      (\"3\" (use \"DIVREM1_eq[N]\")\n       ((\"3\" (rewrite \"times_min_first\")\n         ((\"3\" (rewrite \"bv_neg_distrib[2 * N]\" :dir rl)\n           ((\"3\" (replace -1)\n             ((\"3\" (rewrite \"bv_double_neg[2 * N]\") nil nil)) nil))\n           nil))\n         nil))\n       nil)\n      (\"4\" (use \"DIVREM1_eq[N]\")\n       ((\"4\" (rewrite \"times_min_second\")\n         ((\"4\" (rewrite \"-\" :dir rl)\n           ((\"4\" (lemma \"bv_double_neg[2 * N]\")\n             ((\"4\" (inst - \"rem(-DVD!1, -DVS!1)\")\n               ((\"4\" (replace -1 -2 rl)\n                 ((\"4\" (hide -1)\n                   ((\"4\" (rewrite \"bv_neg_distrib\" :dir rl)\n                     ((\"4\" (lemma \"bv_double_neg[2 * N]\")\n                       ((\"4\" (inst - \"DVD!1\")\n                         ((\"4\" (replace -2 -1 rl)\n                           ((\"4\" (rewrite \"bv_double_neg[2 * N]\")\n                             ((\"4\" (assert) nil nil)) nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"divrem_widens_TCC1","label":"obligation","definition":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}},{"tag":"integer","integer-value":0}]}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"divrem_widens","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"f0e449ce6955458c18f72ec15d05e245a9a7df4a"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":-1}]}}]}}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}],"type":{"typehash":"86f8e00f94a81b8b2a4c3e9affb8534402002cb9"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/","theory":"BitvectorTwoComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"widen","theory":"BitvectorUtil","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"ea1f6068e882ec930222ff53533382a15951f2e6"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"widen","theory":"BitvectorUtil","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"ea1f6068e882ec930222ff53533382a15951f2e6"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"widen","theory":"BitvectorUtil","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"ea1f6068e882ec930222ff53533382a15951f2e6"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/","theory":"BitvectorTwoComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}],"type":{"typehash":"86f8e00f94a81b8b2a4c3e9affb8534402002cb9"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/\/","theory":"BitvectorTwoComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"widen","theory":"BitvectorUtil","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"ea1f6068e882ec930222ff53533382a15951f2e6"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"widen","theory":"BitvectorUtil","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"ea1f6068e882ec930222ff53533382a15951f2e6"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"widen","theory":"BitvectorUtil","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"ea1f6068e882ec930222ff53533382a15951f2e6"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/\/","theory":"BitvectorTwoComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}}]}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skosimp)\n   ((\"\" (case \"bv2int(dvs!1) = 0\")\n     ((\"1\" (hide 1)\n       ((\"1\" (expand \"bv2int\")\n         ((\"1\" (lift-if)\n           ((\"1\" (split)\n             ((\"1\" (flatten)\n               ((\"1\" (assert)\n                 ((\"1\" (forward-chain \"bv2nat_eq0[N]\")\n                   ((\"1\" (replace -1)\n                     ((\"1\"\n                       (case-replace\n                        \"widen(fill[N](FALSE)) = fill[2 * N](FALSE)\")\n                       ((\"1\" (expand* \"\/\" \"\/\/\")\n                         ((\"1\" (assert)\n                           ((\"1\" (rewrite \"bv2int_fill_F\")\n                             ((\"1\" (rewrite \"bv2int_fill_F[N]\")\n                               ((\"1\"\n                                 (assert)\n                                 ((\"1\"\n                                   (rewrite \"bv2int_widen\")\n                                   ((\"1\"\n                                     (rewrite \"div1_dvs0[2 * N]\")\n                                     ((\"1\"\n                                       (rewrite \"div1_dvs0[N]\")\n                                       ((\"1\"\n                                         (rewrite \"div1_dvs0[2 * N]\")\n                                         ((\"1\"\n                                           (rewrite \"rem1_dvs0[N]\")\n                                           ((\"1\"\n                                             (rewrite\n                                              \"rem1_dvs0[2 * N]\")\n                                             ((\"1\"\n                                               (rewrite\n                                                \"rem1_dvs0[2 * N]\")\n                                               ((\"1\"\n                                                 (lift-if)\n                                                 ((\"1\"\n                                                   (split)\n                                                   ((\"1\"\n                                                     (flatten)\n                                                     ((\"1\"\n                                                       (hide-all-but 1)\n                                                       ((\"1\"\n                                                         (assert)\n                                                         ((\"1\"\n                                                           (grind-with-ext)\n                                                           nil\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil)\n                                                    (\"2\"\n                                                     (flatten)\n                                                     ((\"2\"\n                                                       (rewrite\n                                                        \"div1_dvs0[N]\")\n                                                       ((\"2\"\n                                                         (rewrite\n                                                          \"rem1_dvs0[N]\")\n                                                         ((\"2\"\n                                                           (split)\n                                                           ((\"1\"\n                                                             (hide-all-but\n                                                              1)\n                                                             ((\"1\"\n                                                               (case\n                                                                \"bv2int[2 * N](-fill[2 * N](TRUE)) = bv2int[2 * N](widen(-fill[N](TRUE)))\")\n                                                               ((\"1\"\n                                                                 (rewrite\n                                                                  \"bv2int_inj\")\n                                                                 nil\n                                                                 nil)\n                                                                (\"2\"\n                                                                 (hide\n                                                                  2)\n                                                                 ((\"2\"\n                                                                   (rewrite\n                                                                    \"bv2int_widen\")\n                                                                   ((\"2\"\n                                                                     (rewrite\n                                                                      \"bv2int_neg[N]\")\n                                                                     ((\"2\"\n                                                                       (rewrite\n                                                                        \"bv2int_neg[2 * N]\")\n                                                                       ((\"2\"\n                                                                         (rewrite\n                                                                          \"bv2int_fill_T[2 * N]\")\n                                                                         ((\"2\"\n                                                                           (rewrite\n                                                                            \"bv2int_fill_T[N]\")\n                                                                           ((\"2\"\n                                                                             (expand\n                                                                              \"minint\")\n                                                                             ((\"2\"\n                                                                               (lift-if)\n                                                                               ((\"2\"\n                                                                                 (ground)\n                                                                                 nil\n                                                                                 nil))\n                                                                               nil))\n                                                                             nil))\n                                                                           nil))\n                                                                         nil))\n                                                                       nil))\n                                                                     nil))\n                                                                   nil))\n                                                                 nil))\n                                                               nil))\n                                                             nil)\n                                                            (\"2\"\n                                                             (rewrite\n                                                              \"bv_double_neg[2 * N]\")\n                                                             ((\"2\"\n                                                               (rewrite\n                                                                \"bv_double_neg[N]\")\n                                                               nil\n                                                               nil))\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil)\n                        (\"2\" (hide-all-but 1)\n                         ((\"2\" (grind-with-ext) nil nil)) nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil)\n              (\"2\" (flatten) ((\"2\" (assert) nil nil)) nil))\n             nil))\n           nil))\n         nil))\n       nil)\n      (\"2\" (lemma \"divrem_uniqueness[2 * N]\")\n       ((\"2\"\n         (inst - \"widen(dvd!1)\" \"widen(dvs!1)\"\n          \"bv2int(widen(dvd!1 \/ dvs!1))\"\n          \"bv2int(widen(dvd!1 \/\/ dvs!1))\")\n         ((\"2\" (split)\n           ((\"1\" (flatten)\n             ((\"1\" (rewrite \"bv2int_inj\")\n               ((\"1\" (rewrite \"bv2int_inj\") nil nil)) nil))\n             nil)\n            (\"2\" (rewrite \"bv2int_widen\")\n             ((\"2\" (rewrite \"bv2int_widen\")\n               ((\"2\" (flatten)\n                 ((\"2\" (assert)\n                   ((\"2\" (typepred \"bv2int[N](dvd!1)\")\n                     ((\"2\" (expand* \"minint\" \"maxint\")\n                       ((\"2\" (lemma \"exp2_lt\")\n                         ((\"2\" (inst - \"2 * N - 1\" \"N - 1\")\n                           ((\"2\" (assert) nil nil)) nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil)\n            (\"3\" (rewrite \"bv2int_widen\") ((\"3\" (assert) nil nil)) nil)\n            (\"4\" (rewrite \"bv2int_widen\")\n             ((\"4\" (rewrite \"bv2int_widen\")\n               ((\"4\" (rewrite \"bv2int_widen\")\n                 ((\"4\" (use \"div_sgn[N]\") ((\"4\" (ground) nil nil))\n                   nil))\n                 nil))\n               nil))\n             nil)\n            (\"5\" (rewrite \"bv2int_widen\")\n             ((\"5\" (rewrite \"bv2int_widen\")\n               ((\"5\" (rewrite \"bv2int_widen\")\n                 ((\"5\" (use \"div_sgn[N]\") ((\"5\" (ground) nil nil))\n                   nil))\n                 nil))\n               nil))\n             nil)\n            (\"6\" (rewrite \"bv2int_widen\")\n             ((\"6\" (rewrite \"bv2int_widen\")\n               ((\"6\" (rewrite \"bv2int_widen\")\n                 ((\"6\" (use \"div_sgn[N]\") ((\"6\" (ground) nil nil))\n                   nil))\n                 nil))\n               nil))\n             nil)\n            (\"7\" (rewrite \"bv2int_widen\")\n             ((\"7\" (rewrite \"bv2int_widen\")\n               ((\"7\" (use \"rem_sgn[N]\")\n                 ((\"7\" (flatten) ((\"7\" (assert) nil nil)) nil)) nil))\n               nil))\n             nil)\n            (\"8\" (rewrite \"bv2int_widen\")\n             ((\"8\" (rewrite \"bv2int_widen\")\n               ((\"8\" (use \"rem_sgn[N]\")\n                 ((\"8\" (flatten) ((\"8\" (assert) nil nil)) nil)) nil))\n               nil))\n             nil)\n            (\"9\" (rewrite \"bv2int_widen\")\n             ((\"9\" (rewrite \"bv2int_widen\")\n               ((\"9\" (use \"rem_below_dvs[N]\") ((\"9\" (assert) nil nil))\n                 nil))\n               nil))\n             nil)\n            (\"10\" (rewrite \"bv2int_widen\")\n             ((\"10\" (rewrite \"bv2int_widen\")\n               ((\"10\" (rewrite \"bv2int_widen\")\n                 ((\"10\" (rewrite \"bv2int_widen\")\n                   ((\"10\" (use \"divrem_eq[N]\")\n                     ((\"10\" (assert) nil nil)) nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"div_cancel_TCC1","label":"obligation","definition":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}},{"tag":"integer","integer-value":1}]}},{"tag":"integer","integer-value":0}]}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"div_cancel","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"f0e449ce6955458c18f72ec15d05e245a9a7df4a"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}},{"tag":"integer","integer-value":1}]}}}},{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"865360e443c39643dae0ec6087375cc448db974b"}},"argument":{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"865360e443c39643dae0ec6087375cc448db974b"}},"argument":{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"865360e443c39643dae0ec6087375cc448db974b"}},"argument":{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"865360e443c39643dae0ec6087375cc448db974b"}},"argument":{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}},{"tag":"integer","integer-value":1}]}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"f0e449ce6955458c18f72ec15d05e245a9a7df4a"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}},{"tag":"integer","integer-value":1}]}}}},{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"865360e443c39643dae0ec6087375cc448db974b"}},"argument":{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"865360e443c39643dae0ec6087375cc448db974b"}},"argument":{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"865360e443c39643dae0ec6087375cc448db974b"}},"argument":{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"865360e443c39643dae0ec6087375cc448db974b"}},"argument":{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}},{"tag":"integer","integer-value":1}]}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/=","library":"pvs:prelude","theory":"notequal","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"865360e443c39643dae0ec6087375cc448db974b"}},"argument":{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/=","library":"pvs:prelude","theory":"notequal","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"865360e443c39643dae0ec6087375cc448db974b"}},"argument":{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"865360e443c39643dae0ec6087375cc448db974b"}},"argument":{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"f0e449ce6955458c18f72ec15d05e245a9a7df4a"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}},{"tag":"integer","integer-value":1}]}}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"865360e443c39643dae0ec6087375cc448db974b"}},"argument":{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}},{"tag":"integer","integer-value":-1}]}}]}}}]}}]}}]}}]}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}],"type":{"typehash":"86f8e00f94a81b8b2a4c3e9affb8534402002cb9"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/","theory":"BitvectorTwoComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","theory":"BitvectorMultiplication","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"*","theory":"BitvectorMultiplication","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"\/","theory":"BitvectorTwoComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}],"type":{"typehash":"86f8e00f94a81b8b2a4c3e9affb8534402002cb9"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/\/","theory":"BitvectorTwoComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","theory":"BitvectorMultiplication","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"*","theory":"BitvectorMultiplication","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"*","theory":"BitvectorMultiplication","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"apply","operator":{"tag":"constant","id":"\/\/","theory":"BitvectorTwoComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}}]}}]}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skosimp)\n   ((\"\"\n     (case \"bv2int[2*N]((BV!1 * DVD!1) \/ (BV!1 * DVS!1)) = bv2int[2*N](DVD!1 \/ DVS!1) AND bv2int[2*N]((BV!1 * DVD!1) \/\/ (BV!1 * DVS!1)) = bv2int[2*N](BV!1 * (DVD!1 \/\/ DVS!1))\")\n     ((\"1\" (flatten)\n       ((\"1\" (rewrite \"bv2int_inj\")\n         ((\"1\" (rewrite \"bv2int_inj\") nil nil)) nil))\n       nil)\n      (\"2\" (hide 5)\n       ((\"2\"\n         (case \"-exp2(2 * N - 1) < bv2int(BV!1) * bv2int(DVD!1 \/\/ DVS!1) AND bv2int(BV!1) * bv2int(DVD!1 \/\/ DVS!1) < exp2(2 * N - 1)\")\n         ((\"1\" (lemma \"divrem_uniqueness[2 * N]\")\n           ((\"1\"\n             (inst - \"BV!1 * DVD!1\" \"BV!1 * DVS!1\"\n              \"bv2int(DVD!1\/DVS!1)\"\n              \"bv2int(BV!1) * bv2int(DVD!1\/\/DVS!1)\")\n             ((\"1\" (assert)\n               ((\"1\" (rewrite \"bv2int_times\")\n                 ((\"1\" (rewrite \"bv2int_times\")\n                   ((\"1\" (rewrite \"bv2int_times\")\n                     ((\"1\" (split)\n                       ((\"1\" (flatten) ((\"1\" (assert) nil nil)) nil)\n                        (\"2\" (flatten) ((\"2\" (assert) nil nil)) nil)\n                        (\"3\" (flatten) ((\"3\" (assert) nil nil)) nil)\n                        (\"4\" (flatten)\n                         ((\"4\" (assert)\n                           ((\"4\" (use \"div_sgn[2 * N]\")\n                             ((\"4\" (assert)\n                               ((\"4\"\n                                 (replace*)\n                                 ((\"4\"\n                                   (flatten)\n                                   ((\"4\"\n                                     (assert)\n                                     ((\"4\"\n                                       (rewrite \"neg_times_lt\")\n                                       ((\"4\"\n                                         (rewrite \"pos_times_gt\")\n                                         ((\"4\"\n                                           (replace*)\n                                           ((\"4\"\n                                             (iff)\n                                             ((\"4\"\n                                               (split +)\n                                               ((\"1\"\n                                                 (flatten)\n                                                 ((\"1\"\n                                                   (split -)\n                                                   ((\"1\"\n                                                     (flatten)\n                                                     ((\"1\"\n                                                       (assert)\n                                                       ((\"1\"\n                                                         (split +)\n                                                         ((\"1\"\n                                                           (assert)\n                                                           ((\"1\"\n                                                             (rewrite\n                                                              \"both_sides_times_pos_ge2\")\n                                                             nil\n                                                             nil))\n                                                           nil)\n                                                          (\"2\"\n                                                           (assert)\n                                                           ((\"2\"\n                                                             (rewrite\n                                                              \"both_sides_times_neg_le2\")\n                                                             nil\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil)\n                                                    (\"2\"\n                                                     (flatten)\n                                                     ((\"2\"\n                                                       (assert)\n                                                       ((\"2\"\n                                                         (split +)\n                                                         ((\"1\"\n                                                           (assert)\n                                                           ((\"1\"\n                                                             (rewrite\n                                                              \"both_sides_times_neg_ge2\")\n                                                             nil\n                                                             nil))\n                                                           nil)\n                                                          (\"2\"\n                                                           (assert)\n                                                           ((\"2\"\n                                                             (rewrite\n                                                              \"both_sides_times_pos_le2\")\n                                                             nil\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil)\n                                                (\"2\"\n                                                 (flatten)\n                                                 ((\"2\"\n                                                   (split)\n                                                   ((\"1\"\n                                                     (flatten)\n                                                     ((\"1\"\n                                                       (assert)\n                                                       ((\"1\"\n                                                         (split)\n                                                         ((\"1\"\n                                                           (flatten)\n                                                           ((\"1\"\n                                                             (assert)\n                                                             ((\"1\"\n                                                               (rewrite\n                                                                \"both_sides_times_neg_ge2\")\n                                                               nil\n                                                               nil))\n                                                             nil))\n                                                           nil)\n                                                          (\"2\"\n                                                           (flatten)\n                                                           ((\"2\"\n                                                             (assert)\n                                                             ((\"2\"\n                                                               (rewrite\n                                                                \"both_sides_times_pos_ge2\")\n                                                               nil\n                                                               nil))\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil)\n                                                    (\"2\"\n                                                     (flatten)\n                                                     ((\"2\"\n                                                       (split)\n                                                       ((\"1\"\n                                                         (flatten)\n                                                         ((\"1\"\n                                                           (assert)\n                                                           ((\"1\"\n                                                             (rewrite\n                                                              \"both_sides_times_pos_le2\")\n                                                             nil\n                                                             nil))\n                                                           nil))\n                                                         nil)\n                                                        (\"2\"\n                                                         (flatten)\n                                                         ((\"2\"\n                                                           (assert)\n                                                           ((\"2\"\n                                                             (rewrite\n                                                              \"both_sides_times_neg_le2\")\n                                                             nil\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil)\n                        (\"5\" (flatten)\n                         ((\"5\" (assert)\n                           ((\"5\" (use \"div_sgn[2 * N]\")\n                             ((\"5\" (replace*)\n                               ((\"5\"\n                                 (assert)\n                                 ((\"5\"\n                                   (flatten)\n                                   ((\"5\"\n                                     (assert)\n                                     ((\"5\"\n                                       (rewrite \"abs_mult\")\n                                       ((\"5\"\n                                         (rewrite \"abs_mult\")\n                                         ((\"5\"\n                                           (replace*)\n                                           ((\"5\"\n                                             (hide -1 -2 -3 2)\n                                             ((\"5\"\n                                               (iff)\n                                               ((\"5\"\n                                                 (lemma\n                                                  \"both_sides_times_pos_lt2\")\n                                                 ((\"5\"\n                                                   (inst\n                                                    -\n                                                    \"abs(bv2int(BV!1))\"\n                                                    \"abs(bv2int(DVD!1))\"\n                                                    \"abs(bv2int(DVS!1))\")\n                                                   ((\"5\"\n                                                     (reduce)\n                                                     nil\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil)\n                        (\"6\" (flatten)\n                         ((\"6\" (assert)\n                           ((\"6\" (use \"div_sgn[2 * N]\")\n                             ((\"6\" (replace*)\n                               ((\"6\"\n                                 (assert)\n                                 ((\"6\"\n                                   (flatten)\n                                   ((\"6\"\n                                     (replace*)\n                                     ((\"6\"\n                                       (rewrite \"pos_times_gt\")\n                                       ((\"6\"\n                                         (rewrite \"neg_times_lt\")\n                                         ((\"6\"\n                                           (assert)\n                                           ((\"6\"\n                                             (iff)\n                                             ((\"6\"\n                                               (split +)\n                                               ((\"1\"\n                                                 (flatten)\n                                                 ((\"1\"\n                                                   (split)\n                                                   ((\"1\"\n                                                     (flatten)\n                                                     ((\"1\"\n                                                       (assert)\n                                                       ((\"1\"\n                                                         (split +)\n                                                         ((\"1\"\n                                                           (assert)\n                                                           ((\"1\"\n                                                             (lemma\n                                                              \"both_sides_times_pos_ge2\")\n                                                             ((\"1\"\n                                                               (inst\n                                                                -\n                                                                \"bv2int(BV!1)\"\n                                                                \"bv2int(DVD!1)\"\n                                                                \"-bv2int(DVS!1)\")\n                                                               ((\"1\"\n                                                                 (assert)\n                                                                 nil\n                                                                 nil))\n                                                               nil))\n                                                             nil))\n                                                           nil)\n                                                          (\"2\"\n                                                           (assert)\n                                                           ((\"2\"\n                                                             (lemma\n                                                              \"both_sides_times_neg_ge2\")\n                                                             ((\"2\"\n                                                               (inst\n                                                                -\n                                                                \"bv2int(BV!1)\"\n                                                                \"bv2int(DVD!1)\"\n                                                                \"-bv2int(DVS!1)\")\n                                                               ((\"2\"\n                                                                 (assert)\n                                                                 nil\n                                                                 nil))\n                                                               nil))\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil)\n                                                    (\"2\"\n                                                     (flatten)\n                                                     ((\"2\"\n                                                       (assert)\n                                                       ((\"2\"\n                                                         (split +)\n                                                         ((\"1\"\n                                                           (assert)\n                                                           ((\"1\"\n                                                             (lemma\n                                                              \"both_sides_times_neg_ge2\")\n                                                             ((\"1\"\n                                                               (inst\n                                                                -\n                                                                \"bv2int(BV!1)\"\n                                                                \"bv2int(DVD!1)\"\n                                                                \"-bv2int(DVS!1)\")\n                                                               ((\"1\"\n                                                                 (assert)\n                                                                 nil\n                                                                 nil))\n                                                               nil))\n                                                             nil))\n                                                           nil)\n                                                          (\"2\"\n                                                           (assert)\n                                                           ((\"2\"\n                                                             (lemma\n                                                              \"both_sides_times_pos_ge2\")\n                                                             ((\"2\"\n                                                               (inst\n                                                                -\n                                                                \"bv2int(BV!1)\"\n                                                                \"bv2int(DVD!1)\"\n                                                                \"-bv2int(DVS!1)\")\n                                                               ((\"2\"\n                                                                 (assert)\n                                                                 nil\n                                                                 nil))\n                                                               nil))\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil)\n                                                (\"2\"\n                                                 (flatten)\n                                                 ((\"2\"\n                                                   (split)\n                                                   ((\"1\"\n                                                     (flatten)\n                                                     ((\"1\"\n                                                       (assert)\n                                                       ((\"1\"\n                                                         (split)\n                                                         ((\"1\"\n                                                           (flatten)\n                                                           ((\"1\"\n                                                             (assert)\n                                                             ((\"1\"\n                                                               (lemma\n                                                                \"both_sides_times_pos_ge2\")\n                                                               ((\"1\"\n                                                                 (inst\n                                                                  -\n                                                                  \"bv2int(BV!1)\"\n                                                                  \"bv2int(DVD!1)\"\n                                                                  \"-bv2int(DVS!1)\")\n                                                                 ((\"1\"\n                                                                   (assert)\n                                                                   nil\n                                                                   nil))\n                                                                 nil))\n                                                               nil))\n                                                             nil))\n                                                           nil)\n                                                          (\"2\"\n                                                           (flatten)\n                                                           ((\"2\"\n                                                             (assert)\n                                                             ((\"2\"\n                                                               (lemma\n                                                                \"both_sides_times_neg_ge2\")\n                                                               ((\"2\"\n                                                                 (inst\n                                                                  -\n                                                                  \"bv2int(BV!1)\"\n                                                                  \"bv2int(DVD!1)\"\n                                                                  \"-bv2int(DVS!1)\")\n                                                                 ((\"2\"\n                                                                   (assert)\n                                                                   nil\n                                                                   nil))\n                                                                 nil))\n                                                               nil))\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil)\n                                                    (\"2\"\n                                                     (flatten)\n                                                     ((\"2\"\n                                                       (assert)\n                                                       ((\"2\"\n                                                         (split)\n                                                         ((\"1\"\n                                                           (flatten)\n                                                           ((\"1\"\n                                                             (assert)\n                                                             ((\"1\"\n                                                               (lemma\n                                                                \"both_sides_times_neg_le2\")\n                                                               ((\"1\"\n                                                                 (inst\n                                                                  -\n                                                                  \"bv2int(BV!1)\"\n                                                                  \"bv2int(DVD!1)\"\n                                                                  \"-bv2int(DVS!1)\")\n                                                                 ((\"1\"\n                                                                   (assert)\n                                                                   nil\n                                                                   nil))\n                                                                 nil))\n                                                               nil))\n                                                             nil))\n                                                           nil)\n                                                          (\"2\"\n                                                           (flatten)\n                                                           ((\"2\"\n                                                             (assert)\n                                                             ((\"2\"\n                                                               (lemma\n                                                                \"both_sides_times_pos_le2\")\n                                                               ((\"2\"\n                                                                 (inst\n                                                                  -\n                                                                  \"bv2int(BV!1)\"\n                                                                  \"bv2int(DVD!1)\"\n                                                                  \"-bv2int(DVS!1)\")\n                                                                 ((\"2\"\n                                                                   (assert)\n                                                                   nil\n                                                                   nil))\n                                                                 nil))\n                                                               nil))\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil)\n                        (\"7\" (use \"rem_sgn[2 * N]\")\n                         ((\"7\" (flatten)\n                           ((\"7\" (assert)\n                             ((\"7\" (rewrite \"pos_times_ge\")\n                               ((\"7\"\n                                 (rewrite \"pos_times_gt\")\n                                 ((\"7\" (reduce) nil nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil)\n                        (\"8\" (flatten)\n                         ((\"8\" (use \"rem_sgn[2 * N]\")\n                           ((\"8\" (rewrite \"neg_times_lt\")\n                             ((\"8\" (rewrite \"neg_times_le\")\n                               ((\"8\" (reduce) nil nil)) nil))\n                             nil))\n                           nil))\n                         nil)\n                        (\"9\" (rewrite \"abs_mult\")\n                         ((\"9\" (rewrite \"abs_mult\")\n                           ((\"9\" (use \"rem_below_dvs[2 * N]\")\n                             ((\"9\" (assert)\n                               ((\"9\"\n                                 (rewrite \"both_sides_times_pos_lt2\")\n                                 nil\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil)\n                        (\"10\" (use \"divrem_eq[2 * N]\")\n                         ((\"10\" (ground) nil nil)) nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil)\n          (\"2\" (hide 2)\n           ((\"2\" (use \"rem_below_dvs[2 * N]\")\n             ((\"2\" (assert)\n               ((\"2\" (expand \"abs\")\n                 ((\"2\" (case \"bv2int(BV!1) > 0\")\n                   ((\"1\" (assert)\n                     ((\"1\" (case \"bv2int(DVS!1) > 0\")\n                       ((\"1\" (assert)\n                         ((\"1\" (lift-if)\n                           ((\"1\" (split)\n                             ((\"1\" (flatten)\n                               ((\"1\"\n                                 (assert)\n                                 ((\"1\"\n                                   (lemma \"both_sides_times_pos_lt2\")\n                                   ((\"1\"\n                                     (inst\n                                      -\n                                      \"bv2int(BV!1)\"\n                                      \"bv2int(DVD!1 \/\/ DVS!1)\"\n                                      \"bv2int(DVS!1)\")\n                                     ((\"1\"\n                                       (assert)\n                                       ((\"1\"\n                                         (lemma\n                                          \"both_sides_times_pos_gt2\")\n                                         ((\"1\"\n                                           (inst\n                                            -\n                                            \"bv2int(BV!1)\"\n                                            \"bv2int(DVS!1)\"\n                                            \"-bv2int(DVD!1 \/\/ DVS!1)\")\n                                           ((\"1\" (assert) nil nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil)\n                              (\"2\" (flatten)\n                               ((\"2\"\n                                 (assert)\n                                 ((\"2\"\n                                   (lemma \"both_sides_times_pos_gt2\")\n                                   ((\"2\"\n                                     (inst\n                                      -\n                                      \"bv2int(BV!1)\"\n                                      \"bv2int(DVD!1 \/\/ DVS!1)\"\n                                      \"bv2int(DVS!1)\")\n                                     ((\"2\"\n                                       (assert)\n                                       ((\"2\"\n                                         (case\n                                          \"bv2int(BV!1) * bv2int(DVD!1 \/\/ DVS!1) >= 0\")\n                                         ((\"1\" (assert) nil nil)\n                                          (\"2\"\n                                           (rewrite \"pos_times_ge\")\n                                           nil\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil)\n                        (\"2\" (assert)\n                         ((\"2\" (lift-if)\n                           ((\"2\" (split)\n                             ((\"1\" (flatten)\n                               ((\"1\"\n                                 (assert)\n                                 ((\"1\"\n                                   (lemma \"both_sides_times_pos_lt2\")\n                                   ((\"1\"\n                                     (inst\n                                      -\n                                      \"bv2int(BV!1)\"\n                                      \"bv2int(DVD!1 \/\/ DVS!1)\"\n                                      \"bv2int(DVS!1)\")\n                                     ((\"1\"\n                                       (assert)\n                                       ((\"1\"\n                                         (case\n                                          \" bv2int(BV!1) * bv2int(DVD!1 \/\/ DVS!1) <= 0\")\n                                         ((\"1\" (assert) nil nil)\n                                          (\"2\"\n                                           (rewrite \"neg_times_le\")\n                                           nil\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil)\n                              (\"2\" (flatten)\n                               ((\"2\"\n                                 (assert)\n                                 ((\"2\"\n                                   (lemma \"both_sides_times_pos_lt2\")\n                                   ((\"2\"\n                                     (inst\n                                      -\n                                      \"bv2int(BV!1)\"\n                                      \"bv2int(DVD!1\/\/DVS!1)\"\n                                      \"bv2int(DVS!1)\")\n                                     ((\"2\"\n                                       (assert)\n                                       ((\"2\"\n                                         (lemma\n                                          \"both_sides_times_pos_lt2\")\n                                         ((\"2\"\n                                           (inst\n                                            -\n                                            \"bv2int(BV!1)\"\n                                            \"bv2int(DVD!1 \/\/ DVS!1)\"\n                                            \"-bv2int(DVS!1)\")\n                                           ((\"2\" (assert) nil nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil)\n                    (\"2\" (assert)\n                     ((\"2\" (case \"bv2int(DVS!1) > 0\")\n                       ((\"1\" (assert)\n                         ((\"1\" (lift-if)\n                           ((\"1\" (split)\n                             ((\"1\" (flatten)\n                               ((\"1\"\n                                 (assert)\n                                 ((\"1\"\n                                   (lemma \"both_sides_times_neg_lt2\")\n                                   ((\"1\"\n                                     (inst\n                                      -\n                                      \"bv2int(BV!1)\"\n                                      \"-bv2int(DVD!1 \/\/ DVS!1)\"\n                                      \"bv2int(DVS!1)\")\n                                     ((\"1\"\n                                       (assert)\n                                       ((\"1\"\n                                         (case\n                                          \"bv2int(BV!1) * bv2int(DVD!1 \/\/ DVS!1) >= 0\")\n                                         ((\"1\" (assert) nil nil)\n                                          (\"2\"\n                                           (rewrite \"pos_times_ge\")\n                                           nil\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil)\n                              (\"2\" (flatten)\n                               ((\"2\"\n                                 (assert)\n                                 ((\"2\"\n                                   (lemma \"both_sides_times_neg_lt2\")\n                                   ((\"2\"\n                                     (inst\n                                      -\n                                      \"bv2int(BV!1)\"\n                                      \"bv2int(DVD!1 \/\/ DVS!1)\"\n                                      \"bv2int(DVS!1)\")\n                                     ((\"2\"\n                                       (assert)\n                                       ((\"2\"\n                                         (case\n                                          \"bv2int(BV!1) * bv2int(DVD!1 \/\/ DVS!1) <= 0\")\n                                         ((\"1\" (assert) nil nil)\n                                          (\"2\"\n                                           (rewrite \"neg_times_le\")\n                                           nil\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil)\n                        (\"2\" (assert)\n                         ((\"2\" (lift-if)\n                           ((\"2\" (split)\n                             ((\"1\" (flatten)\n                               ((\"1\"\n                                 (lemma \"both_sides_times_neg_lt2\")\n                                 ((\"1\"\n                                   (inst\n                                    -\n                                    \"bv2int(BV!1)\"\n                                    \"bv2int(DVD!1 \/\/ DVS!1)\"\n                                    \"bv2int(DVS!1)\")\n                                   ((\"1\"\n                                     (assert)\n                                     ((\"1\"\n                                       (case\n                                        \"bv2int(BV!1) * bv2int(DVD!1 \/\/ DVS!1) >= 0\")\n                                       ((\"1\" (assert) nil nil)\n                                        (\"2\"\n                                         (rewrite \"pos_times_ge\")\n                                         nil\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil)\n                              (\"2\" (flatten)\n                               ((\"2\"\n                                 (assert)\n                                 ((\"2\"\n                                   (lemma \"both_sides_times_neg_lt2\")\n                                   ((\"2\"\n                                     (inst\n                                      -\n                                      \"bv2int(BV!1)\"\n                                      \"bv2int(DVD!1 \/\/ DVS!1)\"\n                                      \"-bv2int(DVS!1)\")\n                                     ((\"2\"\n                                       (assert)\n                                       ((\"2\"\n                                         (case\n                                          \"bv2int(BV!1) * bv2int(DVD!1 \/\/ DVS!1) <= 0\")\n                                         ((\"1\" (assert) nil nil)\n                                          (\"2\"\n                                           (rewrite \"neg_times_le\")\n                                           nil\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil)\n          (\"3\" (assert) nil nil) (\"4\" (assert) nil nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}}]},"type-hash":{"tag":"typelist","entries":{"d46e1652b5c3501e071bb1a40d5756226051e200":{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}}},"print-type":[{"tag":"type-application","type":[{"tag":"typename","id":"below","library":"pvs:prelude","theory":"naturalnumbers","actuals":[]}],"parameters":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}]},"120f814405b86d927919a8e6aaf145e82ed7a16c":{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":">","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":0}]}}},"print-type":[{"tag":"typename","id":"posnat","library":"pvs:prelude","theory":"integers","actuals":[]}]},"146a37095d79b99006383a517eb8738d36d01122":{"tag":"functiontype","domain":{"typehash":"11c15fe18e476f962d4d8a6529ffdee55c710026"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"255fc968a29595c401e05c55e3263dd5e336ff42":{"tag":"tupletype","types":[{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"},{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}]},"717a9c25eb892eba350c91b4c9080187b6bc2aa4":{"tag":"subtype","supertype":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"},"predicate":{"tag":"constant","id":"rational_pred","library":"pvs:prelude","theory":"rationals","type":{"typehash":"5f72d24643ab14e4b255c8b1ac6dd982887152d4"}},"print-type":[{"tag":"typename","id":"rational","library":"pvs:prelude","theory":"rationals","actuals":[]}]},"87d274baeb32650e8d07e49288fd20e8eda69103":{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},"8da49496cee00b175fc98151b2b424be2d999210":{"tag":"dependent-functiontype","domain":{"tag":"dep-binding","id":"d","type":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"}},"range":[{"tag":"subtype","supertype":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"bv","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":[{"tag":"functiontype","domain":[{"tag":"tupletype","types":[{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"},{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}]}],"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}]},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":[{"tag":"functiontype","domain":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"range":[{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}}}}]}]},"argument":{"tag":"variable","id":"bv","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}},{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":[{"tag":"functiontype","domain":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"range":[{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}}}}]}]},"argument":{"tag":"project","argument":{"tag":"variable","id":"d","type":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"}},"index":1}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":[{"tag":"functiontype","domain":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"range":[{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}}}}]}]},"argument":{"tag":"project","argument":{"tag":"variable","id":"d","type":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"}},"index":2}}]}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}},"then":{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":[{"tag":"functiontype","domain":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"range":[{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}}}}]}]},"argument":{"tag":"project","argument":{"tag":"variable","id":"d","type":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"}},"index":1}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":[{"tag":"functiontype","domain":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"range":[{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}}}}]}]},"argument":{"tag":"project","argument":{"tag":"variable","id":"d","type":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"}},"index":2}}]}},"else":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":[{"tag":"functiontype","domain":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"range":[{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}}}}]}]},"argument":{"tag":"project","argument":{"tag":"variable","id":"d","type":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"}},"index":1}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":[{"tag":"functiontype","domain":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"range":[{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}}}}]}]},"argument":{"tag":"project","argument":{"tag":"variable","id":"d","type":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"}},"index":2}}]}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}}}]}}}}]},"f9dfc0c5daed68d735ec591f7efd16ec22075ef8":{"tag":"functiontype","domain":{"typehash":"e82fb70ca2174d284e3c0dc69979ae0796a1bdf1"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"d288fd11ae1e75ed5502a350466c5a64f3c1f435":{"tag":"typename","id":"number","library":"pvs:prelude","theory":"numbers","actuals":[]},"34012ce34c4ce7e8874dfceb61781aace60c5d79":{"tag":"functiontype","domain":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"ad1dc8ab57d614e9869574f391457e68ed2d335c":{"tag":"functiontype","domain":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"},"range":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},"eea4c410d31f9d4afb5b48e23a617102bdaaa73b":{"tag":"subtype","supertype":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"constant","id":"minint","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"constant","id":"maxint","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}]}}]}}},"print-type":[{"tag":"typename","id":"rng_2s_comp","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}]}]},"112028b13dc40fe67507f4744441b1f75725ea19":{"tag":"functiontype","domain":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"},"print-type":[{"tag":"typename","id":"bvec","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}]}]},"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe":{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}},"print-type":[{"tag":"type-application","type":[{"tag":"typename","id":"below","library":"pvs:prelude","theory":"naturalnumbers","actuals":[]}],"parameters":[{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}]},"f3923c5f8d3927211e5aff1cfbcee01af195158b":{"tag":"tupletype","types":[{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}]},"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03":{"tag":"subtype","supertype":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},"predicate":{"tag":"constant","id":"real_pred","library":"pvs:prelude","theory":"reals","type":{"typehash":"34012ce34c4ce7e8874dfceb61781aace60c5d79"}},"print-type":[{"tag":"typename","id":"real","library":"pvs:prelude","theory":"reals","actuals":[]}]},"5f72d24643ab14e4b255c8b1ac6dd982887152d4":{"tag":"functiontype","domain":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"f4f200a0d337e4a60b30dfe136d073c7265be3e1":{"tag":"subtype","supertype":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"},"predicate":{"tag":"constant","id":"number_field_pred","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"a56a4a9403ce4ae14abf07cdf6b328b8f111f42b"}},"print-type":[{"tag":"typename","id":"number_field","library":"pvs:prelude","theory":"number_fields","actuals":[]}]},"aece8f38c7b6554bf39a6677488f47877026313a":{"tag":"subtype","supertype":{"typehash":"717a9c25eb892eba350c91b4c9080187b6bc2aa4"},"predicate":{"tag":"constant","id":"integer_pred","library":"pvs:prelude","theory":"integers","type":{"typehash":"4e480c5400c53df5b58cca7d1bbe3ee6c2f584cc"}},"print-type":[{"tag":"typename","id":"int","library":"pvs:prelude","theory":"integers","actuals":[]}]},"11c15fe18e476f962d4d8a6529ffdee55c710026":{"tag":"tupletype","types":[{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"},{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}]},"86f8e00f94a81b8b2a4c3e9affb8534402002cb9":{"tag":"functiontype","domain":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"350b58e8264ad023a2d621d5506d89de8beb16e3":{"tag":"functiontype","domain":{"typehash":"39d6637d76121441a824031ab58b03e07adec56e"},"range":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}},"4e480c5400c53df5b58cca7d1bbe3ee6c2f584cc":{"tag":"functiontype","domain":{"typehash":"717a9c25eb892eba350c91b4c9080187b6bc2aa4"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"113360277aaa54127896c188a2f404db570c97dd":{"tag":"tupletype","types":[{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}]},"865360e443c39643dae0ec6087375cc448db974b":{"tag":"functiontype","domain":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"range":{"typehash":"e3a8349fe607adac54c4bead4b1f5e15a8a2e3bf"}},"2d48580ab0bd5f657656b976607e44a52fb03c7d":{"tag":"functiontype","domain":{"typehash":"d46e1652b5c3501e071bb1a40d5756226051e200"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"},"print-type":[{"tag":"typename","id":"bvec","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}]},"556105aee05f526b5c9e6c23e656c7f998fd8fb9":{"tag":"functiontype","domain":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},"range":{"typehash":"eea4c410d31f9d4afb5b48e23a617102bdaaa73b"}},"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9":{"tag":"subtype","supertype":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"integer","integer-value":0}]}}},"print-type":[{"tag":"typename","id":"nonneg_int","library":"pvs:prelude","theory":"integers","actuals":[]}]},"4f19419082f24e96423f3b076548a2c3de11ecd9":{"tag":"typename","id":"boolean","library":"pvs:prelude","theory":"booleans","actuals":[]},"18ac9ba548b6ebb4e044d8d94a129414044cc811":{"tag":"functiontype","domain":{"typehash":"f3923c5f8d3927211e5aff1cfbcee01af195158b"},"range":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"f0e449ce6955458c18f72ec15d05e245a9a7df4a":{"tag":"functiontype","domain":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},"range":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}},"a56a4a9403ce4ae14abf07cdf6b328b8f111f42b":{"tag":"functiontype","domain":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"39d6637d76121441a824031ab58b03e07adec56e":{"tag":"tupletype","types":[{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}]},"ea1f6068e882ec930222ff53533382a15951f2e6":{"tag":"functiontype","domain":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},"range":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},"2dd224b393847a08c08146f380310f3a3e311e59":{"tag":"functiontype","domain":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"e82fb70ca2174d284e3c0dc69979ae0796a1bdf1":{"tag":"tupletype","types":[{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"},{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}]},"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf":{"tag":"functiontype","domain":{"typehash":"255fc968a29595c401e05c55e3263dd5e336ff42"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"e3a8349fe607adac54c4bead4b1f5e15a8a2e3bf":{"tag":"subtype","supertype":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"constant","id":"minint","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"constant","id":"maxint","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}]}}]}}},"print-type":[{"tag":"typename","id":"rng_2s_comp","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivisionWidenNarrow","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}]}}}}