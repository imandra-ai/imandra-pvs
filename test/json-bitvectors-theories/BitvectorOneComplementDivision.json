{"tag":"module-with-hash","module":{"tag":"theory","id":"BitvectorOneComplementDivision","formals":[{"tag":"formal-const-decl","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}],"assuming":[{"tag":"formula-decl","id":"N_size","label":"assumption","definition":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":2}]}},"proof":[]}],"declarations":[{"tag":"importing","theory-name":["ppJsonMl*",["theoryName","imp"]]},{"tag":"formula-decl","id":"IMP_BitvectorMultiplication_TCC1","label":"obligation","definition":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":2}]}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\") ((\"\" (propax) nil nil)) nil)","status":"unchecked"}},{"tag":"importing","theory-name":["ppJsonMl*",["theoryName","imp"]]},{"tag":"var-decl","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"var-decl","id":"bv1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"var-decl","id":"bv2","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"var-decl","id":"bv3","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"var-decl","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"var-decl","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"var-decl","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"var-decl","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"var-decl","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"formula-decl","id":"divrem_TCC1","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":0}]}}},{"tag":"forall","bindings":[{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvd1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"update","expression":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"apply","operator":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":0},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"divrem_TCC2","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":0}]}}},{"tag":"forall","bindings":[{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvd1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"update","expression":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"apply","operator":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":1}]}},{"tag":"integer","integer-value":0}]}}]}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"divrem_TCC3","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":0}]}}},{"tag":"forall","bindings":[{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvd1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"update","expression":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"apply","operator":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":1}]}},{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}]}}]}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"divrem_TCC4","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":0}]}}},{"tag":"forall","bindings":[{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvd1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"update","expression":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"apply","operator":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":1}]}},{"tag":"integer","integer-value":0}]}}]}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (termination-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"divrem_TCC5","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":0}]}}},{"tag":"forall","bindings":[{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvd1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"update","expression":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"apply","operator":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":1}]}},{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}]}}]}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"divrem_TCC6","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":0}]}}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":0},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (termination-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"divrem_TCC7","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":0}]}}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"recursive-func-decl","id":"divrem","theory":"BitvectorOneComplementDivision","type":{"typehash":"bd9210fadab0cfb0d55ce4c42165b0f5af3e01ae"},"parameters":[[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}]],"recursive-def":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":0}]}},"then":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]},"else":{"tag":"let","bindings":[{"tag":"let-binding","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},"expr":{"tag":"update","expression":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"apply","operator":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}}],"body":{"tag":"let","bindings":[{"tag":"let-binding","id":"dvd1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},"expr":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}}],"body":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}},"then":{"tag":"apply","operator":{"tag":"constant","id":"divrem","theory":"BitvectorOneComplementDivision","type":{"typehash":"bd9210fadab0cfb0d55ce4c42165b0f5af3e01ae"}},"argument":{"tag":"tuple","exprs":[{"tag":"update","expression":{"tag":"variable","id":"dvd1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"constant","id":"TRUE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}]},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"bv_arithmetic_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":1}]}}]}},"else":{"tag":"apply","operator":{"tag":"constant","id":"divrem","theory":"BitvectorOneComplementDivision","type":{"typehash":"bd9210fadab0cfb0d55ce4c42165b0f5af3e01ae"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":1}]}}]}}}}}},"measure":{"tag":"lambda","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"variable","id":"n","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}}},{"tag":"const-decl","id":"div","theory":"BitvectorOneComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"},"parameters":[[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]],"const-def":{"tag":"project","argument":{"tag":"apply","operator":{"tag":"constant","id":"divrem","theory":"BitvectorOneComplementDivision","type":{"typehash":"bd9210fadab0cfb0d55ce4c42165b0f5af3e01ae"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"fill","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"30bf94d35b333e4090fb1ff869405e24e5d8e718"}},"argument":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}},"index":1}},{"tag":"const-decl","id":"rem","theory":"BitvectorOneComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"},"parameters":[[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]],"const-def":{"tag":"project","argument":{"tag":"apply","operator":{"tag":"constant","id":"divrem","theory":"BitvectorOneComplementDivision","type":{"typehash":"bd9210fadab0cfb0d55ce4c42165b0f5af3e01ae"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"fill","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"30bf94d35b333e4090fb1ff869405e24e5d8e718"}},"argument":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}},"index":2}},{"tag":"formula-decl","id":"divrem_dvd_TCC1","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"variable","id":"k","type":{"typehash":"35022e4b576c9d45f93989c7f078f89892d44f37"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"k","type":{"typehash":"35022e4b576c9d45f93989c7f078f89892d44f37"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"divrem_dvd_TCC2","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"variable","id":"k","type":{"typehash":"35022e4b576c9d45f93989c7f078f89892d44f37"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"k","type":{"typehash":"35022e4b576c9d45f93989c7f078f89892d44f37"}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"divrem_dvd","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"variable","id":"k","type":{"typehash":"35022e4b576c9d45f93989c7f078f89892d44f37"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}],"type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"project","argument":{"tag":"apply","operator":{"tag":"constant","id":"divrem","theory":"BitvectorOneComplementDivision","type":{"typehash":"bd9210fadab0cfb0d55ce4c42165b0f5af3e01ae"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},"index":1},"argument":{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"k","type":{"typehash":"35022e4b576c9d45f93989c7f078f89892d44f37"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}},{"tag":"apply","operator":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"k","type":{"typehash":"35022e4b576c9d45f93989c7f078f89892d44f37"}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (induct \"n\")\n ((\"1\" (grind) nil nil)\n  (\"2\" (skosimp*)\n   ((\"2\" (expand \"divrem\" +)\n     ((\"2\" (lift-if)\n       ((\"2\" (ground)\n         ((\"1\" (inst?)\n           ((\"1\" (replace*)\n             ((\"1\" (hide-all-but 1) ((\"1\" (grind) nil nil)) nil)) nil))\n           nil)\n          (\"2\" (inst?)\n           ((\"2\" (replace*)\n             ((\"2\" (hide-all-but 2) ((\"2\" (grind) nil nil)) nil)) nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"divrem_dvs0_TCC1","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"divrem_dvs0_TCC2","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"divrem_dvs0","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"f3923c5f8d3927211e5aff1cfbcee01af195158b"}}],"type":{"typehash":"de60bbaa94c2ecb29395529b9f40aa905b1b3a4f"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"divrem","theory":"BitvectorOneComplementDivision","type":{"typehash":"bd9210fadab0cfb0d55ce4c42165b0f5af3e01ae"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"fill","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"30bf94d35b333e4090fb1ff869405e24e5d8e718"}},"argument":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"tuple","exprs":[{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},"then":{"tag":"constant","id":"TRUE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"else":{"tag":"apply","operator":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}}}},{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}}},"else":{"tag":"apply","operator":{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}}}}]}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (induct \"n\")\n   ((\"1\" (grind-with-ext) nil nil)\n    (\"2\" (skosimp*)\n     ((\"2\" (expand \"divrem\" +)\n       ((\"2\" (rewrite \"bv2nat_fill_F[N]\")\n         ((\"2\" (assert)\n           ((\"2\" (lift-if)\n             ((\"2\" (ground)\n               ((\"2\" (inst?)\n                 ((\"2\" (assert)\n                   ((\"2\" (replace*)\n                     ((\"2\" (hide -)\n                       ((\"2\" (decompose-equality)\n                         ((\"1\" (grind-with-ext) nil nil)\n                          (\"2\" (expand \"-\")\n                           ((\"2\" (rewrite \"bv_sub_identity_R\")\n                             ((\"2\" (grind-with-ext) nil nil)) nil))\n                           nil)\n                          (\"3\" (reduce) nil nil) (\"4\" (reduce) nil nil)\n                          (\"5\" (reduce) nil nil)\n                          (\"6\" (reduce) nil nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil)\n    (\"3\" (reduce) nil nil) (\"4\" (reduce) nil nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"bv2nat_left_false_inc","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"integer","integer-value":1}]}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}},"else":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}},"else":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}}},{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}},{"tag":"apply","operator":{"tag":"constant","id":"b2n","library":"pvs:prelude","theory":"bit","type":{"typehash":"0e8b4a8a7dc979547a1648e83db386abea4179a8"}},"argument":{"tag":"apply","operator":{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}}}]}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skolem!)\n   ((\"\" (case-replace \"n!1 = 0\")\n     ((\"1\" (assert)\n       ((\"1\" (lemma \"bv2nat_fill_F[N]\")\n         ((\"1\" (expand \"fill\")\n           ((\"1\" (replace -1)\n             ((\"1\" (hide -1)\n               ((\"1\" (lemma \"bv2nat_lem\")\n                 ((\"1\"\n                   (inst - \"N\"\n                    \"LAMBDA (i: below(N)): IF i < 1 THEN bv!1(i) ELSE FALSE ENDIF\")\n                   ((\"1\" (assert)\n                     ((\"1\" (replace -1)\n                       ((\"1\" (hide -1)\n                         ((\"1\" (expand* \"^\" \"exp2\")\n                           ((\"1\" (lemma \"bv2nat_fill_F[N - 1]\")\n                             ((\"1\" (expand \"fill\")\n                               ((\"1\" (assert) nil nil)) nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil)\n      (\"2\" (rewrite \"bv2nat_as_sum[N]\")\n       ((\"2\" (rewrite \"bv2nat_as_sum[N]\")\n         ((\"2\" (lemma \"sigma_split\")\n           ((\"2\"\n             (inst -\n              \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < n!1 THEN b2n(bv!1(ii)) ELSE b2n(FALSE) ENDIF)\"\n              \"N - 1\" 0 \"n!1 - 1\")\n             ((\"1\" (assert)\n               ((\"1\" (replace -1)\n                 ((\"1\" (hide -1)\n                   ((\"1\"\n                     (case-replace\n                      \"sigma(n!1, N - 1, extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < n!1 THEN b2n(bv!1(ii)) ELSE b2n(FALSE) ENDIF)) = 0\")\n                     ((\"1\" (hide -1)\n                       ((\"1\" (case-replace \"n!1 = N - 1\")\n                         ((\"1\" (assert)\n                           ((\"1\" (expand \"sigma\" 2 1)\n                             ((\"1\" (expand \"extend\" 2 1)\n                               ((\"1\"\n                                 (use \"sigma_restrict_eq\")\n                                 ((\"1\"\n                                   (assert)\n                                   ((\"1\"\n                                     (hide-all-but 1)\n                                     ((\"1\" (grind-with-ext) nil nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil)\n                          (\"2\" (lemma \"sigma_split\")\n                           ((\"2\"\n                             (inst -\n                              \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < 1 + n!1 THEN b2n(bv!1(ii)) ELSE b2n(FALSE) ENDIF)\"\n                              \"N - 1\" 0 \"n!1\")\n                             ((\"2\" (assert)\n                               ((\"2\"\n                                 (replace -1)\n                                 ((\"2\"\n                                   (hide -1)\n                                   ((\"2\"\n                                     (case-replace\n                                      \"sigma(1 + n!1, N - 1, extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < 1 + n!1 THEN b2n(bv!1(ii)) ELSE b2n(FALSE) ENDIF)) = 0\")\n                                     ((\"1\"\n                                       (hide -1)\n                                       ((\"1\"\n                                         (expand \"sigma\" 3 1)\n                                         ((\"1\"\n                                           (expand \"extend\" 3 1)\n                                           ((\"1\"\n                                             (use \"sigma_restrict_eq\")\n                                             ((\"1\"\n                                               (assert)\n                                               ((\"1\"\n                                                 (hide-all-but 1)\n                                                 ((\"1\"\n                                                   (grind-with-ext)\n                                                   nil\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil)\n                                      (\"2\"\n                                       (hide 4)\n                                       ((\"2\"\n                                         (use \"sigma_mult\" (\"x\" 0))\n                                         ((\"2\"\n                                           (lemma \"sigma_restrict_eq\")\n                                           ((\"2\"\n                                             (inst\n                                              -\n                                              \"LAMBDA (n:nat): 0 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < 1 + n!1 THEN b2n(bv!1(ii)) ELSE b2n(FALSE) ENDIF)(n)\"\n                                              \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < 1 + n!1 THEN b2n(bv!1(ii)) ELSE b2n(FALSE) ENDIF)\"\n                                              \"N - 1\"\n                                              \"1 + n!1\")\n                                             ((\"2\"\n                                               (assert)\n                                               ((\"2\"\n                                                 (hide-all-but 1)\n                                                 ((\"2\"\n                                                   (grind-with-ext)\n                                                   nil\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil)\n                      (\"2\" (hide 3)\n                       ((\"2\" (use \"sigma_mult\" (\"x\" 0))\n                         ((\"2\" (assert)\n                           ((\"2\" (lemma \"sigma_restrict_eq\")\n                             ((\"2\"\n                               (inst\n                                -\n                                \"LAMBDA (n: nat): 0 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < n!1 THEN b2n(bv!1(ii)) ELSE b2n(FALSE) ENDIF)(n)\"\n                                \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < n!1 THEN b2n(bv!1(ii)) ELSE b2n(FALSE) ENDIF)\"\n                                \"N - 1\"\n                                \"n!1\")\n                               ((\"2\"\n                                 (assert)\n                                 ((\"2\"\n                                   (hide-all-but 1)\n                                   ((\"2\" (grind-with-ext) nil nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil)\n              (\"2\" (assert) nil nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"bv2nat_right_false_inc","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}},"then":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"else":{"tag":"apply","operator":{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}}}}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"integer","integer-value":1}]}}]}},"then":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"else":{"tag":"apply","operator":{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}}}}},{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}},{"tag":"apply","operator":{"tag":"constant","id":"b2n","library":"pvs:prelude","theory":"bit","type":{"typehash":"0e8b4a8a7dc979547a1648e83db386abea4179a8"}},"argument":{"tag":"apply","operator":{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}}}]}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skolem!)\n   ((\"\" (rewrite \"bv2nat_as_sum[N]\")\n     ((\"\" (rewrite \"bv2nat_as_sum[N]\")\n       ((\"\" (case-replace \"n!1 = 0\")\n         ((\"1\" (assert)\n           ((\"1\" (lemma \"sigma_split\")\n             ((\"1\"\n               (inst-cp -\n                \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < n!1 THEN b2n(FALSE) ELSE b2n(bv!1(ii)) ENDIF)\"\n                \"N - 1\" 0 0)\n               ((\"1\" (assert)\n                 ((\"1\" (expand \"sigma\" -2 2)\n                   ((\"1\" (expand \"extend\" -2 2)\n                     ((\"1\" (replace -2)\n                       ((\"1\" (hide -2)\n                         ((\"1\" (assert)\n                           ((\"1\"\n                             (inst -\n                              \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < 1 THEN b2n(FALSE) ELSE b2n(bv!1(ii)) ENDIF)\"\n                              \"N - 1\" 0 0)\n                             ((\"1\" (assert)\n                               ((\"1\"\n                                 (expand \"sigma\" -1 2)\n                                 ((\"1\"\n                                   (expand \"extend\" -1 2)\n                                   ((\"1\"\n                                     (expand \"b2n\" -1 5)\n                                     ((\"1\"\n                                       (replace -1)\n                                       ((\"1\"\n                                         (hide -1)\n                                         ((\"1\"\n                                           (assert)\n                                           ((\"1\"\n                                             (use \"sigma_restrict_eq\")\n                                             ((\"1\"\n                                               (assert)\n                                               ((\"1\"\n                                                 (hide 2)\n                                                 ((\"1\"\n                                                   (grind-with-ext)\n                                                   nil\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil)\n          (\"2\" (lemma \"sigma_split\")\n           ((\"2\"\n             (inst -\n              \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < n!1 THEN b2n(FALSE) ELSE b2n(bv!1(ii)) ENDIF)\"\n              \"N - 1\" 0 \"n!1 - 1\")\n             ((\"1\" (assert)\n               ((\"1\"\n                 (case-replace\n                  \"sigma(0, n!1 - 1, extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < n!1 THEN b2n(FALSE) ELSE b2n(bv!1(ii)) ENDIF)) = 0\")\n                 ((\"1\" (replace*)\n                   ((\"1\" (hide -1 -2)\n                     ((\"1\" (assert)\n                       ((\"1\" (case-replace \"n!1 = N - 1\")\n                         ((\"1\" (assert)\n                           ((\"1\" (expand \"sigma\" 2 1)\n                             ((\"1\" (expand \"extend\" 2 1)\n                               ((\"1\"\n                                 (use \"sigma_mult\" (\"x\" 0))\n                                 ((\"1\"\n                                   (lemma \"sigma_restrict_eq\")\n                                   ((\"1\"\n                                     (inst\n                                      -\n                                      \"LAMBDA (n: nat): 0 * extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(FALSE))(n)\"\n                                      \"extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(FALSE))\"\n                                      \"N - 1\"\n                                      0)\n                                     ((\"1\"\n                                       (assert)\n                                       ((\"1\"\n                                         (hide-all-but 1)\n                                         ((\"1\"\n                                           (grind-with-ext)\n                                           nil\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil)\n                          (\"2\" (lemma \"sigma_split\")\n                           ((\"2\"\n                             (inst -\n                              \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < 1 + n!1 THEN b2n(FALSE) ELSE b2n(bv!1(ii)) ENDIF)\"\n                              \"N - 1\" 0 \"n!1\")\n                             ((\"2\" (assert)\n                               ((\"2\"\n                                 (case-replace\n                                  \"sigma(0, n!1, extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < 1 + n!1 THEN b2n(FALSE) ELSE b2n(bv!1(ii)) ENDIF)) = 0\")\n                                 ((\"1\"\n                                   (replace*)\n                                   ((\"1\"\n                                     (hide -1 -2)\n                                     ((\"1\"\n                                       (lemma \"sigma_split\")\n                                       ((\"1\"\n                                         (inst\n                                          -\n                                          \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < n!1 THEN b2n(FALSE) ELSE b2n(bv!1(ii)) ENDIF)\"\n                                          \"N - 1\"\n                                          \"n!1\"\n                                          \"n!1\")\n                                         ((\"1\"\n                                           (assert)\n                                           ((\"1\"\n                                             (expand \"sigma\" -1 3)\n                                             ((\"1\"\n                                               (expand \"extend\" -1 2)\n                                               ((\"1\"\n                                                 (replace -1)\n                                                 ((\"1\"\n                                                   (assert)\n                                                   ((\"1\"\n                                                     (hide -1)\n                                                     ((\"1\"\n                                                       (use\n                                                        \"sigma_restrict_eq\")\n                                                       ((\"1\"\n                                                         (assert)\n                                                         ((\"1\"\n                                                           (hide-all-but\n                                                            1)\n                                                           ((\"1\"\n                                                             (grind-with-ext)\n                                                             nil\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil)\n                                  (\"2\"\n                                   (hide -1 4)\n                                   ((\"2\"\n                                     (use \"sigma_mult\" (\"x\" 0))\n                                     ((\"2\"\n                                       (lemma \"sigma_restrict_eq\")\n                                       ((\"2\"\n                                         (inst\n                                          -\n                                          \"LAMBDA (n: nat): 0 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < 1 + n!1 THEN b2n(FALSE) ELSE b2n(bv!1(ii)) ENDIF)(n)\"\n                                          \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < 1 + n!1 THEN b2n(FALSE) ELSE b2n(bv!1(ii)) ENDIF)\"\n                                          \"n!1\"\n                                          0)\n                                         ((\"2\"\n                                           (assert)\n                                           ((\"2\"\n                                             (hide-all-but 1)\n                                             ((\"2\"\n                                               (grind-with-ext)\n                                               nil\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil)\n                  (\"2\" (hide -1 3)\n                   ((\"2\" (use \"sigma_mult\" (\"x\" 0))\n                     ((\"2\" (lemma \"sigma_restrict_eq\")\n                       ((\"2\"\n                         (inst -\n                          \"LAMBDA (n: nat): 0 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < n!1 THEN b2n(FALSE) ELSE b2n(bv!1(ii)) ENDIF)(n)\"\n                          \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < n!1 THEN b2n(FALSE) ELSE b2n(bv!1(ii)) ENDIF)\"\n                          \"n!1 - 1\" 0)\n                         ((\"2\" (assert)\n                           ((\"2\" (hide-all-but 1)\n                             ((\"2\" (grind-with-ext) nil nil)) nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil)\n              (\"2\" (assert) nil nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"bv2nat_left_false_dec_TCC1","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"bv2nat_left_false_dec_TCC2","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}},{"tag":"integer","integer-value":1}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"bv2nat_left_false_dec_TCC3","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}},{"tag":"integer","integer-value":1}]}},{"tag":"integer","integer-value":0}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"bv2nat_left_false_dec_TCC4","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"bv2nat_left_false_dec","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}}},"else":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}},{"tag":"integer","integer-value":1}]}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}}},"else":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}}},{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}},{"tag":"integer","integer-value":1}]}}},{"tag":"apply","operator":{"tag":"constant","id":"b2n","library":"pvs:prelude","theory":"bit","type":{"typehash":"0e8b4a8a7dc979547a1648e83db386abea4179a8"}},"argument":{"tag":"apply","operator":{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skolem!)\n   ((\"\" (case-replace \"n!1 = N - 1\")\n     ((\"1\" (assert)\n       ((\"1\" (lemma \"bv2nat_fill_F[N]\")\n         ((\"1\" (expand \"fill\")\n           ((\"1\" (replace -1)\n             ((\"1\" (hide -1)\n               ((\"1\" (lemma \"bv2nat_lem\")\n                 ((\"1\"\n                   (inst - \"N\"\n                    \"LAMBDA (i: below(N)): IF i < 1 THEN bv!1(i - 1 + N) ELSE FALSE ENDIF\")\n                   ((\"1\" (assert)\n                     ((\"1\" (replace -1)\n                       ((\"1\" (hide -1)\n                         ((\"1\" (expand* \"^\" \"exp2\")\n                           ((\"1\" (lemma \"bv2nat_fill_F[N - 1]\")\n                             ((\"1\" (expand \"fill\")\n                               ((\"1\" (assert) nil nil)) nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil)\n                    (\"2\" (skosimp) ((\"2\" (assert) nil nil)) nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil)\n      (\"2\" (rewrite \"bv2nat_as_sum[N]\")\n       ((\"1\" (rewrite \"bv2nat_as_sum[N]\")\n         ((\"1\" (case-replace \"n!1 = 0\")\n           ((\"1\" (assert)\n             ((\"1\" (expand \"sigma\")\n               ((\"1\" (expand \"extend\" 2 1)\n                 ((\"1\" (expand \"extend\" 2 2)\n                   ((\"1\" (assert)\n                     ((\"1\" (lemma \"sigma_restrict_eq\")\n                       ((\"1\"\n                         (inst -\n                          \"extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii)))\"\n                          \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - 1 THEN b2n(bv!1(ii)) ELSE b2n(FALSE) ENDIF)\"\n                          \"N - 2\" 0)\n                         ((\"1\" (expand \"b2n\")\n                           ((\"1\" (assert)\n                             ((\"1\" (hide-all-but 1)\n                               ((\"1\" (grind-with-ext) nil nil)) nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil)\n            (\"2\" (lemma \"sigma_split\")\n             ((\"2\"\n               (inst -\n                \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - n!1 THEN b2n(bv!1(ii + n!1)) ELSE b2n(FALSE) ENDIF)\"\n                \"N - 1\" 0 \"N - n!1 - 1\")\n               ((\"1\" (assert)\n                 ((\"1\"\n                   (case-replace\n                    \"sigma(N - n!1, N - 1, extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - n!1 THEN b2n(bv!1(ii + n!1)) ELSE b2n(FALSE) ENDIF)) = 0\")\n                   ((\"1\" (replace -2)\n                     ((\"1\" (hide -1 -2)\n                       ((\"1\" (assert)\n                         ((\"1\" (expand \"sigma\" 3 1)\n                           ((\"1\" (expand \"extend\" 3 1)\n                             ((\"1\" (lemma \"sigma_split\")\n                               ((\"1\"\n                                 (inst\n                                  -\n                                  \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - 1 - n!1 THEN b2n(bv!1(ii + n!1)) ELSE b2n(FALSE) ENDIF)\"\n                                  \"N - 1\"\n                                  0\n                                  \"N - 2 - n!1\")\n                                 ((\"1\"\n                                   (assert)\n                                   ((\"1\"\n                                     (case-replace\n                                      \"sigma(N - 1 - n!1, N - 1, extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - 1 - n!1 THEN b2n(bv!1(ii + n!1)) ELSE b2n(FALSE) ENDIF)) = 0\")\n                                     ((\"1\"\n                                       (replace -2)\n                                       ((\"1\"\n                                         (hide -1 -2)\n                                         ((\"1\"\n                                           (lemma \"sigma_restrict_eq\")\n                                           ((\"1\"\n                                             (inst\n                                              -\n                                              \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - n!1 THEN b2n(bv!1(ii + n!1)) ELSE b2n(FALSE) ENDIF)\"\n                                              \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - 1 - n!1 THEN b2n(bv!1(ii + n!1)) ELSE b2n(FALSE) ENDIF)\"\n                                              \"N - 2 - n!1\"\n                                              0)\n                                             ((\"1\"\n                                               (assert)\n                                               ((\"1\"\n                                                 (hide-all-but 1)\n                                                 ((\"1\"\n                                                   (grind-with-ext)\n                                                   nil\n                                                   nil))\n                                                 nil))\n                                               nil)\n                                              (\"2\"\n                                               (skosimp)\n                                               ((\"2\" (assert) nil nil))\n                                               nil)\n                                              (\"3\"\n                                               (skosimp)\n                                               ((\"3\" (assert) nil nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil)\n                                      (\"2\"\n                                       (hide -1 4)\n                                       ((\"2\"\n                                         (use \"sigma_mult\" (\"x\" 0))\n                                         ((\"1\"\n                                           (lemma \"sigma_restrict_eq\")\n                                           ((\"1\"\n                                             (inst\n                                              -\n                                              \"LAMBDA (n: nat): 0 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - 1 - n!1 THEN b2n(bv!1(ii + n!1)) ELSE b2n(FALSE) ENDIF)(n)\"\n                                              \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - 1 - n!1 THEN b2n(bv!1(ii + n!1)) ELSE b2n(FALSE) ENDIF)\"\n                                              \"N - 1\"\n                                              \"N - 1 - n!1\")\n                                             ((\"1\"\n                                               (assert)\n                                               ((\"1\"\n                                                 (hide-all-but 1)\n                                                 ((\"1\"\n                                                   (grind-with-ext)\n                                                   nil\n                                                   nil))\n                                                 nil))\n                                               nil)\n                                              (\"2\"\n                                               (skosimp)\n                                               ((\"2\" (assert) nil nil))\n                                               nil))\n                                             nil))\n                                           nil)\n                                          (\"2\"\n                                           (skosimp)\n                                           ((\"2\" (assert) nil nil))\n                                           nil))\n                                         nil))\n                                       nil)\n                                      (\"3\"\n                                       (skosimp)\n                                       ((\"3\" (assert) nil nil))\n                                       nil))\n                                     nil))\n                                   nil)\n                                  (\"2\"\n                                   (skosimp)\n                                   ((\"2\" (assert) nil nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil)\n                    (\"2\" (hide -1 4)\n                     ((\"2\" (use \"sigma_mult\" (\"x\" 0))\n                       ((\"1\" (lemma \"sigma_restrict_eq\")\n                         ((\"1\"\n                           (inst -\n                            \"LAMBDA (n: nat): 0 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - n!1 THEN b2n(bv!1(ii + n!1)) ELSE b2n(FALSE) ENDIF)(n)\"\n                            \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - n!1 THEN b2n(bv!1(ii + n!1)) ELSE b2n(FALSE) ENDIF)\"\n                            \"N - 1\" \"N - n!1\")\n                           ((\"1\" (assert)\n                             ((\"1\" (hide-all-but 1)\n                               ((\"1\" (grind-with-ext) nil nil)) nil))\n                             nil)\n                            (\"2\" (skosimp) ((\"2\" (assert) nil nil))\n                             nil))\n                           nil))\n                         nil)\n                        (\"2\" (skosimp) ((\"2\" (assert) nil nil)) nil))\n                       nil))\n                     nil)\n                    (\"3\" (skosimp) ((\"3\" (assert) nil nil)) nil))\n                   nil))\n                 nil)\n                (\"2\" (skosimp) ((\"2\" (assert) nil nil)) nil))\n               nil))\n             nil))\n           nil)\n          (\"2\" (skosimp) ((\"2\" (assert) nil nil)) nil))\n         nil)\n        (\"2\" (skosimp) ((\"2\" (assert) nil nil)) nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"bv2nat_split_TCC1","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"m","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"m","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}},{"tag":"variable","id":"m","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}},{"tag":"variable","id":"m","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"bv2nat_split","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"bv1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"bv2","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"m","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"m","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"bv1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}},{"tag":"variable","id":"m","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}},"else":{"tag":"apply","operator":{"tag":"variable","id":"bv2","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"m","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}}}}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"m","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"bv1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}},{"tag":"variable","id":"m","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}},"else":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}}},{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"variable","id":"m","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"m","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"bv2","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}},"else":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}}}]}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skolem!)\n   ((\"\" (case-replace \"m!1 = 0\")\n     ((\"1\" (assert)\n       ((\"1\" (expand \"exp2\")\n         ((\"1\" (lemma \"bv2nat_fill_F[N]\")\n           ((\"1\" (expand \"fill\") ((\"1\" (assert) nil nil)) nil)) nil))\n         nil))\n       nil)\n      (\"2\" (case-replace \"m!1 = N\")\n       ((\"1\" (assert)\n         ((\"1\" (lemma \"bv2nat_fill_F[N]\")\n           ((\"1\" (expand \"fill\") ((\"1\" (assert) nil nil)) nil)) nil))\n         nil)\n        (\"2\" (rewrite \"bv2nat_as_sum[N]\")\n         ((\"1\" (assert)\n           ((\"1\" (rewrite \"bv2nat_as_sum[N]\")\n             ((\"1\" (rewrite \"bv2nat_as_sum[N]\")\n               ((\"1\" (lemma \"sigma_split\")\n                 ((\"1\"\n                   (inst-cp -\n                    \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < m!1 THEN b2n(bv1!1(ii+N-m!1)) ELSE b2n(FALSE) ENDIF)\"\n                    \"N - 1\" 0 \"m!1 - 1\")\n                   ((\"1\" (assert)\n                     ((\"1\"\n                       (case-replace\n                        \"sigma(m!1, N - 1, extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < m!1 THEN b2n(bv1!1(ii+N-m!1)) ELSE b2n(FALSE) ENDIF)) = 0\")\n                       ((\"1\" (replace -3)\n                         ((\"1\" (hide -1 -3)\n                           ((\"1\"\n                             (inst-cp -\n                              \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - m!1 THEN b2n(bv2!1(ii)) ELSE b2n(FALSE) ENDIF)\"\n                              \"N - 1\" 0 \"N - m!1 - 1\")\n                             ((\"1\" (assert)\n                               ((\"1\"\n                                 (case-replace\n                                  \"sigma(N - m!1, N - 1, extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - m!1 THEN b2n(bv2!1(ii)) ELSE b2n(FALSE) ENDIF)) = 0\")\n                                 ((\"1\"\n                                   (replace -3)\n                                   ((\"1\"\n                                     (hide -1 -3)\n                                     ((\"1\"\n                                       (lemma \"sigma_mult\")\n                                       ((\"1\"\n                                         (inst\n                                          -\n                                          \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - m!1 THEN b2n(bv2!1(ii)) ELSE b2n(FALSE) ENDIF)\"\n                                          \"N - 1 - m!1\"\n                                          0\n                                          \"exp2(m!1)\")\n                                         ((\"1\"\n                                           (replace -1 * rl)\n                                           ((\"1\"\n                                             (hide -1)\n                                             ((\"1\"\n                                               (inst\n                                                -\n                                                \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < m!1 THEN b2n(bv1!1(ii + N - m!1)) ELSE b2n(bv2!1(ii - m!1)) ENDIF)\"\n                                                \"N - 1\"\n                                                0\n                                                \"m!1 - 1\")\n                                               ((\"1\"\n                                                 (assert)\n                                                 ((\"1\"\n                                                   (replace -1)\n                                                   ((\"1\"\n                                                     (hide -1)\n                                                     ((\"1\"\n                                                       (assert)\n                                                       ((\"1\"\n                                                         (lemma\n                                                          \"sigma_restrict_eq\")\n                                                         ((\"1\"\n                                                           (inst\n                                                            -\n                                                            \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < m!1 THEN b2n(bv1!1(ii + N - m!1)) ELSE b2n(bv2!1(ii - m!1)) ENDIF)\"\n                                                            \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < m!1 THEN b2n(bv1!1(ii + N - m!1)) ELSE b2n(FALSE) ENDIF)\"\n                                                            \"m!1 - 1\"\n                                                            0)\n                                                           ((\"1\"\n                                                             (split)\n                                                             ((\"1\"\n                                                               (replace\n                                                                -1)\n                                                               ((\"1\"\n                                                                 (hide\n                                                                  -1)\n                                                                 ((\"1\"\n                                                                   (assert)\n                                                                   ((\"1\"\n                                                                     (lemma\n                                                                      \"sigma_shift\")\n                                                                     ((\"1\"\n                                                                       (inst\n                                                                        -\n                                                                        \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < m!1 THEN b2n(bv1!1(ii + N - m!1)) ELSE b2n(bv2!1(ii - m!1)) ENDIF)\"\n                                                                        \"N - 1 - m!1\"\n                                                                        0\n                                                                        \"m!1\")\n                                                                       ((\"1\"\n                                                                         (assert)\n                                                                         ((\"1\"\n                                                                           (replace\n                                                                            -1)\n                                                                           ((\"1\"\n                                                                             (hide\n                                                                              -1)\n                                                                             ((\"1\"\n                                                                               (use\n                                                                                \"sigma_restrict_eq\")\n                                                                               ((\"1\"\n                                                                                 (assert)\n                                                                                 ((\"1\"\n                                                                                   (hide-all-but\n                                                                                    1)\n                                                                                   ((\"1\"\n                                                                                     (apply-extensionality\n                                                                                      :hide?\n                                                                                      t)\n                                                                                     ((\"1\"\n                                                                                       (grind)\n                                                                                       ((\"1\"\n                                                                                         (lemma\n                                                                                          \"exp2_sum\")\n                                                                                         ((\"1\"\n                                                                                           (inst\n                                                                                            -\n                                                                                            \"m!1 - 1\"\n                                                                                            \"x!1\")\n                                                                                           ((\"1\"\n                                                                                             (assert)\n                                                                                             nil\n                                                                                             nil))\n                                                                                           nil))\n                                                                                         nil))\n                                                                                       nil)\n                                                                                      (\"2\"\n                                                                                       (reduce)\n                                                                                       nil\n                                                                                       nil)\n                                                                                      (\"3\"\n                                                                                       (reduce)\n                                                                                       nil\n                                                                                       nil))\n                                                                                     nil))\n                                                                                   nil))\n                                                                                 nil)\n                                                                                (\"2\"\n                                                                                 (reduce)\n                                                                                 nil\n                                                                                 nil)\n                                                                                (\"3\"\n                                                                                 (reduce)\n                                                                                 nil\n                                                                                 nil))\n                                                                               nil))\n                                                                             nil))\n                                                                           nil))\n                                                                         nil)\n                                                                        (\"2\"\n                                                                         (reduce)\n                                                                         nil\n                                                                         nil)\n                                                                        (\"3\"\n                                                                         (reduce)\n                                                                         nil\n                                                                         nil))\n                                                                       nil))\n                                                                     nil))\n                                                                   nil))\n                                                                 nil))\n                                                               nil)\n                                                              (\"2\"\n                                                               (hide-all-but\n                                                                1)\n                                                               ((\"2\"\n                                                                 (grind-with-ext)\n                                                                 nil\n                                                                 nil))\n                                                               nil))\n                                                             nil)\n                                                            (\"2\"\n                                                             (reduce)\n                                                             nil\n                                                             nil)\n                                                            (\"3\"\n                                                             (reduce)\n                                                             nil\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil)\n                                                (\"2\" (reduce) nil nil)\n                                                (\"3\" (reduce) nil nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil)\n                                  (\"2\"\n                                   (hide -1 -2 4)\n                                   ((\"2\"\n                                     (use \"sigma_mult\" (\"x\" 0))\n                                     ((\"2\"\n                                       (lemma \"sigma_restrict_eq\")\n                                       ((\"2\"\n                                         (inst\n                                          -\n                                          \"LAMBDA (n: nat): 0 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - m!1 THEN b2n(bv2!1(ii)) ELSE b2n(FALSE) ENDIF)(n)\"\n                                          \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - m!1 THEN b2n(bv2!1(ii)) ELSE b2n(FALSE) ENDIF)\"\n                                          \"N - 1\"\n                                          \"N - m!1\")\n                                         ((\"2\"\n                                           (assert)\n                                           ((\"2\"\n                                             (hide-all-but 1)\n                                             ((\"2\"\n                                               (grind-with-ext)\n                                               nil\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil)\n                        (\"2\" (hide -1 -2 4)\n                         ((\"2\" (use \"sigma_mult\" (\"x\" 0))\n                           ((\"1\" (lemma \"sigma_restrict_eq\")\n                             ((\"1\"\n                               (inst\n                                -\n                                \"LAMBDA (n: nat): 0 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < m!1 THEN b2n(bv1!1(ii+N-m!1)) ELSE b2n(FALSE) ENDIF)(n)\"\n                                \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < m!1 THEN b2n(bv1!1(ii+N-m!1)) ELSE b2n(FALSE) ENDIF)\"\n                                \"N - 1\"\n                                \"m!1\")\n                               ((\"1\"\n                                 (assert)\n                                 ((\"1\"\n                                   (hide-all-but 1)\n                                   ((\"1\" (grind-with-ext) nil nil))\n                                   nil))\n                                 nil)\n                                (\"2\" (reduce) nil nil))\n                               nil))\n                             nil)\n                            (\"2\" (reduce) nil nil))\n                           nil))\n                         nil)\n                        (\"3\" (reduce) nil nil))\n                       nil))\n                     nil)\n                    (\"2\" (reduce) nil nil))\n                   nil))\n                 nil))\n               nil)\n              (\"2\" (reduce) nil nil))\n             nil))\n           nil)\n          (\"2\" (reduce) nil nil) (\"3\" (reduce) nil nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"bv2nat_left_false_minus_TCC1","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}},{"tag":"integer","integer-value":1}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"bv2nat_left_false_minus","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}}},"else":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}},{"tag":"integer","integer-value":1}]}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}},{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}}},"else":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"b2n","library":"pvs:prelude","theory":"bit","type":{"typehash":"0e8b4a8a7dc979547a1648e83db386abea4179a8"}},"argument":{"tag":"apply","operator":{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"n","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skolem!)\n   ((\"\" (rewrite \"bv2nat_as_sum[N]\")\n     ((\"1\" (rewrite \"bv2nat_as_sum[N]\")\n       ((\"1\" (assert)\n         ((\"1\" (lemma \"sigma_split\")\n           ((\"1\"\n             (inst -\n              \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - n!1 THEN b2n(bv!1(ii + n!1)) ELSE b2n(FALSE) ENDIF)\"\n              \"N - 1\" 0 0)\n             ((\"1\" (assert)\n               ((\"1\" (expand \"sigma\" -1 2)\n                 ((\"1\" (expand \"extend\" -1 2)\n                   ((\"1\" (expand \"exp2\" -1 3)\n                     ((\"1\" (replace -1)\n                       ((\"1\" (hide -1)\n                         ((\"1\" (use \"sigma_mult\")\n                           ((\"1\" (replace -1 * rl)\n                             ((\"1\" (hide -1)\n                               ((\"1\"\n                                 (expand \"sigma\" 1 2)\n                                 ((\"1\"\n                                   (expand \"extend\" 1 2)\n                                   ((\"1\"\n                                     (expand \"b2n\" 1 7)\n                                     ((\"1\"\n                                       (lemma \"sigma_shift\")\n                                       ((\"1\"\n                                         (inst\n                                          -\n                                          \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - n!1 THEN b2n(bv!1(ii + n!1)) ELSE b2n(FALSE) ENDIF)\"\n                                          \"N - 2\"\n                                          0\n                                          1)\n                                         ((\"1\"\n                                           (assert)\n                                           ((\"1\"\n                                             (replace -1)\n                                             ((\"1\"\n                                               (hide -1)\n                                               ((\"1\"\n                                                 (lemma\n                                                  \"sigma_restrict_eq\")\n                                                 ((\"1\"\n                                                   (inst\n                                                    -\n                                                    \"LAMBDA (n: nat): extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - n!1 THEN b2n(bv!1(ii + n!1)) ELSE b2n(FALSE) ENDIF)(1 + n)\"\n                                                    \"LAMBDA (n: nat): 2 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - 1 - n!1 THEN b2n(bv!1(1 + ii + n!1)) ELSE b2n(FALSE) ENDIF)(n)\"\n                                                    \"N - 2\"\n                                                    0)\n                                                   ((\"1\"\n                                                     (assert)\n                                                     ((\"1\"\n                                                       (hide 2)\n                                                       ((\"1\"\n                                                         (grind-with-ext)\n                                                         nil\n                                                         nil))\n                                                       nil))\n                                                     nil)\n                                                    (\"2\"\n                                                     (reduce)\n                                                     nil\n                                                     nil)\n                                                    (\"3\"\n                                                     (reduce)\n                                                     nil\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil)\n                                          (\"2\" (reduce) nil nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil)\n                            (\"2\" (reduce) nil nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil)\n              (\"2\" (reduce) nil nil))\n             nil))\n           nil))\n         nil)\n        (\"2\" (reduce) nil nil))\n       nil)\n      (\"2\" (reduce) nil nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"bv2nat_leftshift_exp_TCC1","label":"obligation","definition":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}},{"tag":"integer","integer-value":0}]}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"bv2nat_leftshift_exp","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"5a7aa47bdc764b6116531680cb42827b010cf6a7"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}},{"tag":"integer","integer-value":2}]}},{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}},{"tag":"apply","operator":{"tag":"constant","id":"b2n","library":"pvs:prelude","theory":"bit","type":{"typehash":"0e8b4a8a7dc979547a1648e83db386abea4179a8"}},"argument":{"tag":"apply","operator":{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skolem!)\n   ((\"\" (rewrite \"bv2nat_as_sum[N]\")\n     ((\"\" (assert)\n       ((\"\" (rewrite \"bv2nat_as_sum[N]\")\n         ((\"\" (expand \"sigma\" 1 1)\n           ((\"\" (expand \"extend\" 1 1)\n             ((\"\" (lemma \"sigma_split\")\n               ((\"\"\n                 (inst -\n                  \"extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(left_shift(1, bv!1)(ii)))\"\n                  \"N - 1\" 0 0)\n                 ((\"\" (assert)\n                   ((\"\" (expand \"sigma\" -1 2)\n                     ((\"\" (expand \"extend\" -1 2)\n                       ((\"\" (expand \"left_shift\" -1 3)\n                         ((\"\" (expand* \"^\" \"o\" \"fill\")\n                           ((\"\" (expand \"b2n\" -1 3)\n                             ((\"\" (replace -1)\n                               ((\"\"\n                                 (hide -1)\n                                 ((\"\"\n                                   (lemma \"sigma_shift\")\n                                   ((\"\"\n                                     (inst\n                                      -\n                                      \"extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(left_shift(1, bv!1)(ii)))\"\n                                      \"N - 2\"\n                                      0\n                                      1)\n                                     ((\"\"\n                                       (assert)\n                                       ((\"\"\n                                         (replace -1)\n                                         ((\"\"\n                                           (hide -1)\n                                           ((\"\"\n                                             (case-replace\n                                              \"sigma(0, N - 2, LAMBDA (n: nat): extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(left_shift(1, bv!1)(ii)))(1 + n)) = 2 * sigma(0, N - 2, extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii))))\")\n                                             ((\"1\"\n                                               (rewrite\n                                                \"times_div1\"\n                                                :dir\n                                                rl)\n                                               nil\n                                               nil)\n                                              (\"2\"\n                                               (hide 2)\n                                               ((\"2\"\n                                                 (use \"sigma_mult\")\n                                                 ((\"2\"\n                                                   (replace -1 * rl)\n                                                   ((\"2\"\n                                                     (hide -1)\n                                                     ((\"2\"\n                                                       (lemma\n                                                        \"sigma_restrict_eq\")\n                                                       ((\"2\"\n                                                         (inst\n                                                          -\n                                                          \"LAMBDA (n: nat): extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(left_shift(1, bv!1)(ii)))(1 + n)\"\n                                                          \"LAMBDA (n: nat): 2 * extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii)))(n)\"\n                                                          \"N - 2\"\n                                                          0)\n                                                         ((\"2\"\n                                                           (assert)\n                                                           ((\"2\"\n                                                             (hide-all-but\n                                                              1)\n                                                             ((\"2\"\n                                                               (grind-with-ext)\n                                                               nil\n                                                               nil))\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"divrem_mem_TCC1","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"integer","integer-value":0}]}}},{"tag":"forall","bindings":[{"tag":"variable","id":"aux1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"quot1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"aux1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"update","expression":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"apply","operator":{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"update","expression":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"apply","operator":{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"quot1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"integer","integer-value":1}]}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}},"else":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}}}]}}]}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"integer","integer-value":1}]}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"integer","integer-value":1}]}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}}]}}]}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"divrem_mem_TCC2","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"integer","integer-value":0}]}}},{"tag":"forall","bindings":[{"tag":"variable","id":"aux1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"quot1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"aux1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"update","expression":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"apply","operator":{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"update","expression":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"apply","operator":{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"quot1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"integer","integer-value":1}]}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}},"else":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}}}]}}]}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"integer","integer-value":1}]}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}]}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"divrem_mem_TCC3","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"integer","integer-value":0}]}}},{"tag":"forall","bindings":[{"tag":"variable","id":"aux1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"quot1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"aux1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"update","expression":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"apply","operator":{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"update","expression":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"apply","operator":{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"quot1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"integer","integer-value":1}]}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}},"else":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}}}]}}}]}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"integer","integer-value":1}]}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"integer","integer-value":1}]}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}}]}}]}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"divrem_mem_TCC4","label":"obligation","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"integer","integer-value":0}]}}},{"tag":"forall","bindings":[{"tag":"variable","id":"aux1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"quot1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"aux1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"update","expression":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"apply","operator":{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"update","expression":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"apply","operator":{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"quot1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"integer","integer-value":1}]}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}},"else":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}}}]}}}]}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"integer","integer-value":1}]}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}]}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (termination-tcc) nil nil)","status":"unchecked"}},{"tag":"recursive-func-decl","id":"divrem_mem","theory":"BitvectorOneComplementDivision","type":{"typehash":"d7dc2f714a1fce0970ff612d40474b343adf5e2b"},"parameters":[[{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]],"recursive-def":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"integer","integer-value":0}]}},"then":{"tag":"tuple","exprs":[{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]},"else":{"tag":"let","bindings":[{"tag":"let-binding","id":"aux1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},"expr":{"tag":"update","expression":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"apply","operator":{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}}],"body":{"tag":"let","bindings":[{"tag":"let-binding","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},"expr":{"tag":"update","expression":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"apply","operator":{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}}],"body":{"tag":"let","bindings":[{"tag":"let-binding","id":"quot1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},"expr":{"tag":"apply","operator":{"tag":"constant","id":"left_shift","theory":"bv_shift","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}}],"body":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"integer","integer-value":1}]}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}},"else":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}}}]}},"then":{"tag":"apply","operator":{"tag":"constant","id":"divrem_mem","theory":"BitvectorOneComplementDivision","type":{"typehash":"d7dc2f714a1fce0970ff612d40474b343adf5e2b"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"aux1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"update","expression":{"tag":"variable","id":"quot1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"assignments":[{"tag":"assignment","arguments":[[{"tag":"integer","integer-value":0}]],"expr":{"tag":"constant","id":"TRUE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}]},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"bv_arithmetic_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"integer","integer-value":1}]}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}},"else":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"integer","integer-value":1}]}}]}},"else":{"tag":"apply","operator":{"tag":"constant","id":"divrem_mem","theory":"BitvectorOneComplementDivision","type":{"typehash":"d7dc2f714a1fce0970ff612d40474b343adf5e2b"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"aux1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"quot1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem1","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}},{"tag":"integer","integer-value":1}]}}]}}}}}}},"measure":{"tag":"lambda","bindings":[{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}],"expression":{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}}},{"tag":"formula-decl","id":"divrem_mem_first_second_third","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}],"expression":{"tag":"let","bindings":[{"tag":"let-binding","id":"drm","type":{"typehash":"0e62cad1a909071b121ca09d0454c9c3deb64003"},"expr":{"tag":"apply","operator":{"tag":"constant","id":"divrem_mem","theory":"BitvectorOneComplementDivision","type":{"typehash":"d7dc2f714a1fce0970ff612d40474b343adf5e2b"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}}],"body":{"tag":"let","bindings":[{"tag":"let-binding","id":"dr","type":{"typehash":"f3923c5f8d3927211e5aff1cfbcee01af195158b"},"expr":{"tag":"apply","operator":{"tag":"constant","id":"divrem","theory":"BitvectorOneComplementDivision","type":{"typehash":"bd9210fadab0cfb0d55ce4c42165b0f5af3e01ae"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}},"else":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}}],"body":{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"project","argument":{"tag":"variable","id":"drm","type":{"typehash":"0e62cad1a909071b121ca09d0454c9c3deb64003"}},"index":1},{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}}},"else":{"tag":"apply","operator":{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"project","argument":{"tag":"variable","id":"drm","type":{"typehash":"0e62cad1a909071b121ca09d0454c9c3deb64003"}},"index":2},{"tag":"project","argument":{"tag":"variable","id":"dr","type":{"typehash":"f3923c5f8d3927211e5aff1cfbcee01af195158b"}},"index":1}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"project","argument":{"tag":"variable","id":"drm","type":{"typehash":"0e62cad1a909071b121ca09d0454c9c3deb64003"}},"index":3},{"tag":"project","argument":{"tag":"variable","id":"dr","type":{"typehash":"f3923c5f8d3927211e5aff1cfbcee01af195158b"}},"index":2}]}}]}}]}}}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (assert)\n   ((\"\" (induct \"n\")\n     ((\"1\" (grind-with-ext) nil nil)\n      (\"2\" (skosimp*)\n       ((\"2\" (expand \"divrem_mem\" +)\n         ((\"2\" (expand \"divrem\" +)\n           ((\"2\"\n             (case-replace\n              \"(LAMBDA (i: below(N)): IF i < N - jb!1 THEN left_shift(1, rem!1) WITH [(0) := quot!1(N - 1)](i) ELSE FALSE ENDIF) = (left_shift(1, LAMBDA (i: below(N)): IF i < N - 1 - jb!1 THEN rem!1(i) ELSE FALSE ENDIF) WITH [(0) := quot!1(N - 1)])\")\n             ((\"1\" (hide -1)\n               ((\"1\" (lift-if)\n                 ((\"1\" (split)\n                   ((\"1\" (flatten)\n                     ((\"1\" (assert)\n                       ((\"1\"\n                         (inst -\n                          \"left_shift(1, aux!1) WITH [(0) := quot!1(N - 1)]\"\n                          \"dvs!1\"\n                          \"left_shift(1, quot!1) WITH [(0) := TRUE]\"\n                          \"(left_shift(1, LAMBDA (i: below(N)): IF i < N - 1 - jb!1 THEN rem!1(i) ELSE FALSE ENDIF) WITH [(0) := quot!1(N - 1)]) - dvs!1\")\n                         ((\"1\" (assert)\n                           ((\"1\" (flatten)\n                             ((\"1\"\n                               (case-replace\n                                \"(LAMBDA (i: below(N)): IF i < N - jb!1 THEN ((left_shift(1, LAMBDA (i: below(N)): IF i < N - 1 - jb!1 THEN rem!1(i) ELSE FALSE ENDIF) WITH [(0) := quot!1(N - 1)]) - dvs!1)(i) ELSE FALSE ENDIF) = left_shift(1, LAMBDA (i: below(N)): IF i < N - 1 - jb!1 THEN rem!1(i) ELSE FALSE ENDIF) WITH [(0) := quot!1(N - 1)] - dvs!1\")\n                               ((\"1\"\n                                 (assert)\n                                 ((\"1\"\n                                   (replace*)\n                                   ((\"1\"\n                                     (hide-all-but 1)\n                                     ((\"1\" (grind-with-ext) nil nil))\n                                     nil))\n                                   nil))\n                                 nil)\n                                (\"2\"\n                                 (hide -3 -4 -5 2)\n                                 ((\"2\"\n                                   (name-replace\n                                    \"ls\"\n                                    \"(left_shift(1, LAMBDA (i: below(N)): IF i < N - 1 - jb!1 THEN rem!1(i) ELSE FALSE ENDIF) WITH [(0) := quot!1(N - 1)])\")\n                                   ((\"2\"\n                                     (case\n                                      \"bv2nat[N](LAMBDA (i: below(N)): IF i < N - jb!1 THEN (ls - dvs!1)(i) ELSE FALSE ENDIF) = bv2nat[N](ls - dvs!1)\")\n                                     ((\"1\"\n                                       (rewrite \"bv2nat_inj[N]\")\n                                       nil\n                                       nil)\n                                      (\"2\"\n                                       (hide 2)\n                                       ((\"2\"\n                                         (rewrite \"bv2nat_minus3\")\n                                         ((\"2\"\n                                           (case-replace\n                                            \"bv2nat[N](ls) = bv2nat[N - jb!1](ls ^ (N - jb!1 - 1, 0))\")\n                                           ((\"1\"\n                                             (hide -1)\n                                             ((\"1\"\n                                               (case-replace\n                                                \"bv2nat[N](dvs!1) = bv2nat[N - jb!1](dvs!1 ^ (N - jb!1 - 1, 0))\")\n                                               ((\"1\"\n                                                 (hide -1)\n                                                 ((\"1\"\n                                                   (case-replace\n                                                    \"(LAMBDA (i: below(N)): IF i < N - jb!1 THEN (ls - dvs!1)(i) ELSE FALSE ENDIF) = (fill[jb!1](FALSE) o ((ls - dvs!1) ^ (N - 1 - jb!1, 0)))\")\n                                                   ((\"1\"\n                                                     (hide -1)\n                                                     ((\"1\"\n                                                       (rewrite\n                                                        \"bv2nat_concat\")\n                                                       ((\"1\"\n                                                         (rewrite\n                                                          \"bv2nat_fill_F\")\n                                                         ((\"1\"\n                                                           (assert)\n                                                           ((\"1\"\n                                                             (lemma\n                                                              \"bv2nat_minus3\")\n                                                             ((\"1\"\n                                                               (expand\n                                                                \"-\")\n                                                               ((\"1\"\n                                                                 (rewrite\n                                                                  \"bv_add_subrange\")\n                                                                 ((\"1\"\n                                                                   (rewrite\n                                                                    \"bv_caret_negate\")\n                                                                   ((\"1\"\n                                                                     (inst?)\n                                                                     ((\"1\"\n                                                                       (assert)\n                                                                       nil\n                                                                       nil))\n                                                                     nil))\n                                                                   nil))\n                                                                 nil))\n                                                               nil))\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil)\n                                                    (\"2\"\n                                                     (hide-all-but 1)\n                                                     ((\"2\"\n                                                       (grind-with-ext)\n                                                       nil\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil)\n                                                (\"2\"\n                                                 (hide 2)\n                                                 ((\"2\"\n                                                   (case\n                                                    \"dvs!1 = (fill[jb!1](FALSE) o (dvs!1 ^ (N - 1 - jb!1, 0)))\")\n                                                   ((\"1\"\n                                                     (case\n                                                      \"bv2nat[N](dvs!1) = bv2nat[N](fill[jb!1](FALSE) o (dvs!1 ^ (N - 1 - jb!1, 0)))\")\n                                                     ((\"1\"\n                                                       (replace -1 +)\n                                                       ((\"1\"\n                                                         (rewrite\n                                                          \"bv2nat_concat\")\n                                                         ((\"1\"\n                                                           (rewrite\n                                                            \"bv2nat_fill_F\")\n                                                           ((\"1\"\n                                                             (assert)\n                                                             nil\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil)\n                                                      (\"2\"\n                                                       (assert)\n                                                       nil\n                                                       nil))\n                                                     nil)\n                                                    (\"2\"\n                                                     (hide 2)\n                                                     ((\"2\"\n                                                       (case-replace\n                                                        \"jb!1 = 0\")\n                                                       ((\"1\"\n                                                         (grind-with-ext)\n                                                         nil\n                                                         nil)\n                                                        (\"2\"\n                                                         (assert)\n                                                         ((\"2\"\n                                                           (lemma\n                                                            \"bv2nat_upperbound[N]\")\n                                                           ((\"2\"\n                                                             (inst\n                                                              -\n                                                              \"dvs!1\"\n                                                              \"N - jb!1\")\n                                                             ((\"2\"\n                                                               (assert)\n                                                               ((\"2\"\n                                                                 (apply-extensionality\n                                                                  2\n                                                                  :hide?\n                                                                  t)\n                                                                 ((\"2\"\n                                                                   (grind)\n                                                                   nil\n                                                                   nil))\n                                                                 nil))\n                                                               nil))\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil)\n                                            (\"2\"\n                                             (hide -1 2)\n                                             ((\"2\"\n                                               (lemma \"bv2nat_concat\")\n                                               ((\"2\"\n                                                 (inst\n                                                  -\n                                                  \"N - jb!1\"\n                                                  \"jb!1\"\n                                                  \"fill[jb!1](FALSE)\"\n                                                  \"ls ^ (N - jb!1 - 1, 0)\")\n                                                 ((\"2\"\n                                                   (rewrite\n                                                    \"bv2nat_fill_F\")\n                                                   ((\"2\"\n                                                     (assert)\n                                                     ((\"2\"\n                                                       (case\n                                                        \"ls = fill[jb!1](FALSE) o (ls ^ (N - 1 - jb!1, 0))\")\n                                                       ((\"1\"\n                                                         (assert)\n                                                         nil\n                                                         nil)\n                                                        (\"2\"\n                                                         (hide-all-but\n                                                          1)\n                                                         ((\"2\"\n                                                           (expand\n                                                            \"ls\")\n                                                           ((\"2\"\n                                                             (grind-with-ext)\n                                                             nil\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil)\n                    (\"2\" (flatten)\n                     ((\"2\" (assert)\n                       ((\"2\"\n                         (inst -\n                          \"left_shift(1, aux!1) WITH [(0) := quot!1(N - 1)]\"\n                          \"dvs!1\" \"left_shift(1, quot!1)\"\n                          \"left_shift(1, rem!1) WITH [(0) := quot!1(N - 1)]\")\n                         ((\"2\" (flatten)\n                           ((\"2\" (assert)\n                             ((\"2\"\n                               (case-replace\n                                \"(LAMBDA (i: below(N)): IF i < N - jb!1 THEN left_shift(1, rem!1) WITH [(0) := quot!1(N - 1)](i) ELSE FALSE ENDIF) = left_shift(1, LAMBDA (i: below(N)): IF i < N - 1 - jb!1 THEN rem!1(i) ELSE FALSE ENDIF) WITH [(0) := quot!1(N - 1)]\")\n                               ((\"1\"\n                                 (assert)\n                                 ((\"1\"\n                                   (replace*)\n                                   ((\"1\"\n                                     (hide-all-but 2)\n                                     ((\"1\" (grind-with-ext) nil nil))\n                                     nil))\n                                   nil))\n                                 nil)\n                                (\"2\"\n                                 (hide-all-but 1)\n                                 ((\"2\" (grind-with-ext) nil nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil)\n              (\"2\" (hide -2 2) ((\"2\" (grind-with-ext) nil nil)) nil))\n             nil))\n           nil))\n         nil))\n       nil)\n      (\"3\" (skosimp) ((\"3\" (assert) nil nil)) nil)\n      (\"4\" (skosimp) ((\"4\" (assert) nil nil)) nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"divrem_mem_rem","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"bv_arith_nat_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}},"else":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"bv_arith_nat_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"project","argument":{"tag":"apply","operator":{"tag":"constant","id":"divrem_mem","theory":"BitvectorOneComplementDivision","type":{"typehash":"d7dc2f714a1fce0970ff612d40474b343adf5e2b"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},"index":3},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (induct \"n\")\n   ((\"1\" (skosimp*)\n     ((\"1\" (assert)\n       ((\"1\" (expand \"divrem_mem\")\n         ((\"1\"\n           (case-replace \"(LAMBDA (i: below(N)): rem!1(i)) = rem!1\")\n           ((\"1\" (apply-extensionality :hide? t) nil nil)) nil))\n         nil))\n       nil))\n     nil)\n    (\"2\" (skosimp*)\n     ((\"2\" (expand \"divrem_mem\" +)\n       ((\"2\" (lift-if)\n         ((\"2\" (split)\n           ((\"1\" (flatten)\n             ((\"1\" (inst?)\n               ((\"1\" (assert)\n                 ((\"1\" (hide 1)\n                   ((\"1\"\n                     (name-replace \"ls\"\n                      \"(LAMBDA (i: below(N)): IF i < N - jb!1 THEN left_shift(1, rem!1) WITH [(0) := dvd!1(N - 1)](i) ELSE FALSE ENDIF)\")\n                     ((\"1\" (expand \"<\")\n                       ((\"1\" (lemma \"leftshift_with\")\n                         ((\"1\"\n                           (inst - \"N\"\n                            \"(LAMBDA (i: below(N)): IF i < N - 1 - jb!1 THEN rem!1(i) ELSE FALSE ENDIF)\"\n                            \"dvd!1(N - 1)\")\n                           ((\"1\" (assert)\n                             ((\"1\" (split)\n                               ((\"1\"\n                                 (case-replace\n                                  \"(left_shift(1, (LAMBDA (i: below(N)): IF i < N - 1 - jb!1 THEN rem!1(i) ELSE FALSE ENDIF)) WITH [(0) := dvd!1(N - 1)]) = ls\")\n                                 ((\"1\"\n                                   (hide -1)\n                                   ((\"1\"\n                                     (case-replace \"jb!1 = 0\")\n                                     ((\"1\"\n                                       (assert)\n                                       ((\"1\"\n                                         (case-replace\n                                          \"(LAMBDA (i: below(N)): (ls - dvs!1)(i)) = ls - dvs!1\")\n                                         ((\"1\"\n                                           (rewrite \"bv2nat_minus3\")\n                                           ((\"1\" (assert) nil nil))\n                                           nil)\n                                          (\"2\"\n                                           (apply-extensionality)\n                                           nil\n                                           nil))\n                                         nil))\n                                       nil)\n                                      (\"2\"\n                                       (case\n                                        \"bv2nat[N](ls) < exp2(N - jb!1)\")\n                                       ((\"1\"\n                                         (assert)\n                                         ((\"1\"\n                                           (lemma\n                                            \"bv2nat_upperbound_caret[N]\")\n                                           ((\"1\"\n                                             (inst-cp\n                                              -\n                                              \"ls\"\n                                              \"N - jb!1\")\n                                             ((\"1\"\n                                               (inst-cp\n                                                -\n                                                \"dvs!1\"\n                                                \"N - jb!1\")\n                                               ((\"1\"\n                                                 (inst\n                                                  -\n                                                  \"LAMBDA (i: below(N)): IF i < N - jb!1 THEN (ls - dvs!1)(i) ELSE FALSE ENDIF\"\n                                                  \"N - jb!1\")\n                                                 ((\"1\"\n                                                   (assert)\n                                                   ((\"1\"\n                                                     (split)\n                                                     ((\"1\"\n                                                       (replace*)\n                                                       ((\"1\"\n                                                         (case-replace\n                                                          \"((LAMBDA (i: below(N)): IF i < N - jb!1 THEN (ls - dvs!1)(i) ELSE FALSE ENDIF) ^ (N - 1 - jb!1, 0)) = (ls - dvs!1) ^ (N - 1 - jb!1, 0)\")\n                                                         ((\"1\"\n                                                           (expand \"-\")\n                                                           ((\"1\"\n                                                             (rewrite\n                                                              \"bv_add_caret\")\n                                                             ((\"1\"\n                                                               (rewrite\n                                                                \"bv_caret_negate\")\n                                                               ((\"1\"\n                                                                 (rewrite\n                                                                  \"-\"\n                                                                  :dir\n                                                                  rl)\n                                                                 ((\"1\"\n                                                                   (rewrite\n                                                                    \"bv2nat_minus3\")\n                                                                   ((\"1\"\n                                                                     (assert)\n                                                                     nil\n                                                                     nil))\n                                                                   nil))\n                                                                 nil))\n                                                               nil))\n                                                             nil))\n                                                           nil)\n                                                          (\"2\"\n                                                           (hide-all-but\n                                                            1)\n                                                           ((\"2\"\n                                                             (grind-with-ext)\n                                                             nil\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil)\n                                                      (\"2\"\n                                                       (hide\n                                                        -1\n                                                        -2\n                                                        -4\n                                                        3)\n                                                       ((\"2\"\n                                                         (use\n                                                          \"bv2nat_upperbound[N]\")\n                                                         ((\"2\"\n                                                           (assert)\n                                                           ((\"2\"\n                                                             (skosimp)\n                                                             ((\"2\"\n                                                               (assert)\n                                                               nil\n                                                               nil))\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil)\n                                        (\"2\"\n                                         (hide -1 -2 -4 3)\n                                         ((\"2\"\n                                           (assert)\n                                           ((\"2\"\n                                             (use\n                                              \"bv2nat_upperbound[N]\")\n                                             ((\"2\"\n                                               (assert)\n                                               ((\"2\"\n                                                 (skosimp)\n                                                 ((\"2\"\n                                                   (expand \"ls\")\n                                                   ((\"2\"\n                                                     (assert)\n                                                     nil\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil)\n                                  (\"2\"\n                                   (hide-all-but 1)\n                                   ((\"2\"\n                                     (expand \"ls\")\n                                     ((\"2\" (grind-with-ext) nil nil))\n                                     nil))\n                                   nil))\n                                 nil)\n                                (\"2\"\n                                 (hide -1 -3 2)\n                                 ((\"2\"\n                                   (use \"bv2nat_upperbound[N]\")\n                                   ((\"2\"\n                                     (assert)\n                                     ((\"2\"\n                                       (skosimp)\n                                       ((\"2\" (assert) nil nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil)\n                (\"2\" (assert) nil nil) (\"3\" (assert) nil nil))\n               nil))\n             nil)\n            (\"2\" (flatten)\n             ((\"2\" (assert)\n               ((\"2\" (inst?)\n                 ((\"2\" (expand \"<\") ((\"2\" (propax) nil nil)) nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"div_divrem_mem_TCC1","label":"obligation","definition":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"div_divrem_mem","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"div","theory":"BitvectorOneComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},{"tag":"project","argument":{"tag":"apply","operator":{"tag":"constant","id":"divrem_mem","theory":"BitvectorOneComplementDivision","type":{"typehash":"d7dc2f714a1fce0970ff612d40474b343adf5e2b"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"fill","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"30bf94d35b333e4090fb1ff869405e24e5d8e718"}},"argument":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"fill","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"30bf94d35b333e4090fb1ff869405e24e5d8e718"}},"argument":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}},"index":2}]}}},"proof":{"tag":"proof-info","script":"(\"\" (skolem!)\n ((\"\" (expand \"div\")\n   ((\"\" (use \"divrem_mem_first_second_third\")\n     ((\"\" (expand \"fill\") ((\"\" (assert) nil nil)) nil)) nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"rem_divrem_mem","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"rem","theory":"BitvectorOneComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},{"tag":"project","argument":{"tag":"apply","operator":{"tag":"constant","id":"divrem_mem","theory":"BitvectorOneComplementDivision","type":{"typehash":"d7dc2f714a1fce0970ff612d40474b343adf5e2b"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"fill","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"30bf94d35b333e4090fb1ff869405e24e5d8e718"}},"argument":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"fill","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"30bf94d35b333e4090fb1ff869405e24e5d8e718"}},"argument":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}},"index":3}]}}},"proof":{"tag":"proof-info","script":"(\"\" (skolem!)\n ((\"\" (expand \"rem\")\n   ((\"\" (use \"divrem_mem_first_second_third\")\n     ((\"\" (expand \"fill\") ((\"\" (assert) nil nil)) nil)) nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"divrem_mem_invariant","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}],"expression":{"tag":"let","bindings":[{"tag":"let-binding","id":"start_n","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},"expr":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}}},"else":{"tag":"apply","operator":{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}}}}}],"body":{"tag":"let","bindings":[{"tag":"let-binding","id":"quot_n","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},"expr":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}},"else":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}}}],"body":{"tag":"let","bindings":[{"tag":"let-binding","id":"rem_n","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},"expr":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}],"expression":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},"then":{"tag":"apply","operator":{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}},{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}}]}}},"else":{"tag":"apply","operator":{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}}}}}],"body":{"tag":"let","bindings":[{"tag":"let-binding","id":"drm","type":{"typehash":"0e62cad1a909071b121ca09d0454c9c3deb64003"},"expr":{"tag":"apply","operator":{"tag":"constant","id":"divrem_mem","theory":"BitvectorOneComplementDivision","type":{"typehash":"d7dc2f714a1fce0970ff612d40474b343adf5e2b"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"aux","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"quot","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"rem","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}}],"body":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"start_n","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"quot_n","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"rem_n","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"project","argument":{"tag":"variable","id":"drm","type":{"typehash":"0e62cad1a909071b121ca09d0454c9c3deb64003"}},"index":1}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"project","argument":{"tag":"variable","id":"drm","type":{"typehash":"0e62cad1a909071b121ca09d0454c9c3deb64003"}},"index":2}}]}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"project","argument":{"tag":"variable","id":"drm","type":{"typehash":"0e62cad1a909071b121ca09d0454c9c3deb64003"}},"index":3}}]}}]}}]}}}}}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (assert)\n   ((\"\" (induct \"n\")\n     ((\"1\" (skosimp*)\n       ((\"1\" (expand \"divrem_mem\")\n         ((\"1\" (assert)\n           ((\"1\"\n             (case-replace \"(LAMBDA (i: below(N)): aux!1(i)) = aux!1\")\n             ((\"1\"\n               (case-replace\n                \"(LAMBDA (i: below(N)): rem!1(i)) = rem!1\")\n               ((\"1\"\n                 (case-replace\n                  \"(LAMBDA (i: below(N)): quot!1(i)) = quot!1\")\n                 ((\"1\" (expand \"exp2\") ((\"1\" (propax) nil nil)) nil)\n                  (\"2\" (apply-extensionality) nil nil))\n                 nil)\n                (\"2\" (apply-extensionality) nil nil))\n               nil)\n              (\"2\" (apply-extensionality) nil nil))\n             nil))\n           nil))\n         nil))\n       nil)\n      (\"2\" (skosimp*)\n       ((\"2\" (expand \"divrem_mem\" +)\n         ((\"2\" (lift-if)\n           ((\"2\" (split)\n             ((\"1\" (flatten)\n               ((\"1\" (assert)\n                 ((\"1\" (inst?)\n                   ((\"1\" (assert)\n                     ((\"1\" (hide 1)\n                       ((\"1\"\n                         (case-replace\n                          \"(LAMBDA (i: below(N)): IF i < 1 + jb!1 THEN quot!1(i - 1 + N - jb!1) ELSE aux!1(i - 1 - jb!1) ENDIF) = (LAMBDA (i: below(N)): IF i < jb!1 THEN left_shift(1, quot!1)(i + N - jb!1) ELSE left_shift(1, aux!1) WITH [(0) := quot!1(N - 1)](i - jb!1) ENDIF)\")\n                         ((\"1\" (replace -4)\n                           ((\"1\" (hide -1 -4)\n                             ((\"1\" (assert)\n                               ((\"1\"\n                                 (expand \"exp2\" 1 1)\n                                 ((\"1\"\n                                   (case-replace\n                                    \"(LAMBDA (i: below(N)): IF i < N - jb!1 THEN left_shift(1, quot!1) WITH [(0) := TRUE](i) ELSE FALSE ENDIF) = left_shift(1, (LAMBDA (i: below(N)): IF i < N - 1 - jb!1 THEN quot!1(i) ELSE FALSE ENDIF)) WITH [(0) := TRUE]\")\n                                   ((\"1\"\n                                     (hide -1)\n                                     ((\"1\"\n                                       (rewrite \"leftshift_with\" +)\n                                       ((\"1\"\n                                         (assert)\n                                         ((\"1\"\n                                           (expand \"b2n\")\n                                           ((\"1\"\n                                             (lemma \"bv2nat_split\")\n                                             ((\"1\"\n                                               (inst-cp\n                                                -\n                                                \"quot!1\"\n                                                \"rem!1\"\n                                                \"1 + jb!1\")\n                                               ((\"1\"\n                                                 (assert)\n                                                 ((\"1\"\n                                                   (replace -2)\n                                                   ((\"1\"\n                                                     (hide -2)\n                                                     ((\"1\"\n                                                       (inst\n                                                        -\n                                                        \"left_shift(1, quot!1)\"\n                                                        \"left_shift(1, rem!1) WITH [(0) := quot!1(N - 1)] - dvs!1\"\n                                                        \"jb!1\")\n                                                       ((\"1\"\n                                                         (hide -1)\n                                                         ((\"1\"\n                                                           (expand\n                                                            \"exp2\"\n                                                            1\n                                                            1)\n                                                           ((\"1\"\n                                                             (name-replace\n                                                              \"lsrem\"\n                                                              \"(LAMBDA (i: below(N)): IF i < N - jb!1 THEN left_shift(1, rem!1) WITH [(0) := quot!1(N - 1)](i) ELSE FALSE ENDIF)\")\n                                                             ((\"1\"\n                                                               (lemma\n                                                                \"bv2nat_split\")\n                                                               ((\"1\"\n                                                                 (inst\n                                                                  -\n                                                                  \"left_shift(1, quot!1)\"\n                                                                  \"lsrem - dvs!1\"\n                                                                  \"jb!1\")\n                                                                 ((\"1\"\n                                                                   (replace\n                                                                    -1)\n                                                                   ((\"1\"\n                                                                     (hide\n                                                                      -1)\n                                                                     ((\"1\"\n                                                                       (assert)\n                                                                       ((\"1\"\n                                                                         (case-replace\n                                                                          \"bv2nat[N](LAMBDA (i: below(N)): IF i < N - jb!1 THEN (lsrem - dvs!1)(i) ELSE FALSE ENDIF) = bv2nat[N](lsrem) - bv2nat[N](dvs!1)\")\n                                                                         ((\"1\"\n                                                                           (hide\n                                                                            -1\n                                                                            -2)\n                                                                           ((\"1\"\n                                                                             (assert)\n                                                                             ((\"1\"\n                                                                               (expand\n                                                                                \"lsrem\")\n                                                                               ((\"1\"\n                                                                                 (case-replace\n                                                                                  \"bv2nat[N]((LAMBDA (i: below(N)): IF i < N - jb!1 THEN left_shift(1, rem!1) WITH [(0) := quot!1(N - 1)](i) ELSE FALSE ENDIF)) = 2 * (bv2nat[N](LAMBDA (i: below(N)): IF i < N - 1 - jb!1 THEN rem!1(i) ELSE FALSE ENDIF)) + b2n(quot!1(N - 1))\")\n                                                                                 ((\"1\"\n                                                                                   (assert)\n                                                                                   ((\"1\"\n                                                                                     (hide\n                                                                                      -1)\n                                                                                     ((\"1\"\n                                                                                       (case-replace\n                                                                                        \"jb!1 = 0\")\n                                                                                       ((\"1\"\n                                                                                         (assert)\n                                                                                         ((\"1\"\n                                                                                           (lemma\n                                                                                            \"bv2nat_fill_F[N]\")\n                                                                                           ((\"1\"\n                                                                                             (expand\n                                                                                              \"fill\")\n                                                                                             ((\"1\"\n                                                                                               (replace\n                                                                                                -1)\n                                                                                               ((\"1\"\n                                                                                                 (hide\n                                                                                                  -1)\n                                                                                                 ((\"1\"\n                                                                                                   (expand\n                                                                                                    \"exp2\")\n                                                                                                   ((\"1\"\n                                                                                                     (assert)\n                                                                                                     ((\"1\"\n                                                                                                       (rewrite\n                                                                                                        \"bv2nat_lem\")\n                                                                                                       ((\"1\"\n                                                                                                         (expand\n                                                                                                          \"^\")\n                                                                                                         ((\"1\"\n                                                                                                           (lemma\n                                                                                                            \"bv2nat_fill_F[N - 1]\")\n                                                                                                           ((\"1\"\n                                                                                                             (expand\n                                                                                                              \"fill\")\n                                                                                                             ((\"1\"\n                                                                                                               (assert)\n                                                                                                               nil\n                                                                                                               nil))\n                                                                                                             nil))\n                                                                                                           nil))\n                                                                                                         nil)\n                                                                                                        (\"2\"\n                                                                                                         (skosimp)\n                                                                                                         ((\"2\"\n                                                                                                           (assert)\n                                                                                                           nil\n                                                                                                           nil))\n                                                                                                         nil))\n                                                                                                       nil))\n                                                                                                     nil))\n                                                                                                   nil))\n                                                                                                 nil))\n                                                                                               nil))\n                                                                                             nil))\n                                                                                           nil))\n                                                                                         nil)\n                                                                                        (\"2\"\n                                                                                         (assert)\n                                                                                         ((\"2\"\n                                                                                           (rewrite\n                                                                                            \"bv2nat_as_sum[N]\")\n                                                                                           ((\"1\"\n                                                                                             (rewrite\n                                                                                              \"bv2nat_as_sum[N]\")\n                                                                                             ((\"1\"\n                                                                                               (lemma\n                                                                                                \"sigma_split\")\n                                                                                               ((\"1\"\n                                                                                                 (inst\n                                                                                                  -\n                                                                                                  \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < jb!1 THEN b2n(left_shift(1, quot!1)(ii + N - jb!1)) ELSE b2n(FALSE) ENDIF)\"\n                                                                                                  \"N - 1\"\n                                                                                                  0\n                                                                                                  \"jb!1 - 1\")\n                                                                                                 ((\"1\"\n                                                                                                   (assert)\n                                                                                                   ((\"1\"\n                                                                                                     (case-replace\n                                                                                                      \"sigma(jb!1, N - 1, extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < jb!1 THEN b2n(left_shift(1, quot!1)(ii + N - jb!1)) ELSE b2n(FALSE) ENDIF)) = 0\")\n                                                                                                     ((\"1\"\n                                                                                                       (replace\n                                                                                                        -2)\n                                                                                                       ((\"1\"\n                                                                                                         (hide\n                                                                                                          -1\n                                                                                                          -2)\n                                                                                                         ((\"1\"\n                                                                                                           (case-replace\n                                                                                                            \"jb!1 = N - 1\")\n                                                                                                           ((\"1\"\n                                                                                                             (assert)\n                                                                                                             ((\"1\"\n                                                                                                               (expand\n                                                                                                                \"sigma\"\n                                                                                                                2\n                                                                                                                1)\n                                                                                                               ((\"1\"\n                                                                                                                 (expand\n                                                                                                                  \"extend\"\n                                                                                                                  2\n                                                                                                                  1)\n                                                                                                                 ((\"1\"\n                                                                                                                   (assert)\n                                                                                                                   ((\"1\"\n                                                                                                                     (lemma\n                                                                                                                      \"sigma_restrict_eq\")\n                                                                                                                     ((\"1\"\n                                                                                                                       (inst\n                                                                                                                        -\n                                                                                                                        \"extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(quot!1(ii)))\"\n                                                                                                                        \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - 1 THEN b2n(left_shift(1, quot!1)(1 + ii)) ELSE b2n(FALSE) ENDIF)\"\n                                                                                                                        \"N - 2\"\n                                                                                                                        0)\n                                                                                                                       ((\"1\"\n                                                                                                                         (assert)\n                                                                                                                         ((\"1\"\n                                                                                                                           (hide-all-but\n                                                                                                                            1)\n                                                                                                                           ((\"1\"\n                                                                                                                             (grind-with-ext)\n                                                                                                                             nil\n                                                                                                                             nil))\n                                                                                                                           nil))\n                                                                                                                         nil)\n                                                                                                                        (\"2\"\n                                                                                                                         (skosimp)\n                                                                                                                         ((\"2\"\n                                                                                                                           (assert)\n                                                                                                                           nil\n                                                                                                                           nil))\n                                                                                                                         nil))\n                                                                                                                       nil))\n                                                                                                                     nil))\n                                                                                                                   nil))\n                                                                                                                 nil))\n                                                                                                               nil))\n                                                                                                             nil)\n                                                                                                            (\"2\"\n                                                                                                             (lemma\n                                                                                                              \"sigma_split\")\n                                                                                                             ((\"2\"\n                                                                                                               (inst\n                                                                                                                -\n                                                                                                                \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < 1 + jb!1 THEN b2n(quot!1(ii - 1 + N - jb!1)) ELSE b2n(FALSE) ENDIF)\"\n                                                                                                                \"N - 1\"\n                                                                                                                0\n                                                                                                                \"jb!1\")\n                                                                                                               ((\"1\"\n                                                                                                                 (assert)\n                                                                                                                 ((\"1\"\n                                                                                                                   (case-replace\n                                                                                                                    \"sigma(1 + jb!1, N - 1, extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < 1 + jb!1 THEN b2n(quot!1(ii - 1 + N - jb!1)) ELSE b2n(FALSE) ENDIF)) = 0\")\n                                                                                                                   ((\"1\"\n                                                                                                                     (replace\n                                                                                                                      -2)\n                                                                                                                     ((\"1\"\n                                                                                                                       (hide\n                                                                                                                        -1\n                                                                                                                        -2)\n                                                                                                                       ((\"1\"\n                                                                                                                         (expand\n                                                                                                                          \"sigma\"\n                                                                                                                          3\n                                                                                                                          1)\n                                                                                                                         ((\"1\"\n                                                                                                                           (expand\n                                                                                                                            \"extend\"\n                                                                                                                            3\n                                                                                                                            1)\n                                                                                                                           ((\"1\"\n                                                                                                                             (assert)\n                                                                                                                             ((\"1\"\n                                                                                                                               (lemma\n                                                                                                                                \"sigma_restrict_eq\")\n                                                                                                                               ((\"1\"\n                                                                                                                                 (inst\n                                                                                                                                  -\n                                                                                                                                  \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < 1 + jb!1 THEN b2n(quot!1(ii - 1 + N - jb!1)) ELSE b2n(FALSE) ENDIF)\"\n                                                                                                                                  \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < jb!1 THEN b2n(left_shift(1, quot!1)(ii + N - jb!1)) ELSE b2n(FALSE) ENDIF)\"\n                                                                                                                                  \"jb!1 - 1\"\n                                                                                                                                  0)\n                                                                                                                                 ((\"1\"\n                                                                                                                                   (assert)\n                                                                                                                                   ((\"1\"\n                                                                                                                                     (hide-all-but\n                                                                                                                                      1)\n                                                                                                                                     ((\"1\"\n                                                                                                                                       (grind-with-ext)\n                                                                                                                                       nil\n                                                                                                                                       nil))\n                                                                                                                                     nil))\n                                                                                                                                   nil)\n                                                                                                                                  (\"2\"\n                                                                                                                                   (skosimp)\n                                                                                                                                   ((\"2\"\n                                                                                                                                     (assert)\n                                                                                                                                     nil\n                                                                                                                                     nil))\n                                                                                                                                   nil)\n                                                                                                                                  (\"3\"\n                                                                                                                                   (skosimp)\n                                                                                                                                   ((\"3\"\n                                                                                                                                     (assert)\n                                                                                                                                     nil\n                                                                                                                                     nil))\n                                                                                                                                   nil))\n                                                                                                                                 nil))\n                                                                                                                               nil))\n                                                                                                                             nil))\n                                                                                                                           nil))\n                                                                                                                         nil))\n                                                                                                                       nil))\n                                                                                                                     nil)\n                                                                                                                    (\"2\"\n                                                                                                                     (hide\n                                                                                                                      -1\n                                                                                                                      4)\n                                                                                                                     ((\"2\"\n                                                                                                                       (lemma\n                                                                                                                        \"sigma_mult\")\n                                                                                                                       ((\"2\"\n                                                                                                                         (inst?)\n                                                                                                                         ((\"1\"\n                                                                                                                           (inst\n                                                                                                                            -\n                                                                                                                            0)\n                                                                                                                           ((\"1\"\n                                                                                                                             (lemma\n                                                                                                                              \"sigma_restrict_eq\")\n                                                                                                                             ((\"1\"\n                                                                                                                               (inst\n                                                                                                                                -\n                                                                                                                                \"LAMBDA (n: nat): 0 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < 1 + jb!1 THEN b2n(quot!1(ii - 1 + N - jb!1)) ELSE b2n(FALSE) ENDIF)(n)\"\n                                                                                                                                \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < 1 + jb!1 THEN b2n(quot!1(ii - 1 + N - jb!1)) ELSE b2n(FALSE) ENDIF)\"\n                                                                                                                                \"N - 1\"\n                                                                                                                                \"1 + jb!1\")\n                                                                                                                               ((\"1\"\n                                                                                                                                 (assert)\n                                                                                                                                 ((\"1\"\n                                                                                                                                   (hide-all-but\n                                                                                                                                    1)\n                                                                                                                                   ((\"1\"\n                                                                                                                                     (grind-with-ext)\n                                                                                                                                     nil\n                                                                                                                                     nil))\n                                                                                                                                   nil))\n                                                                                                                                 nil)\n                                                                                                                                (\"2\"\n                                                                                                                                 (skosimp)\n                                                                                                                                 ((\"2\"\n                                                                                                                                   (assert)\n                                                                                                                                   nil\n                                                                                                                                   nil))\n                                                                                                                                 nil))\n                                                                                                                               nil))\n                                                                                                                             nil))\n                                                                                                                           nil)\n                                                                                                                          (\"2\"\n                                                                                                                           (skosimp)\n                                                                                                                           ((\"2\"\n                                                                                                                             (assert)\n                                                                                                                             nil\n                                                                                                                             nil))\n                                                                                                                           nil))\n                                                                                                                         nil))\n                                                                                                                       nil))\n                                                                                                                     nil)\n                                                                                                                    (\"3\"\n                                                                                                                     (skosimp)\n                                                                                                                     ((\"3\"\n                                                                                                                       (assert)\n                                                                                                                       nil\n                                                                                                                       nil))\n                                                                                                                     nil))\n                                                                                                                   nil))\n                                                                                                                 nil)\n                                                                                                                (\"2\"\n                                                                                                                 (skosimp)\n                                                                                                                 ((\"2\"\n                                                                                                                   (assert)\n                                                                                                                   nil\n                                                                                                                   nil))\n                                                                                                                 nil))\n                                                                                                               nil))\n                                                                                                             nil))\n                                                                                                           nil))\n                                                                                                         nil))\n                                                                                                       nil)\n                                                                                                      (\"2\"\n                                                                                                       (hide\n                                                                                                        -1\n                                                                                                        3)\n                                                                                                       ((\"2\"\n                                                                                                         (lemma\n                                                                                                          \"sigma_mult\")\n                                                                                                         ((\"2\"\n                                                                                                           (inst?)\n                                                                                                           ((\"1\"\n                                                                                                             (inst\n                                                                                                              -\n                                                                                                              0)\n                                                                                                             ((\"1\"\n                                                                                                               (lemma\n                                                                                                                \"sigma_restrict_eq\")\n                                                                                                               ((\"1\"\n                                                                                                                 (inst\n                                                                                                                  -\n                                                                                                                  \"LAMBDA (n: nat): 0 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < jb!1 THEN b2n(left_shift(1, quot!1)(ii + N - jb!1)) ELSE b2n(FALSE) ENDIF)(n)\"\n                                                                                                                  \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < jb!1 THEN b2n(left_shift(1, quot!1)(ii + N - jb!1)) ELSE b2n(FALSE) ENDIF)\"\n                                                                                                                  \"N - 1\"\n                                                                                                                  \"jb!1\")\n                                                                                                                 ((\"1\"\n                                                                                                                   (assert)\n                                                                                                                   ((\"1\"\n                                                                                                                     (hide-all-but\n                                                                                                                      1)\n                                                                                                                     ((\"1\"\n                                                                                                                       (grind-with-ext)\n                                                                                                                       nil\n                                                                                                                       nil))\n                                                                                                                     nil))\n                                                                                                                   nil)\n                                                                                                                  (\"2\"\n                                                                                                                   (skosimp)\n                                                                                                                   ((\"2\"\n                                                                                                                     (assert)\n                                                                                                                     nil\n                                                                                                                     nil))\n                                                                                                                   nil))\n                                                                                                                 nil))\n                                                                                                               nil))\n                                                                                                             nil)\n                                                                                                            (\"2\"\n                                                                                                             (skosimp)\n                                                                                                             ((\"2\"\n                                                                                                               (assert)\n                                                                                                               nil\n                                                                                                               nil))\n                                                                                                             nil))\n                                                                                                           nil))\n                                                                                                         nil))\n                                                                                                       nil)\n                                                                                                      (\"3\"\n                                                                                                       (skosimp)\n                                                                                                       ((\"3\"\n                                                                                                         (assert)\n                                                                                                         nil\n                                                                                                         nil))\n                                                                                                       nil))\n                                                                                                     nil))\n                                                                                                   nil)\n                                                                                                  (\"2\"\n                                                                                                   (skosimp)\n                                                                                                   ((\"2\"\n                                                                                                     (assert)\n                                                                                                     nil\n                                                                                                     nil))\n                                                                                                   nil))\n                                                                                                 nil))\n                                                                                               nil)\n                                                                                              (\"2\"\n                                                                                               (skosimp)\n                                                                                               ((\"2\"\n                                                                                                 (assert)\n                                                                                                 nil\n                                                                                                 nil))\n                                                                                               nil))\n                                                                                             nil)\n                                                                                            (\"2\"\n                                                                                             (skosimp)\n                                                                                             ((\"2\"\n                                                                                               (assert)\n                                                                                               nil\n                                                                                               nil))\n                                                                                             nil))\n                                                                                           nil))\n                                                                                         nil))\n                                                                                       nil))\n                                                                                     nil))\n                                                                                   nil)\n                                                                                  (\"2\"\n                                                                                   (hide\n                                                                                    2)\n                                                                                   ((\"2\"\n                                                                                     (rewrite\n                                                                                      \"bv2nat_as_sum[N]\")\n                                                                                     ((\"2\"\n                                                                                       (rewrite\n                                                                                        \"bv2nat_as_sum[N]\")\n                                                                                       ((\"2\"\n                                                                                         (use\n                                                                                          \"sigma_mult\")\n                                                                                         ((\"2\"\n                                                                                           (replace\n                                                                                            -1\n                                                                                            *\n                                                                                            rl)\n                                                                                           ((\"2\"\n                                                                                             (hide\n                                                                                              -1)\n                                                                                             ((\"2\"\n                                                                                               (case-replace\n                                                                                                \"jb!1 = 0\")\n                                                                                               ((\"1\"\n                                                                                                 (assert)\n                                                                                                 ((\"1\"\n                                                                                                   (lemma\n                                                                                                    \"sigma_split\")\n                                                                                                   ((\"1\"\n                                                                                                     (inst\n                                                                                                      -\n                                                                                                      \"extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(left_shift(1, rem!1) WITH [(0) := quot!1(N - 1)](ii)))\"\n                                                                                                      \"N - 1\"\n                                                                                                      0\n                                                                                                      0)\n                                                                                                     ((\"1\"\n                                                                                                       (assert)\n                                                                                                       ((\"1\"\n                                                                                                         (expand\n                                                                                                          \"sigma\"\n                                                                                                          -1\n                                                                                                          2)\n                                                                                                         ((\"1\"\n                                                                                                           (expand\n                                                                                                            \"extend\"\n                                                                                                            -1\n                                                                                                            2)\n                                                                                                           ((\"1\"\n                                                                                                             (expand\n                                                                                                              \"exp2\"\n                                                                                                              -1\n                                                                                                              3)\n                                                                                                             ((\"1\"\n                                                                                                               (replace\n                                                                                                                -1)\n                                                                                                               ((\"1\"\n                                                                                                                 (hide\n                                                                                                                  -1)\n                                                                                                                 ((\"1\"\n                                                                                                                   (expand\n                                                                                                                    \"sigma\"\n                                                                                                                    1\n                                                                                                                    2)\n                                                                                                                   ((\"1\"\n                                                                                                                     (expand\n                                                                                                                      \"extend\"\n                                                                                                                      1\n                                                                                                                      2)\n                                                                                                                     ((\"1\"\n                                                                                                                       (expand\n                                                                                                                        \"b2n\"\n                                                                                                                        1\n                                                                                                                        6)\n                                                                                                                       ((\"1\"\n                                                                                                                         (lemma\n                                                                                                                          \"sigma_shift\")\n                                                                                                                         ((\"1\"\n                                                                                                                           (inst\n                                                                                                                            -\n                                                                                                                            \"extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(left_shift(1, rem!1) WITH [(0) := quot!1(N - 1)](ii)))\"\n                                                                                                                            \"N - 2\"\n                                                                                                                            0\n                                                                                                                            1)\n                                                                                                                           ((\"1\"\n                                                                                                                             (assert)\n                                                                                                                             ((\"1\"\n                                                                                                                               (replace\n                                                                                                                                -1)\n                                                                                                                               ((\"1\"\n                                                                                                                                 (hide\n                                                                                                                                  -1)\n                                                                                                                                 ((\"1\"\n                                                                                                                                   (lemma\n                                                                                                                                    \"sigma_restrict_eq\")\n                                                                                                                                   ((\"1\"\n                                                                                                                                     (inst\n                                                                                                                                      -\n                                                                                                                                      \"LAMBDA (n: nat): extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(left_shift(1, rem!1) WITH [(0) := quot!1(N - 1)](ii)))(1 + n)\"\n                                                                                                                                      \"LAMBDA (n: nat): 2 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - 1 THEN b2n(rem!1(ii)) ELSE b2n(FALSE) ENDIF)(n)\"\n                                                                                                                                      \"N - 2\"\n                                                                                                                                      0)\n                                                                                                                                     ((\"1\"\n                                                                                                                                       (assert)\n                                                                                                                                       ((\"1\"\n                                                                                                                                         (hide-all-but\n                                                                                                                                          1)\n                                                                                                                                         ((\"1\"\n                                                                                                                                           (grind-with-ext)\n                                                                                                                                           nil\n                                                                                                                                           nil))\n                                                                                                                                         nil))\n                                                                                                                                       nil))\n                                                                                                                                     nil))\n                                                                                                                                   nil))\n                                                                                                                                 nil))\n                                                                                                                               nil))\n                                                                                                                             nil))\n                                                                                                                           nil))\n                                                                                                                         nil))\n                                                                                                                       nil))\n                                                                                                                     nil))\n                                                                                                                   nil))\n                                                                                                                 nil))\n                                                                                                               nil))\n                                                                                                             nil))\n                                                                                                           nil))\n                                                                                                         nil))\n                                                                                                       nil))\n                                                                                                     nil))\n                                                                                                   nil))\n                                                                                                 nil)\n                                                                                                (\"2\"\n                                                                                                 (lemma\n                                                                                                  \"sigma_split\")\n                                                                                                 ((\"2\"\n                                                                                                   (inst\n                                                                                                    -\n                                                                                                    \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - jb!1 THEN b2n(left_shift(1, rem!1) WITH [(0) := quot!1(N - 1)](ii)) ELSE b2n(FALSE) ENDIF)\"\n                                                                                                    \"N - 1\"\n                                                                                                    0\n                                                                                                    \"N - jb!1 - 1\")\n                                                                                                   ((\"2\"\n                                                                                                     (assert)\n                                                                                                     ((\"2\"\n                                                                                                       (case-replace\n                                                                                                        \"sigma(N - jb!1, N - 1, extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - jb!1 THEN b2n(left_shift(1, rem!1) WITH [(0) := quot!1(N - 1)](ii)) ELSE b2n(FALSE) ENDIF)) = 0\")\n                                                                                                       ((\"1\"\n                                                                                                         (replace\n                                                                                                          -2)\n                                                                                                         ((\"1\"\n                                                                                                           (hide\n                                                                                                            -1\n                                                                                                            -2)\n                                                                                                           ((\"1\"\n                                                                                                             (assert)\n                                                                                                             ((\"1\"\n                                                                                                               (case-replace\n                                                                                                                \"jb!1 = N - 1\")\n                                                                                                               ((\"1\"\n                                                                                                                 (assert)\n                                                                                                                 ((\"1\"\n                                                                                                                   (expand\n                                                                                                                    \"sigma\"\n                                                                                                                    2\n                                                                                                                    1)\n                                                                                                                   ((\"1\"\n                                                                                                                     (expand\n                                                                                                                      \"extend\"\n                                                                                                                      2\n                                                                                                                      1)\n                                                                                                                     ((\"1\"\n                                                                                                                       (expand\n                                                                                                                        \"exp2\"\n                                                                                                                        2\n                                                                                                                        1)\n                                                                                                                       ((\"1\"\n                                                                                                                         (assert)\n                                                                                                                         ((\"1\"\n                                                                                                                           (lemma\n                                                                                                                            \"sigma_mult\")\n                                                                                                                           ((\"1\"\n                                                                                                                             (inst\n                                                                                                                              -\n                                                                                                                              \"LAMBDA (n: nat): 2 * extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(FALSE))(n)\"\n                                                                                                                              \"N - 1\"\n                                                                                                                              0\n                                                                                                                              0)\n                                                                                                                             ((\"1\"\n                                                                                                                               (lemma\n                                                                                                                                \"sigma_restrict_eq\")\n                                                                                                                               ((\"1\"\n                                                                                                                                 (inst\n                                                                                                                                  -\n                                                                                                                                  \"LAMBDA (n: nat): 0 * (2 * extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(FALSE))(n))\"\n                                                                                                                                  \"LAMBDA (n: nat): 2 * extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(FALSE))(n)\"\n                                                                                                                                  \"N - 1\"\n                                                                                                                                  0)\n                                                                                                                                 ((\"1\"\n                                                                                                                                   (assert)\n                                                                                                                                   ((\"1\"\n                                                                                                                                     (hide-all-but\n                                                                                                                                      1)\n                                                                                                                                     ((\"1\"\n                                                                                                                                       (grind-with-ext)\n                                                                                                                                       nil\n                                                                                                                                       nil))\n                                                                                                                                     nil))\n                                                                                                                                   nil))\n                                                                                                                                 nil))\n                                                                                                                               nil))\n                                                                                                                             nil))\n                                                                                                                           nil))\n                                                                                                                         nil))\n                                                                                                                       nil))\n                                                                                                                     nil))\n                                                                                                                   nil))\n                                                                                                                 nil)\n                                                                                                                (\"2\"\n                                                                                                                 (lemma\n                                                                                                                  \"sigma_split\")\n                                                                                                                 ((\"2\"\n                                                                                                                   (inst\n                                                                                                                    -\n                                                                                                                    \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - jb!1 THEN b2n(left_shift(1, rem!1) WITH [(0) := quot!1(N - 1)](ii)) ELSE b2n(FALSE) ENDIF)\"\n                                                                                                                    \"N - 1 - jb!1\"\n                                                                                                                    0\n                                                                                                                    0)\n                                                                                                                   ((\"2\"\n                                                                                                                     (assert)\n                                                                                                                     ((\"2\"\n                                                                                                                       (expand\n                                                                                                                        \"sigma\"\n                                                                                                                        -1\n                                                                                                                        2)\n                                                                                                                       ((\"2\"\n                                                                                                                         (expand\n                                                                                                                          \"extend\"\n                                                                                                                          -1\n                                                                                                                          2)\n                                                                                                                         ((\"2\"\n                                                                                                                           (replace\n                                                                                                                            -1)\n                                                                                                                           ((\"2\"\n                                                                                                                             (hide\n                                                                                                                              -1)\n                                                                                                                             ((\"2\"\n                                                                                                                               (expand\n                                                                                                                                \"exp2\"\n                                                                                                                                3\n                                                                                                                                2)\n                                                                                                                               ((\"2\"\n                                                                                                                                 (assert)\n                                                                                                                                 ((\"2\"\n                                                                                                                                   (lemma\n                                                                                                                                    \"sigma_split\")\n                                                                                                                                   ((\"2\"\n                                                                                                                                     (inst\n                                                                                                                                      -\n                                                                                                                                      \"LAMBDA (n: nat): 2 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - 1 - jb!1 THEN b2n(rem!1(ii)) ELSE b2n(FALSE) ENDIF)(n)\"\n                                                                                                                                      \"N - 1\"\n                                                                                                                                      0\n                                                                                                                                      \"N - 2 - jb!1\")\n                                                                                                                                     ((\"2\"\n                                                                                                                                       (assert)\n                                                                                                                                       ((\"2\"\n                                                                                                                                         (case-replace\n                                                                                                                                          \"sigma(N - 1 - jb!1, N - 1, LAMBDA (n: nat): 2 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - 1 - jb!1 THEN b2n(rem!1(ii)) ELSE b2n(FALSE) ENDIF)(n)) = 0\")\n                                                                                                                                         ((\"1\"\n                                                                                                                                           (replace\n                                                                                                                                            -2)\n                                                                                                                                           ((\"1\"\n                                                                                                                                             (hide\n                                                                                                                                              -1\n                                                                                                                                              -2)\n                                                                                                                                             ((\"1\"\n                                                                                                                                               (lemma\n                                                                                                                                                \"sigma_shift\")\n                                                                                                                                               ((\"1\"\n                                                                                                                                                 (inst\n                                                                                                                                                  -\n                                                                                                                                                  \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - jb!1 THEN b2n(left_shift(1, rem!1) WITH [(0) := quot!1(N - 1)](ii)) ELSE b2n(FALSE) ENDIF)\"\n                                                                                                                                                  \"N - 2 - jb!1\"\n                                                                                                                                                  0\n                                                                                                                                                  1)\n                                                                                                                                                 ((\"1\"\n                                                                                                                                                   (assert)\n                                                                                                                                                   ((\"1\"\n                                                                                                                                                     (replace\n                                                                                                                                                      -1)\n                                                                                                                                                     ((\"1\"\n                                                                                                                                                       (hide\n                                                                                                                                                        -1)\n                                                                                                                                                       ((\"1\"\n                                                                                                                                                         (lemma\n                                                                                                                                                          \"sigma_restrict_eq\")\n                                                                                                                                                         ((\"1\"\n                                                                                                                                                           (inst\n                                                                                                                                                            -\n                                                                                                                                                            \"LAMBDA (n: nat): extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - jb!1 THEN b2n(left_shift(1, rem!1) WITH [(0) := quot!1(N - 1)](ii)) ELSE b2n(FALSE) ENDIF)(1 + n)\"\n                                                                                                                                                            \"LAMBDA (n: nat): 2 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - 1 - jb!1 THEN b2n(rem!1(ii)) ELSE b2n(FALSE) ENDIF)(n)\"\n                                                                                                                                                            \"N - 2 - jb!1\"\n                                                                                                                                                            0)\n                                                                                                                                                           ((\"1\"\n                                                                                                                                                             (assert)\n                                                                                                                                                             ((\"1\"\n                                                                                                                                                               (hide-all-but\n                                                                                                                                                                1)\n                                                                                                                                                               ((\"1\"\n                                                                                                                                                                 (grind-with-ext)\n                                                                                                                                                                 nil\n                                                                                                                                                                 nil))\n                                                                                                                                                               nil))\n                                                                                                                                                             nil))\n                                                                                                                                                           nil))\n                                                                                                                                                         nil))\n                                                                                                                                                       nil))\n                                                                                                                                                     nil))\n                                                                                                                                                   nil))\n                                                                                                                                                 nil))\n                                                                                                                                               nil))\n                                                                                                                                             nil))\n                                                                                                                                           nil)\n                                                                                                                                          (\"2\"\n                                                                                                                                           (hide\n                                                                                                                                            -1\n                                                                                                                                            4)\n                                                                                                                                           ((\"2\"\n                                                                                                                                             (lemma\n                                                                                                                                              \"sigma_mult\")\n                                                                                                                                             ((\"2\"\n                                                                                                                                               (inst\n                                                                                                                                                -\n                                                                                                                                                \"LAMBDA (n: nat): 2 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - 1 - jb!1 THEN b2n(rem!1(ii)) ELSE b2n(FALSE) ENDIF)(n)\"\n                                                                                                                                                \"N - 1\"\n                                                                                                                                                \"N - 1 - jb!1\"\n                                                                                                                                                0)\n                                                                                                                                               ((\"2\"\n                                                                                                                                                 (assert)\n                                                                                                                                                 ((\"2\"\n                                                                                                                                                   (lemma\n                                                                                                                                                    \"sigma_restrict_eq\")\n                                                                                                                                                   ((\"2\"\n                                                                                                                                                     (inst\n                                                                                                                                                      -\n                                                                                                                                                      \"LAMBDA (n: nat): 2 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - 1 - jb!1 THEN b2n(rem!1(ii)) ELSE b2n(FALSE) ENDIF)(n)\"\n                                                                                                                                                      \"LAMBDA (n: nat): 0\"\n                                                                                                                                                      \"N - 1\"\n                                                                                                                                                      \"N - 1 - jb!1\")\n                                                                                                                                                     ((\"2\"\n                                                                                                                                                       (assert)\n                                                                                                                                                       ((\"2\"\n                                                                                                                                                         (hide-all-but\n                                                                                                                                                          1)\n                                                                                                                                                         ((\"2\"\n                                                                                                                                                           (grind-with-ext)\n                                                                                                                                                           nil\n                                                                                                                                                           nil))\n                                                                                                                                                         nil))\n                                                                                                                                                       nil))\n                                                                                                                                                     nil))\n                                                                                                                                                   nil))\n                                                                                                                                                 nil))\n                                                                                                                                               nil))\n                                                                                                                                             nil))\n                                                                                                                                           nil))\n                                                                                                                                         nil))\n                                                                                                                                       nil))\n                                                                                                                                     nil))\n                                                                                                                                   nil))\n                                                                                                                                 nil))\n                                                                                                                               nil))\n                                                                                                                             nil))\n                                                                                                                           nil))\n                                                                                                                         nil))\n                                                                                                                       nil))\n                                                                                                                     nil))\n                                                                                                                   nil))\n                                                                                                                 nil))\n                                                                                                               nil))\n                                                                                                             nil))\n                                                                                                           nil))\n                                                                                                         nil)\n                                                                                                        (\"2\"\n                                                                                                         (hide\n                                                                                                          -1\n                                                                                                          3)\n                                                                                                         ((\"2\"\n                                                                                                           (use\n                                                                                                            \"sigma_mult\"\n                                                                                                            (\"x\"\n                                                                                                             0))\n                                                                                                           ((\"2\"\n                                                                                                             (assert)\n                                                                                                             ((\"2\"\n                                                                                                               (lemma\n                                                                                                                \"sigma_restrict_eq\")\n                                                                                                               ((\"2\"\n                                                                                                                 (inst\n                                                                                                                  -\n                                                                                                                  \"LAMBDA (n: nat): 0 * extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - jb!1 THEN b2n(left_shift(1, rem!1) WITH [(0) := quot!1(N - 1)](ii)) ELSE b2n(FALSE) ENDIF)(n)\"\n                                                                                                                  \"extend(LAMBDA (ii: below(N)): exp2(ii) * IF ii < N - jb!1 THEN b2n(left_shift(1, rem!1) WITH [(0) := quot!1(N - 1)](ii)) ELSE b2n(FALSE) ENDIF)\"\n                                                                                                                  \"N - 1\"\n                                                                                                                  \"N - jb!1\")\n                                                                                                                 ((\"2\"\n                                                                                                                   (assert)\n                                                                                                                   ((\"2\"\n                                                                                                                     (hide-all-but\n                                                                                                                      1)\n                                                                                                                     ((\"2\"\n                                                                                                                       (grind-with-ext)\n                                                                                                                       nil\n                                                                                                                       nil))\n                                                                                                                     nil))\n                                                                                                                   nil))\n                                                                                                                 nil))\n                                                                                                               nil))\n                                                                                                             nil))\n                                                                                                           nil))\n                                                                                                         nil))\n                                                                                                       nil))\n                                                                                                     nil))\n                                                                                                   nil))\n                                                                                                 nil))\n                                                                                               nil))\n                                                                                             nil))\n                                                                                           nil))\n                                                                                         nil))\n                                                                                       nil))\n                                                                                     nil))\n                                                                                   nil))\n                                                                                 nil))\n                                                                               nil))\n                                                                             nil))\n                                                                           nil)\n                                                                          (\"2\"\n                                                                           (hide\n                                                                            2)\n                                                                           ((\"2\"\n                                                                             (case-replace\n                                                                              \"bv2nat[N](lsrem) = bv2nat[N - jb!1](lsrem ^ (N - 1 - jb!1, 0))\")\n                                                                             ((\"1\"\n                                                                               (hide\n                                                                                -1)\n                                                                               ((\"1\"\n                                                                                 (case-replace\n                                                                                  \"bv2nat[N](dvs!1) = bv2nat[N - jb!1](dvs!1 ^ (N - 1 - jb!1, 0))\")\n                                                                                 ((\"1\"\n                                                                                   (hide\n                                                                                    -1)\n                                                                                   ((\"1\"\n                                                                                     (case-replace\n                                                                                      \"(LAMBDA (i: below(N)): IF i < N - jb!1 THEN (lsrem - dvs!1)(i) ELSE FALSE ENDIF) = fill[jb!1](FALSE) o (lsrem - dvs!1) ^ (N - 1 - jb!1, 0)\")\n                                                                                     ((\"1\"\n                                                                                       (hide\n                                                                                        -1)\n                                                                                       ((\"1\"\n                                                                                         (rewrite\n                                                                                          \"bv2nat_concat\")\n                                                                                         ((\"1\"\n                                                                                           (rewrite\n                                                                                            \"bv2nat_fill_F\")\n                                                                                           ((\"1\"\n                                                                                             (assert)\n                                                                                             ((\"1\"\n                                                                                               (lemma\n                                                                                                \"bv2nat_minus3\")\n                                                                                               ((\"1\"\n                                                                                                 (expand\n                                                                                                  \"-\")\n                                                                                                 ((\"1\"\n                                                                                                   (rewrite\n                                                                                                    \"bv_add_subrange\")\n                                                                                                   ((\"1\"\n                                                                                                     (rewrite\n                                                                                                      \"bv_caret_negate\")\n                                                                                                     ((\"1\"\n                                                                                                       (rewrite\n                                                                                                        -1)\n                                                                                                       nil\n                                                                                                       nil))\n                                                                                                     nil))\n                                                                                                   nil))\n                                                                                                 nil))\n                                                                                               nil))\n                                                                                             nil))\n                                                                                           nil))\n                                                                                         nil))\n                                                                                       nil)\n                                                                                      (\"2\"\n                                                                                       (hide-all-but\n                                                                                        1)\n                                                                                       ((\"2\"\n                                                                                         (grind-with-ext)\n                                                                                         nil\n                                                                                         nil))\n                                                                                       nil))\n                                                                                     nil))\n                                                                                   nil)\n                                                                                  (\"2\"\n                                                                                   (hide\n                                                                                    2)\n                                                                                   ((\"2\"\n                                                                                     (case-replace\n                                                                                      \"bv2nat[N](dvs!1) = bv2nat[N](fill[jb!1](FALSE) o dvs!1 ^ (N - 1 - jb!1, 0))\")\n                                                                                     ((\"1\"\n                                                                                       (rewrite\n                                                                                        \"bv2nat_concat\")\n                                                                                       ((\"1\"\n                                                                                         (rewrite\n                                                                                          \"bv2nat_fill_F\")\n                                                                                         ((\"1\"\n                                                                                           (assert)\n                                                                                           nil\n                                                                                           nil))\n                                                                                         nil))\n                                                                                       nil)\n                                                                                      (\"2\"\n                                                                                       (hide\n                                                                                        2)\n                                                                                       ((\"2\"\n                                                                                         (case\n                                                                                          \"dvs!1 = fill[jb!1](FALSE) o (dvs!1 ^ (N - 1 - jb!1, 0))\")\n                                                                                         ((\"1\"\n                                                                                           (assert)\n                                                                                           nil\n                                                                                           nil)\n                                                                                          (\"2\"\n                                                                                           (hide\n                                                                                            2)\n                                                                                           ((\"2\"\n                                                                                             (case-replace\n                                                                                              \"jb!1 = 0\")\n                                                                                             ((\"1\"\n                                                                                               (grind-with-ext)\n                                                                                               nil\n                                                                                               nil)\n                                                                                              (\"2\"\n                                                                                               (assert)\n                                                                                               ((\"2\"\n                                                                                                 (lemma\n                                                                                                  \"bv2nat_upperbound[N]\")\n                                                                                                 ((\"2\"\n                                                                                                   (inst\n                                                                                                    -\n                                                                                                    \"dvs!1\"\n                                                                                                    \"N - jb!1\")\n                                                                                                   ((\"2\"\n                                                                                                     (assert)\n                                                                                                     ((\"2\"\n                                                                                                       (hide\n                                                                                                        -2)\n                                                                                                       ((\"2\"\n                                                                                                         (apply-extensionality\n                                                                                                          2\n                                                                                                          :hide?\n                                                                                                          t)\n                                                                                                         ((\"2\"\n                                                                                                           (grind)\n                                                                                                           nil\n                                                                                                           nil))\n                                                                                                         nil))\n                                                                                                       nil))\n                                                                                                     nil))\n                                                                                                   nil))\n                                                                                                 nil))\n                                                                                               nil))\n                                                                                             nil))\n                                                                                           nil))\n                                                                                         nil))\n                                                                                       nil))\n                                                                                     nil))\n                                                                                   nil))\n                                                                                 nil))\n                                                                               nil)\n                                                                              (\"2\"\n                                                                               (hide\n                                                                                -1\n                                                                                2)\n                                                                               ((\"2\"\n                                                                                 (case-replace\n                                                                                  \"bv2nat[N](lsrem) = bv2nat[N](fill[jb!1](FALSE) o lsrem ^ (N - 1 - jb!1, 0))\")\n                                                                                 ((\"1\"\n                                                                                   (rewrite\n                                                                                    \"bv2nat_concat\")\n                                                                                   ((\"1\"\n                                                                                     (rewrite\n                                                                                      \"bv2nat_fill_F\")\n                                                                                     ((\"1\"\n                                                                                       (assert)\n                                                                                       nil\n                                                                                       nil))\n                                                                                     nil))\n                                                                                   nil)\n                                                                                  (\"2\"\n                                                                                   (hide\n                                                                                    2)\n                                                                                   ((\"2\"\n                                                                                     (case\n                                                                                      \"lsrem = (fill[jb!1](FALSE) o lsrem ^ (N - 1 - jb!1, 0))\")\n                                                                                     ((\"1\"\n                                                                                       (assert)\n                                                                                       nil\n                                                                                       nil)\n                                                                                      (\"2\"\n                                                                                       (hide\n                                                                                        2)\n                                                                                       ((\"2\"\n                                                                                         (apply-extensionality\n                                                                                          :hide?\n                                                                                          t)\n                                                                                         ((\"2\"\n                                                                                           (expand\n                                                                                            \"lsrem\")\n                                                                                           ((\"2\"\n                                                                                             (grind)\n                                                                                             nil\n                                                                                             nil))\n                                                                                           nil))\n                                                                                         nil))\n                                                                                       nil))\n                                                                                     nil))\n                                                                                   nil))\n                                                                                 nil))\n                                                                               nil))\n                                                                             nil))\n                                                                           nil))\n                                                                         nil))\n                                                                       nil))\n                                                                     nil))\n                                                                   nil))\n                                                                 nil))\n                                                               nil))\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil)\n                                        (\"2\"\n                                         (hide-all-but 1)\n                                         ((\"2\"\n                                           (use \"bv2nat_upperbound[N]\")\n                                           ((\"2\"\n                                             (assert)\n                                             ((\"2\"\n                                               (hide 2)\n                                               ((\"2\"\n                                                 (skosimp)\n                                                 ((\"2\"\n                                                   (assert)\n                                                   nil\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil)\n                                    (\"2\"\n                                     (hide-all-but 1)\n                                     ((\"2\" (grind-with-ext) nil nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil)\n                          (\"2\" (hide-all-but 1)\n                           ((\"2\" (grind-with-ext) nil nil)) nil)\n                          (\"3\" (skosimp) ((\"3\" (assert) nil nil)) nil)\n                          (\"4\" (skosimp) ((\"4\" (assert) nil nil)) nil)\n                          (\"5\" (skosimp) ((\"5\" (assert) nil nil)) nil)\n                          (\"6\" (skosimp) ((\"6\" (assert) nil nil)) nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil)\n              (\"2\" (flatten)\n               ((\"2\" (assert)\n                 ((\"2\" (inst?)\n                   ((\"2\" (assert)\n                     ((\"2\" (hide 1 2)\n                       ((\"2\"\n                         (case-replace\n                          \"(LAMBDA (i: below(N)): IF i < 1 + jb!1 THEN quot!1(i - 1 + N - jb!1) ELSE aux!1(i - 1 - jb!1) ENDIF) = (LAMBDA (i: below(N)): IF i < jb!1 THEN left_shift(1, quot!1)(i + N - jb!1) ELSE left_shift(1, aux!1) WITH [(0) := quot!1(N - 1)](i - jb!1) ENDIF)\")\n                         ((\"1\" (hide -1)\n                           ((\"1\"\n                             (case-replace\n                              \"(LAMBDA (i: below(N)): IF i < 1 + jb!1 THEN quot!1(i - 1 + N - jb!1) ELSE rem!1(i - 1 - jb!1) ENDIF) = (LAMBDA (i: below(N)): IF i < jb!1 THEN left_shift(1, quot!1)(i + N - jb!1) ELSE left_shift(1, rem!1) WITH [(0) := quot!1(N - 1)](i - jb!1) ENDIF)\")\n                             ((\"1\" (replace -3)\n                               ((\"1\"\n                                 (hide -1 -3)\n                                 ((\"1\"\n                                   (assert)\n                                   ((\"1\"\n                                     (expand \"exp2\" 1 1)\n                                     ((\"1\"\n                                       (case-replace\n                                        \"(LAMBDA (i: below(N)): IF i < N - jb!1 THEN left_shift(1, quot!1)(i) ELSE FALSE ENDIF) = left_shift(1, (LAMBDA (i: below(N)): IF i < N - 1 - jb!1 THEN quot!1(i) ELSE FALSE ENDIF)) WITH [(0) := FALSE]\")\n                                       ((\"1\"\n                                         (rewrite \"leftshift_with\")\n                                         ((\"1\"\n                                           (expand \"b2n\")\n                                           ((\"1\" (propax) nil nil))\n                                           nil)\n                                          (\"2\"\n                                           (hide-all-but 1)\n                                           ((\"2\"\n                                             (use\n                                              \"bv2nat_upperbound[N]\")\n                                             ((\"2\" (grind) nil nil))\n                                             nil))\n                                           nil))\n                                         nil)\n                                        (\"2\"\n                                         (hide-all-but 1)\n                                         ((\"2\"\n                                           (grind-with-ext)\n                                           nil\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil)\n                              (\"2\" (hide-all-but 1)\n                               ((\"2\" (grind-with-ext) nil nil)) nil)\n                              (\"3\" (skosimp) ((\"3\" (assert) nil nil))\n                               nil)\n                              (\"4\" (skosimp) ((\"4\" (assert) nil nil))\n                               nil)\n                              (\"5\" (skosimp) ((\"5\" (assert) nil nil))\n                               nil)\n                              (\"6\" (skosimp) ((\"6\" (assert) nil nil))\n                               nil))\n                             nil))\n                           nil)\n                          (\"2\" (hide-all-but 1)\n                           ((\"2\" (grind-with-ext) nil nil)) nil)\n                          (\"3\" (skosimp) ((\"3\" (assert) nil nil)) nil)\n                          (\"4\" (skosimp) ((\"4\" (assert) nil nil)) nil)\n                          (\"5\" (skosimp) ((\"5\" (assert) nil nil)) nil)\n                          (\"6\" (skosimp) ((\"6\" (assert) nil nil)) nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil)\n      (\"3\" (skosimp) ((\"3\" (assert) nil nil)) nil)\n      (\"4\" (skosimp) ((\"4\" (assert) nil nil)) nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"divrem1_eq","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"div","theory":"BitvectorOneComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"rem","theory":"BitvectorOneComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (skolem!)\n ((\"\" (rewrite \"div_divrem_mem\")\n   ((\"\" (rewrite \"rem_divrem_mem\")\n     ((\"\" (use \"divrem_mem_invariant\")\n       ((\"\" (assert)\n         ((\"\" (split)\n           ((\"1\" (replace -1 * rl)\n             ((\"1\" (hide -1)\n               ((\"1\" (use \"divrem_mem_first_second_third\")\n                 ((\"1\" (beta)\n                   ((\"1\" (flatten)\n                     ((\"1\" (assert)\n                       ((\"1\" (replace -1)\n                         ((\"1\"\n                           (case-replace\n                            \"(LAMBDA (i: below(N)): dvd!1(i)) = dvd!1\")\n                           ((\"1\" (apply-extensionality) nil nil)) nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil)\n            (\"2\" (hide 2)\n             ((\"2\" (assert)\n               ((\"2\" (lemma \"bv2nat_fill_F[N]\")\n                 ((\"2\" (expand \"fill\") ((\"2\" (assert) nil nil)) nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"rem1_below_dvs","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/=","library":"pvs:prelude","theory":"notequal","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"rem","theory":"BitvectorOneComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (skosimp)\n ((\"\" (rewrite \"rem_divrem_mem\")\n   ((\"\" (use \"divrem_mem_rem\")\n     ((\"\" (expand \"<\")\n       ((\"\" (assert)\n         ((\"\" (lemma \"bv2nat_fill_F[N]\")\n           ((\"\" (expand \"fill\") ((\"\" (assert) nil nil)) nil)) nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"rem1_dvs0","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"rem","theory":"BitvectorOneComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"fill","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"30bf94d35b333e4090fb1ff869405e24e5d8e718"}},"argument":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}]}},{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (skolem!)\n ((\"\" (expand \"rem\")\n   ((\"\" (use \"divrem_dvs0\")\n     ((\"\" (assert)\n       ((\"\" (replace -1) ((\"\" (apply-extensionality) nil nil)) nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"div1_dvs0","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"div","theory":"BitvectorOneComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"fill","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"30bf94d35b333e4090fb1ff869405e24e5d8e718"}},"argument":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"fill","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"30bf94d35b333e4090fb1ff869405e24e5d8e718"}},"argument":{"tag":"constant","id":"TRUE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (skolem!)\n ((\"\" (expand \"div\")\n   ((\"\" (use \"divrem_dvs0\")\n     ((\"\" (assert)\n       ((\"\" (replace -1)\n         ((\"\" (apply-extensionality)\n           ((\"\" (expand \"fill\") ((\"\" (propax) nil nil)) nil)) nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"div1_below_dvd","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/=","library":"pvs:prelude","theory":"notequal","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"div","theory":"BitvectorOneComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (skosimp)\n ((\"\" (use \"divrem1_eq\")\n   ((\"\" (replace -1 2 rl)\n     ((\"\" (hide -1)\n       ((\"\" (assert)\n         ((\"\" (lemma \"le_times_le_pos\")\n           ((\"\"\n             (inst - \"bv2nat(div(dvd!1, dvs!1))\" \"1\" \"bv2nat(dvs!1)\"\n              \"bv2nat(div(dvd!1, dvs!1))\")\n             ((\"\" (assert) nil nil)) nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"divrem1_uniqueness","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"q","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"variable","id":"r","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"r","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"q","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}},{"tag":"variable","id":"r","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"q","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"div","theory":"BitvectorOneComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"r","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"rem","theory":"BitvectorOneComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}}]}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (skosimp)\n ((\"\" (use \"divrem1_eq\")\n   ((\"\" (use \"rem1_below_dvs\")\n     ((\"\" (assert)\n       ((\"\" (lemma \"unique_division\")\n         ((\"\"\n           (inst - \"bv2nat(dvs!1)\" \"bv2nat(div(dvd!1, dvs!1))\" \"q!1\"\n            \"bv2nat(rem(dvd!1, dvs!1))\" \"r!1\")\n           ((\"\" (reduce) nil nil)) nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"divrem1_dvs1","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"div","theory":"BitvectorOneComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"constant","id":"one","theory":"BitvectorMultiplication","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"rem","theory":"BitvectorOneComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"constant","id":"one","theory":"BitvectorMultiplication","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"fill","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"30bf94d35b333e4090fb1ff869405e24e5d8e718"}},"argument":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (skolem!)\n ((\"\" (use \"rem1_below_dvs\")\n   ((\"\" (lemma \"bv2nat_one\")\n     ((\"\" (assert)\n       ((\"\" (use \"bv2nat_eq0[N]\")\n         ((\"\" (assert)\n           ((\"\" (lemma \"divrem1_uniqueness\")\n             ((\"\"\n               (inst - \"dvd!1\" \"one\" \"bv2nat(dvd!1)\"\n                \"bv2nat(rem(dvd!1, one))\")\n               ((\"\" (assert)\n                 ((\"\" (lemma \"bv2nat_inj[N]\")\n                   ((\"\" (inst - \"dvd!1\" \"div(dvd!1, one)\")\n                     ((\"\" (assert) nil nil)) nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"div1_eq0","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}],"type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"div","theory":"BitvectorOneComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"5c7e6824536b5106a39a45d455741242f222ac21"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skolem!)\n   ((\"\" (case-replace \"bv2nat(dvs!1) = 0\")\n     ((\"1\" (forward-chain \"bv2nat_eq0[N]\")\n       ((\"1\" (replace -1)\n         ((\"1\" (rewrite \"div1_dvs0\")\n           ((\"1\" (rewrite \"bv2nat_fill_T[N]\") ((\"1\" (assert) nil nil))\n             nil))\n           nil))\n         nil))\n       nil)\n      (\"2\" (iff)\n       ((\"2\" (use \"divrem1_eq\")\n         ((\"2\" (use \"rem1_below_dvs\")\n           ((\"2\" (reduce)\n             ((\"2\" (lemma \"ge_times_ge_pos\")\n               ((\"2\"\n                 (inst - \"bv2nat(dvs!1)\" 1 \"bv2nat(div(dvd!1, dvs!1))\"\n                  \"bv2nat(dvs!1)\")\n                 ((\"2\" (assert) nil nil)) nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}}]},"type-hash":{"tag":"typelist","entries":{"5a7aa47bdc764b6116531680cb42827b010cf6a7":{"tag":"functiontype","domain":{"typehash":"20070eab10fb8c80ed53293ccbd5acf51a299119"},"range":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}},"5c7e6824536b5106a39a45d455741242f222ac21":{"tag":"functiontype","domain":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},"range":{"typehash":"7f8694c959dc3225c2609d7859fe4f0e852e3fbf"}},"120f814405b86d927919a8e6aaf145e82ed7a16c":{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":">","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":0}]}}},"print-type":[{"tag":"typename","id":"posnat","library":"pvs:prelude","theory":"integers","actuals":[]}]},"f3923c5f8d3927211e5aff1cfbcee01af195158b":{"tag":"tupletype","types":[{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}]},"146a37095d79b99006383a517eb8738d36d01122":{"tag":"functiontype","domain":{"typehash":"11c15fe18e476f962d4d8a6529ffdee55c710026"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"255fc968a29595c401e05c55e3263dd5e336ff42":{"tag":"tupletype","types":[{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"},{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}]},"717a9c25eb892eba350c91b4c9080187b6bc2aa4":{"tag":"subtype","supertype":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"},"predicate":{"tag":"constant","id":"rational_pred","library":"pvs:prelude","theory":"rationals","type":{"typehash":"5f72d24643ab14e4b255c8b1ac6dd982887152d4"}},"print-type":[{"tag":"typename","id":"rational","library":"pvs:prelude","theory":"rationals","actuals":[]}]},"87d274baeb32650e8d07e49288fd20e8eda69103":{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},"e7cb1bd3cd24dbadc6dad73968a8f9a173fb8064":{"tag":"functiontype","domain":{"typehash":"335dd929abe9abeebc7d98742277607d826e747e"},"range":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"f9dfc0c5daed68d735ec591f7efd16ec22075ef8":{"tag":"functiontype","domain":{"typehash":"e82fb70ca2174d284e3c0dc69979ae0796a1bdf1"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"d288fd11ae1e75ed5502a350466c5a64f3c1f435":{"tag":"typename","id":"number","library":"pvs:prelude","theory":"numbers","actuals":[]},"2ee9ea554c214f024350377e2d7e0814e8313ba5":{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":2}]}}},"print-type":[{"tag":"typename","id":"nbit","library":"pvs:prelude","theory":"bit","actuals":[]}]},"de60bbaa94c2ecb29395529b9f40aa905b1b3a4f":{"tag":"functiontype","domain":{"typehash":"a1e617259f5a9641442fa7863ab33bbc232a337f"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"34012ce34c4ce7e8874dfceb61781aace60c5d79":{"tag":"functiontype","domain":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"0e8b4a8a7dc979547a1648e83db386abea4179a8":{"tag":"functiontype","domain":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"},"range":{"typehash":"2ee9ea554c214f024350377e2d7e0814e8313ba5"}},"0e62cad1a909071b121ca09d0454c9c3deb64003":{"tag":"tupletype","types":[{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}]},"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03":{"tag":"subtype","supertype":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},"predicate":{"tag":"constant","id":"real_pred","library":"pvs:prelude","theory":"reals","type":{"typehash":"34012ce34c4ce7e8874dfceb61781aace60c5d79"}},"print-type":[{"tag":"typename","id":"real","library":"pvs:prelude","theory":"reals","actuals":[]}]},"5f72d24643ab14e4b255c8b1ac6dd982887152d4":{"tag":"functiontype","domain":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"f4f200a0d337e4a60b30dfe136d073c7265be3e1":{"tag":"subtype","supertype":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"},"predicate":{"tag":"constant","id":"number_field_pred","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"a56a4a9403ce4ae14abf07cdf6b328b8f111f42b"}},"print-type":[{"tag":"typename","id":"number_field","library":"pvs:prelude","theory":"number_fields","actuals":[]}]},"aece8f38c7b6554bf39a6677488f47877026313a":{"tag":"subtype","supertype":{"typehash":"717a9c25eb892eba350c91b4c9080187b6bc2aa4"},"predicate":{"tag":"constant","id":"integer_pred","library":"pvs:prelude","theory":"integers","type":{"typehash":"4e480c5400c53df5b58cca7d1bbe3ee6c2f584cc"}},"print-type":[{"tag":"typename","id":"int","library":"pvs:prelude","theory":"integers","actuals":[]}]},"11c15fe18e476f962d4d8a6529ffdee55c710026":{"tag":"tupletype","types":[{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"},{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}]},"d7dc2f714a1fce0970ff612d40474b343adf5e2b":{"tag":"functiontype","domain":{"typehash":"236230ed8a3f0893ce962c8867564610e4c49e9f"},"range":{"typehash":"0e62cad1a909071b121ca09d0454c9c3deb64003"}},"bd9210fadab0cfb0d55ce4c42165b0f5af3e01ae":{"tag":"functiontype","domain":{"typehash":"278b99953916c553bcf94903a6c601445f4a6a96"},"range":{"typehash":"f3923c5f8d3927211e5aff1cfbcee01af195158b"}},"350b58e8264ad023a2d621d5506d89de8beb16e3":{"tag":"functiontype","domain":{"typehash":"39d6637d76121441a824031ab58b03e07adec56e"},"range":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}},"70f41804411e5424c96eb8e91443442e1f07ce81":{"tag":"functiontype","domain":{"typehash":"f3923c5f8d3927211e5aff1cfbcee01af195158b"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"4e480c5400c53df5b58cca7d1bbe3ee6c2f584cc":{"tag":"functiontype","domain":{"typehash":"717a9c25eb892eba350c91b4c9080187b6bc2aa4"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"35022e4b576c9d45f93989c7f078f89892d44f37":{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}]}}},"print-type":[{"tag":"type-application","type":[{"tag":"typename","id":"below","library":"pvs:prelude","theory":"naturalnumbers","actuals":[]}],"parameters":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"variable","id":"n","type":{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}}]}}]}]},"c83548ec8aa59e7bd86b18520461274afa56431f":{"tag":"subtype","supertype":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"r","type":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"\/=","library":"pvs:prelude","theory":"notequal","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"r","type":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}},{"tag":"integer","integer-value":0}]}}},"print-type":[{"tag":"typename","id":"nznum","library":"pvs:prelude","theory":"number_fields","actuals":[]}]},"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9":{"tag":"subtype","supertype":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"integer","integer-value":0}]}}},"print-type":[{"tag":"typename","id":"nonneg_int","library":"pvs:prelude","theory":"integers","actuals":[]}]},"4f19419082f24e96423f3b076548a2c3de11ecd9":{"tag":"typename","id":"boolean","library":"pvs:prelude","theory":"booleans","actuals":[]},"18ac9ba548b6ebb4e044d8d94a129414044cc811":{"tag":"functiontype","domain":{"typehash":"f3923c5f8d3927211e5aff1cfbcee01af195158b"},"range":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"278b99953916c553bcf94903a6c601445f4a6a96":{"tag":"tupletype","types":[{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}]},"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe":{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}},"print-type":[{"tag":"type-application","type":[{"tag":"typename","id":"below","library":"pvs:prelude","theory":"naturalnumbers","actuals":[]}],"parameters":[{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}]},"a56a4a9403ce4ae14abf07cdf6b328b8f111f42b":{"tag":"functiontype","domain":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"39d6637d76121441a824031ab58b03e07adec56e":{"tag":"tupletype","types":[{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}]},"7f8694c959dc3225c2609d7859fe4f0e852e3fbf":{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}]}}},"print-type":[{"tag":"type-application","type":[{"tag":"typename","id":"below","library":"pvs:prelude","theory":"naturalnumbers","actuals":[]}],"parameters":[{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}]}]},"2dd224b393847a08c08146f380310f3a3e311e59":{"tag":"functiontype","domain":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"e82fb70ca2174d284e3c0dc69979ae0796a1bdf1":{"tag":"tupletype","types":[{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"},{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}]},"a1e617259f5a9641442fa7863ab33bbc232a337f":{"tag":"tupletype","types":[{"typehash":"f3923c5f8d3927211e5aff1cfbcee01af195158b"},{"typehash":"f3923c5f8d3927211e5aff1cfbcee01af195158b"}]},"335dd929abe9abeebc7d98742277607d826e747e":{"tag":"tupletype","types":[{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}]},"112028b13dc40fe67507f4744441b1f75725ea19":{"tag":"functiontype","domain":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"},"print-type":[{"tag":"typename","id":"bvec","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}]}]},"31a80503cbfd8a1578a2219c325afcea488cbf21":{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}}},"print-type":[{"tag":"type-application","type":[{"tag":"typename","id":"below","library":"pvs:prelude","theory":"naturalnumbers","actuals":[]}],"parameters":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":1},{"tag":"formal-constant","id":"N","theory":"BitvectorOneComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}]},"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf":{"tag":"functiontype","domain":{"typehash":"255fc968a29595c401e05c55e3263dd5e336ff42"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"236230ed8a3f0893ce962c8867564610e4c49e9f":{"tag":"tupletype","types":[{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},{"typehash":"31a80503cbfd8a1578a2219c325afcea488cbf21"}]},"30bf94d35b333e4090fb1ff869405e24e5d8e718":{"tag":"functiontype","domain":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"},"range":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"20070eab10fb8c80ed53293ccbd5acf51a299119":{"tag":"tupletype","types":[{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},{"typehash":"c83548ec8aa59e7bd86b18520461274afa56431f"}]}}}}