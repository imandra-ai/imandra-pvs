{"tag":"module-with-hash","module":{"tag":"theory","id":"BitvectorTwoComplementDivision","formals":[{"tag":"formal-const-decl","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}],"assuming":[{"tag":"formula-decl","id":"N_size","label":"assumption","definition":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":2}]}},"proof":[]}],"declarations":[{"tag":"formula-decl","id":"IMP_BitvectorOneComplementDivision_TCC1","label":"obligation","definition":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":2}]}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\") ((\"\" (propax) nil nil)) nil)","status":"unchecked"}},{"tag":"importing","theory-name":["ppJsonMl*",["theoryName","imp"]]},{"tag":"formula-decl","id":"IMP_BitvectorOneComplementDivision_TCC2","label":"obligation","definition":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}},{"tag":"integer","integer-value":2}]}},"proof":{"tag":"proof-info","script":"(\"\" (assuming-tcc) nil nil)","status":"unchecked"}},{"tag":"importing","theory-name":["ppJsonMl*",["theoryName","imp"]]},{"tag":"importing","theory-name":["ppJsonMl*",["theoryName","imp"]]},{"tag":"var-decl","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"var-decl","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"var-decl","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"var-decl","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"var-decl","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"var-decl","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"formula-decl","id":"DIVREM1_eq","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}],"type":{"typehash":"86f8e00f94a81b8b2a4c3e9affb8534402002cb9"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"bv_arith_nat_defs","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"96b143aba8a2ae9712b1f7bf1c0942ba61cb4cb4"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","theory":"BitvectorMultiplication","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"div","theory":"BitvectorOneComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"rem","theory":"BitvectorOneComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}}]}},{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (skolem!)\n ((\"\" (use \"divrem1_eq[2 * N]\")\n   ((\"\" (lemma \"bv2nat_times[N]\")\n     ((\"\" (inst - \"div(DVD!1, DVS!1)\" \"DVS!1\")\n       ((\"\" (assert)\n         ((\"\" (replace -1 -2 rl)\n           ((\"\" (hide -1)\n             ((\"\" (use \"bv_add[2 * N]\")\n               ((\"\" (assert) ((\"\" (rewrite \"bv2nat_inj\") nil nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"div1_cancel","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"e16e0107f5f27971f19bd45ba383df683f19dff8"}},"argument":{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"e16e0107f5f27971f19bd45ba383df683f19dff8"}},"argument":{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"e16e0107f5f27971f19bd45ba383df683f19dff8"}},"argument":{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"e16e0107f5f27971f19bd45ba383df683f19dff8"}},"argument":{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"\/=","library":"pvs:prelude","theory":"notequal","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"e16e0107f5f27971f19bd45ba383df683f19dff8"}},"argument":{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}},{"tag":"integer","integer-value":0}]}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}],"type":{"typehash":"86f8e00f94a81b8b2a4c3e9affb8534402002cb9"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"div","theory":"BitvectorOneComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","theory":"BitvectorMultiplication","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"*","theory":"BitvectorMultiplication","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"div","theory":"BitvectorOneComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/=","library":"pvs:prelude","theory":"notequal","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"e16e0107f5f27971f19bd45ba383df683f19dff8"}},"argument":{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}],"type":{"typehash":"86f8e00f94a81b8b2a4c3e9affb8534402002cb9"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"rem","theory":"BitvectorOneComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","theory":"BitvectorMultiplication","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"*","theory":"BitvectorMultiplication","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"*","theory":"BitvectorMultiplication","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"BV","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"apply","operator":{"tag":"constant","id":"rem","theory":"BitvectorOneComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":{"typehash":"ad1dc8ab57d614e9869574f391457e68ed2d335c"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"DVD","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},{"tag":"variable","id":"DVS","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}]}}]}}]}}]}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skosimp)\n   ((\"\" (case \"bv2nat(DVS!1) = 0\")\n     ((\"1\" (forward-chain \"bv2nat_eq0[2 * N]\")\n       ((\"1\" (replace -1)\n         ((\"1\" (rewrite \"times_zero_second\")\n           ((\"1\" (rewrite \"div1_dvs0\")\n             ((\"1\" (rewrite \"div1_dvs0\") ((\"1\" (assert) nil nil)) nil))\n             nil))\n           nil))\n         nil))\n       nil)\n      (\"2\"\n       (case \"bv2nat(div(BV!1 * DVD!1, BV!1 * DVS!1)) = bv2nat(div(DVD!1, DVS!1)) AND (bv2nat(DVS!1) \/= 0 IMPLIES bv2nat(rem(BV!1 * DVD!1, BV!1 * DVS!1)) = bv2nat(BV!1 * rem(DVD!1, DVS!1)))\")\n       ((\"1\" (flatten)\n         ((\"1\" (forward-chain \"bv2nat_inj[2 * N]\")\n           ((\"1\" (assert)\n             ((\"1\" (hide -1 -2)\n               ((\"1\" (forward-chain \"bv2nat_inj[2 * N]\") nil nil))\n               nil))\n             nil))\n           nil))\n         nil)\n        (\"2\" (hide 4)\n         ((\"2\" (lemma \"divrem1_uniqueness[2 * N]\")\n           ((\"2\"\n             (inst - \"BV!1 * DVD!1\" \"BV!1 * DVS!1\"\n              \"bv2nat(div(DVD!1,DVS!1))\"\n              \"bv2nat(BV!1) * bv2nat(rem(DVD!1,DVS!1))\")\n             ((\"2\" (assert)\n               ((\"2\" (split)\n                 ((\"1\" (flatten)\n                   ((\"1\" (assert)\n                     ((\"1\" (rewrite \"bv2nat_times[N]\")\n                       ((\"1\" (assert) nil nil)) nil))\n                     nil))\n                   nil)\n                  (\"2\" (rewrite \"bv2nat_times[N]\")\n                   ((\"2\" (use \"rem1_below_dvs[2 * N]\")\n                     ((\"2\" (assert)\n                       ((\"2\" (use \"both_sides_times_pos_lt2\")\n                         ((\"2\" (assert) nil nil)) nil))\n                       nil))\n                     nil))\n                   nil)\n                  (\"3\" (rewrite \"bv2nat_times[N]\")\n                   ((\"3\" (rewrite \"bv2nat_times[N]\")\n                     ((\"3\" (assert)\n                       ((\"3\" (use \"divrem1_eq[2 * N]\")\n                         ((\"3\" (assert) nil nil)) nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"const-decl","id":"\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"},"parameters":[[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]],"const-def":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}},"then":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}},"then":{"tag":"apply","operator":{"tag":"constant","id":"div","theory":"BitvectorOneComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"else":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"bv_arithmetic_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"c5e89992401b89fc8e77c8d0a230e2c741840e00"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"div","theory":"BitvectorOneComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"bv_arithmetic_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"c5e89992401b89fc8e77c8d0a230e2c741840e00"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}}},"else":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}},"then":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"bv_arithmetic_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"c5e89992401b89fc8e77c8d0a230e2c741840e00"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"div","theory":"BitvectorOneComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"bv_arithmetic_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"c5e89992401b89fc8e77c8d0a230e2c741840e00"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}},"else":{"tag":"apply","operator":{"tag":"constant","id":"div","theory":"BitvectorOneComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"bv_arithmetic_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"c5e89992401b89fc8e77c8d0a230e2c741840e00"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"bv_arithmetic_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"c5e89992401b89fc8e77c8d0a230e2c741840e00"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}}}},{"tag":"const-decl","id":"\/\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"},"parameters":[[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]],"const-def":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}},"then":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}},"then":{"tag":"apply","operator":{"tag":"constant","id":"rem","theory":"BitvectorOneComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},"else":{"tag":"apply","operator":{"tag":"constant","id":"rem","theory":"BitvectorOneComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"bv_arithmetic_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"c5e89992401b89fc8e77c8d0a230e2c741840e00"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}},"else":{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}},"then":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"bv_arithmetic_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"c5e89992401b89fc8e77c8d0a230e2c741840e00"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"rem","theory":"BitvectorOneComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"bv_arithmetic_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"c5e89992401b89fc8e77c8d0a230e2c741840e00"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}},"else":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"bv_arithmetic_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"c5e89992401b89fc8e77c8d0a230e2c741840e00"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"rem","theory":"BitvectorOneComplementDivision","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"bv_arithmetic_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"c5e89992401b89fc8e77c8d0a230e2c741840e00"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"bv_arithmetic_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"c5e89992401b89fc8e77c8d0a230e2c741840e00"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}}}}},{"tag":"formula-decl","id":"rem_dvs0","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"fill","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"30bf94d35b333e4090fb1ff869405e24e5d8e718"}},"argument":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}]}},{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skolem!)\n   ((\"\" (expand \"\/\/\")\n     ((\"\" (rewrite \"bv2int_fill_F[N]\")\n       ((\"\" (assert)\n         ((\"\" (rewrite \"rem1_dvs0[N]\")\n           ((\"\" (rewrite \"rem1_dvs0[N]\")\n             ((\"\" (rewrite \"bv_double_neg[N]\") ((\"\" (assert) nil nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"div_dvs0","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"apply","operator":{"tag":"constant","id":"fill","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"30bf94d35b333e4090fb1ff869405e24e5d8e718"}},"argument":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}]}},{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}},"then":{"tag":"apply","operator":{"tag":"constant","id":"fill","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"30bf94d35b333e4090fb1ff869405e24e5d8e718"}},"argument":{"tag":"constant","id":"TRUE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}},"else":{"tag":"constant","id":"one","theory":"BitvectorMultiplication","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skolem!)\n   ((\"\" (expand \"\/\")\n     ((\"\" (rewrite \"bv2int_fill_F[N]\")\n       ((\"\" (assert)\n         ((\"\" (rewrite \"div1_dvs0[N]\")\n           ((\"\" (rewrite \"div1_dvs0[N]\")\n             ((\"\" (lift-if)\n               ((\"\" (ground)\n                 ((\"\" (hide 1)\n                   ((\"\"\n                     (case \"bv2int[N](-fill[N](TRUE)) = bv2int(one[N])\")\n                     ((\"1\" (use \"bv2int_inj[N]\")\n                       ((\"1\" (assert) nil nil)) nil)\n                      (\"2\" (hide 2)\n                       ((\"2\" (rewrite \"bv2int_one\")\n                         ((\"2\" (rewrite \"bv2int_neg[N]\")\n                           ((\"2\" (rewrite \"bv2int_fill_T[N]\")\n                             ((\"2\" (expand \"minint\")\n                               ((\"2\"\n                                 (typepred \"exp2(N - 1)\")\n                                 ((\"2\" (assert) nil nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"divrem_dvs1","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"constant","id":"one","theory":"BitvectorMultiplication","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"type":{"typehash":"70f41804411e5424c96eb8e91443442e1f07ce81"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"constant","id":"one","theory":"BitvectorMultiplication","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"fill","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"30bf94d35b333e4090fb1ff869405e24e5d8e718"}},"argument":{"tag":"constant","id":"FALSE","library":"pvs:prelude","theory":"booleans","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skolem!)\n   ((\"\" (expand* \"\/\" \"\/\/\")\n     ((\"\" (rewrite \"bv2int_one\")\n       ((\"\" (assert)\n         ((\"\" (lift-if)\n           ((\"\" (split)\n             ((\"1\" (flatten) ((\"1\" (use \"divrem1_dvs1[N]\") nil nil))\n               nil)\n              (\"2\" (flatten)\n               ((\"2\" (use \"divrem1_dvs1[N]\")\n                 ((\"2\" (flatten)\n                   ((\"2\" (assert)\n                     ((\"2\" (replace*)\n                       ((\"2\" (rewrite \"bv_double_neg[N]\")\n                         ((\"2\" (rewrite \"min_fill_F[N]\") nil nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"rem_below_dvs","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/=","library":"pvs:prelude","theory":"notequal","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"abs","library":"pvs:prelude","theory":"real_defs","type":{"typehash":"0109749130847e761fb441fc1af10c39be61919b"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}}},{"tag":"apply","operator":{"tag":"constant","id":"abs","library":"pvs:prelude","theory":"real_defs","type":{"typehash":"0109749130847e761fb441fc1af10c39be61919b"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skosimp)\n   ((\"\" (expand* \"\/\/\" \"abs\")\n     ((\"\" (lift-if)\n       ((\"\" (split)\n         ((\"1\" (flatten)\n           ((\"1\" (lift-if)\n             ((\"1\" (assert)\n               ((\"1\" (split)\n                 ((\"1\" (flatten)\n                   ((\"1\" (assert)\n                     ((\"1\" (use \"rem1_below_dvs[N]\")\n                       ((\"1\" (expand \"bv2int\") ((\"1\" (reduce) nil nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil)\n                  (\"2\" (flatten)\n                   ((\"2\" (assert)\n                     ((\"2\" (use \"rem1_below_dvs[N]\")\n                       ((\"2\" (assert)\n                         ((\"2\" (rewrite \"bv2nat_minus_bv[N]\")\n                           ((\"2\" (expand \"\/=\")\n                             ((\"2\" (lift-if)\n                               ((\"2\"\n                                 (split)\n                                 ((\"1\"\n                                   (flatten)\n                                   ((\"1\"\n                                     (assert)\n                                     ((\"1\"\n                                       (forward-chain \"bv2nat_eq0[N]\")\n                                       ((\"1\"\n                                         (replace -1)\n                                         ((\"1\"\n                                           (rewrite \"min_fill_F[N]\")\n                                           ((\"1\"\n                                             (rewrite \"rem1_dvs0\")\n                                             ((\"1\"\n                                               (rewrite\n                                                \"bv2int_fill_F[N]\")\n                                               nil\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil)\n                                  (\"2\"\n                                   (flatten)\n                                   ((\"2\"\n                                     (assert)\n                                     ((\"2\"\n                                       (expand \"bv2int\")\n                                       ((\"2\"\n                                         (reduce)\n                                         ((\"2\"\n                                           (expand \"exp2\" -1)\n                                           ((\"2\" (assert) nil nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil)\n          (\"2\" (assert)\n           ((\"2\" (flatten)\n             ((\"2\" (assert)\n               ((\"2\" (split)\n                 ((\"1\" (flatten)\n                   ((\"1\" (assert)\n                     ((\"1\" (rewrite \"bv2int_neg[N]\")\n                       ((\"1\" (use \"rem1_below_dvs[N]\")\n                         ((\"1\" (expand \"bv2int\")\n                           ((\"1\" (reduce) nil nil)) nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil)\n                  (\"2\" (flatten)\n                   ((\"2\" (assert)\n                     ((\"2\" (use \"rem1_below_dvs[N]\")\n                       ((\"2\" (rewrite \"bv2nat_minus_bv[N]\")\n                         ((\"2\" (expand \"\/=\")\n                           ((\"2\" (lift-if)\n                             ((\"2\" (split)\n                               ((\"1\"\n                                 (flatten)\n                                 ((\"1\"\n                                   (assert)\n                                   ((\"1\"\n                                     (forward-chain \"bv2nat_eq0[N]\")\n                                     ((\"1\"\n                                       (replace -1)\n                                       ((\"1\"\n                                         (rewrite \"min_fill_F[N]\")\n                                         ((\"1\"\n                                           (rewrite \"rem1_dvs0\")\n                                           ((\"1\"\n                                             (rewrite\n                                              \"bv2int_fill_F[N]\")\n                                             nil\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil)\n                                (\"2\"\n                                 (flatten)\n                                 ((\"2\"\n                                   (assert)\n                                   ((\"2\"\n                                     (rewrite \"bv2int_neg[N]\")\n                                     ((\"2\"\n                                       (expand \"minint\")\n                                       ((\"2\"\n                                         (expand \"bv2int\" 2)\n                                         ((\"2\"\n                                           (lift-if 2)\n                                           ((\"2\"\n                                             (split)\n                                             ((\"1\"\n                                               (flatten)\n                                               ((\"1\" (assert) nil nil))\n                                               nil)\n                                              (\"2\"\n                                               (flatten)\n                                               ((\"2\"\n                                                 (assert)\n                                                 ((\"2\"\n                                                   (expand \"exp2\" -1)\n                                                   ((\"2\"\n                                                     (expand \"bv2int\")\n                                                     ((\"2\"\n                                                       (reduce)\n                                                       nil\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"divrem_eq_TCC1","label":"obligation","definition":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}},{"tag":"integer","integer-value":0}]}},"proof":{"tag":"proof-info","script":"(\"\" (subtype-tcc) nil nil)","status":"unchecked"}},{"tag":"formula-decl","id":"divrem_eq","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"f0e449ce6955458c18f72ec15d05e245a9a7df4a"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":-1}]}}]}}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skosimp)\n   ((\"\" (expand* \"\/\" \"\/\/\")\n     ((\"\"\n       (case \"bv2int(dvd!1) = IF bv2nat(dvd!1) < exp2(N - 1) THEN bv2nat(dvd!1) ELSE bv2nat(dvd!1) - exp2(N) ENDIF\")\n       ((\"1\"\n         (case \"bv2int(dvs!1) = IF bv2nat(dvs!1) < exp2(N - 1) THEN bv2nat(dvs!1) ELSE bv2nat(dvs!1) - exp2(N) ENDIF\")\n         ((\"1\" (case \"bv2int[N](dvs!1) = 0\")\n           ((\"1\" (assert)\n             ((\"1\" (lift-if -)\n               ((\"1\" (split)\n                 ((\"1\" (flatten)\n                   ((\"1\" (assert)\n                     ((\"1\" (lemma \"bv2nat_eq0[N]\")\n                       ((\"1\" (inst - \"dvs!1\")\n                         ((\"1\" (assert)\n                           ((\"1\" (replace -1)\n                             ((\"1\" (rewrite \"rem1_dvs0\")\n                               ((\"1\"\n                                 (rewrite \"rem1_dvs0\")\n                                 ((\"1\"\n                                   (rewrite \"div1_dvs0\")\n                                   ((\"1\"\n                                     (rewrite \"div1_dvs0\")\n                                     ((\"1\"\n                                       (rewrite \"bv2int_neg[N]\")\n                                       ((\"1\"\n                                         (rewrite \"bv2int_fill_T[N]\")\n                                         ((\"1\"\n                                           (rewrite \"bv2int_fill_F[N]\")\n                                           ((\"1\"\n                                             (rewrite\n                                              \"bv_double_neg[N]\")\n                                             ((\"1\" (assert) nil nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil)\n                  (\"2\" (flatten) ((\"2\" (assert) nil nil)) nil))\n                 nil))\n               nil))\n             nil)\n            (\"2\" (assert)\n             ((\"2\" (lift-if -)\n               ((\"2\" (split)\n                 ((\"1\" (flatten)\n                   ((\"1\" (split)\n                     ((\"1\" (flatten)\n                       ((\"1\" (assert)\n                         ((\"1\" (replace*)\n                           ((\"1\" (expand \"bv2int\" +)\n                             ((\"1\" (use \"rem1_below_dvs[N]\")\n                               ((\"1\"\n                                 (use \"div1_below_dvd[N]\")\n                                 ((\"1\"\n                                   (assert)\n                                   ((\"1\"\n                                     (use \"divrem1_eq[N]\")\n                                     ((\"1\" (assert) nil nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil)\n                      (\"2\" (flatten)\n                       ((\"2\" (assert)\n                         ((\"2\" (use \"rem1_below_dvs[N]\")\n                           ((\"2\" (use \"div1_below_dvd[N]\")\n                             ((\"2\" (assert)\n                               ((\"2\"\n                                 (rewrite \"bv2nat_minus_bv[N]\")\n                                 ((\"2\"\n                                   (expand \"exp2\" -1)\n                                   ((\"2\"\n                                     (assert)\n                                     ((\"2\"\n                                       (expand \"bv2int\")\n                                       ((\"2\"\n                                         (assert)\n                                         ((\"2\"\n                                           (rewrite\n                                            \"bv2nat_minus_bv[N]\")\n                                           ((\"2\"\n                                             (rewrite\n                                              \"bv2nat_minus_bv[N]\")\n                                             ((\"2\"\n                                               (use \"divrem1_eq[N]\")\n                                               ((\"2\"\n                                                 (rewrite\n                                                  \"bv2nat_minus_bv[N]\")\n                                                 ((\"2\"\n                                                   (assert)\n                                                   ((\"2\"\n                                                     (lift-if)\n                                                     ((\"2\"\n                                                       (split)\n                                                       ((\"1\"\n                                                         (flatten)\n                                                         ((\"1\"\n                                                           (assert)\n                                                           ((\"1\"\n                                                             (replace\n                                                              -1)\n                                                             ((\"1\"\n                                                               (assert)\n                                                               ((\"1\"\n                                                                 (lift-if)\n                                                                 ((\"1\"\n                                                                   (ground)\n                                                                   ((\"1\"\n                                                                     (expand\n                                                                      \"exp2\"\n                                                                      -1\n                                                                      1)\n                                                                     ((\"1\"\n                                                                       (assert)\n                                                                       nil\n                                                                       nil))\n                                                                     nil))\n                                                                   nil))\n                                                                 nil))\n                                                               nil))\n                                                             nil))\n                                                           nil))\n                                                         nil)\n                                                        (\"2\"\n                                                         (flatten)\n                                                         ((\"2\"\n                                                           (assert)\n                                                           ((\"2\"\n                                                             (lift-if)\n                                                             ((\"2\"\n                                                               (ground)\n                                                               ((\"2\"\n                                                                 (lift-if)\n                                                                 ((\"2\"\n                                                                   (ground)\n                                                                   ((\"2\"\n                                                                     (expand\n                                                                      \"exp2\"\n                                                                      -1\n                                                                      1)\n                                                                     ((\"2\"\n                                                                       (assert)\n                                                                       nil\n                                                                       nil))\n                                                                     nil))\n                                                                   nil))\n                                                                 nil))\n                                                               nil))\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil)\n                  (\"2\" (flatten)\n                   ((\"2\" (assert)\n                     ((\"2\" (split)\n                       ((\"1\" (flatten)\n                         ((\"1\" (assert)\n                           ((\"1\" (use \"rem1_below_dvs[N]\")\n                             ((\"1\" (use \"div1_below_dvd[N]\")\n                               ((\"1\"\n                                 (assert)\n                                 ((\"1\"\n                                   (rewrite \"bv2nat_minus_bv[N]\")\n                                   ((\"1\"\n                                     (expand \"\/=\")\n                                     ((\"1\"\n                                       (assert)\n                                       ((\"1\"\n                                         (use \"divrem1_eq[N]\")\n                                         ((\"1\"\n                                           (assert)\n                                           ((\"1\"\n                                             (expand \"bv2int\")\n                                             ((\"1\"\n                                               (rewrite\n                                                \"bv2nat_minus_bv[N]\")\n                                               ((\"1\"\n                                                 (rewrite\n                                                  \"bv2nat_minus_bv[N]\")\n                                                 ((\"1\"\n                                                   (lift-if)\n                                                   ((\"1\"\n                                                     (ground)\n                                                     ((\"1\"\n                                                       (lift-if)\n                                                       ((\"1\"\n                                                         (ground)\n                                                         ((\"1\"\n                                                           (expand\n                                                            \"exp2\"\n                                                            -1\n                                                            1)\n                                                           ((\"1\"\n                                                             (assert)\n                                                             nil\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil)\n                        (\"2\" (flatten)\n                         ((\"2\" (lemma \"rem1_below_dvs[N]\")\n                           ((\"2\" (inst - \"-dvd!1\" \"-dvs!1\")\n                             ((\"2\" (lemma \"div1_below_dvd[N]\")\n                               ((\"2\"\n                                 (inst - \"-dvd!1\" \"-dvs!1\")\n                                 ((\"2\"\n                                   (rewrite \"bv2nat_minus_bv[N]\")\n                                   ((\"2\"\n                                     (assert)\n                                     ((\"2\"\n                                       (lemma \"divrem1_eq[N]\")\n                                       ((\"2\"\n                                         (inst - \"-dvd!1\" \"-dvs!1\")\n                                         ((\"2\"\n                                           (assert)\n                                           ((\"2\"\n                                             (expand \"bv2int\")\n                                             ((\"2\"\n                                               (rewrite\n                                                \"bv2nat_minus_bv[N]\")\n                                               ((\"2\"\n                                                 (rewrite\n                                                  \"bv2nat_minus_bv[N]\")\n                                                 ((\"2\"\n                                                   (rewrite\n                                                    \"bv2nat_minus_bv[N]\")\n                                                   ((\"2\"\n                                                     (case-replace\n                                                      \"bv2nat(rem[N](-dvd!1, -dvs!1)) = 0\")\n                                                     ((\"1\"\n                                                       (assert)\n                                                       ((\"1\"\n                                                         (expand\n                                                          \"exp2\"\n                                                          -3)\n                                                         ((\"1\"\n                                                           (case-replace\n                                                            \"bv2nat(dvd!1) = exp2(N - 1)\")\n                                                           ((\"1\"\n                                                             (assert)\n                                                             ((\"1\"\n                                                               (case-replace\n                                                                \"bv2nat(dvs!1) = exp2(N) -1\")\n                                                               ((\"1\"\n                                                                 (assert)\n                                                                 nil\n                                                                 nil)\n                                                                (\"2\"\n                                                                 (case-replace\n                                                                  \"bv2nat[N](div[N](-dvd!1, -dvs!1)) = 0\")\n                                                                 ((\"1\"\n                                                                   (assert)\n                                                                   nil\n                                                                   nil)\n                                                                  (\"2\"\n                                                                   (lemma\n                                                                    \"gt_times_gt_pos1\")\n                                                                   ((\"2\"\n                                                                     (inst\n                                                                      -\n                                                                      1\n                                                                      \"exp2(N-1)\"\n                                                                      \"bv2nat[N](div[N](-dvd!1, -dvs!1))\"\n                                                                      \"exp2(N) - bv2nat[N](dvs!1)\")\n                                                                     ((\"2\"\n                                                                       (assert)\n                                                                       ((\"2\"\n                                                                         (case-replace\n                                                                          \"exp2(N) = 2 * exp2(N-1)\")\n                                                                         ((\"1\"\n                                                                           (assert)\n                                                                           nil\n                                                                           nil)\n                                                                          (\"2\"\n                                                                           (expand\n                                                                            \"exp2\"\n                                                                            1\n                                                                            1)\n                                                                           ((\"2\"\n                                                                             (propax)\n                                                                             nil\n                                                                             nil))\n                                                                           nil))\n                                                                         nil))\n                                                                       nil))\n                                                                     nil))\n                                                                   nil))\n                                                                 nil))\n                                                               nil))\n                                                             nil)\n                                                            (\"2\"\n                                                             (assert)\n                                                             nil\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil)\n                                                      (\"2\"\n                                                       (assert)\n                                                       ((\"2\"\n                                                         (expand\n                                                          \"exp2\"\n                                                          -2)\n                                                         ((\"2\"\n                                                           (case-replace\n                                                            \"bv2nat(dvd!1) = exp2(N - 1)\")\n                                                           ((\"1\"\n                                                             (assert)\n                                                             ((\"1\"\n                                                               (case-replace\n                                                                \"bv2nat(dvs!1) = exp2(N) - 1\")\n                                                               ((\"1\"\n                                                                 (assert)\n                                                                 nil\n                                                                 nil)\n                                                                (\"2\"\n                                                                 (case-replace\n                                                                  \"bv2nat[N](div[N](-dvd!1, -dvs!1)) = 0\")\n                                                                 ((\"1\"\n                                                                   (assert)\n                                                                   nil\n                                                                   nil)\n                                                                  (\"2\"\n                                                                   (lemma\n                                                                    \"gt_times_gt_pos1\")\n                                                                   ((\"2\"\n                                                                     (inst\n                                                                      -\n                                                                      1\n                                                                      \"exp2(N-1)\"\n                                                                      \"bv2nat[N](div[N](-dvd!1, -dvs!1))\"\n                                                                      \"exp2(N) - bv2nat[N](dvs!1)\")\n                                                                     ((\"2\"\n                                                                       (assert)\n                                                                       ((\"2\"\n                                                                         (case-replace\n                                                                          \"exp2(N) = 2 * exp2(N-1)\")\n                                                                         ((\"1\"\n                                                                           (assert)\n                                                                           nil\n                                                                           nil)\n                                                                          (\"2\"\n                                                                           (expand\n                                                                            \"exp2\"\n                                                                            1\n                                                                            1)\n                                                                           ((\"2\"\n                                                                             (propax)\n                                                                             nil\n                                                                             nil))\n                                                                           nil))\n                                                                         nil))\n                                                                       nil))\n                                                                     nil))\n                                                                   nil))\n                                                                 nil))\n                                                               nil))\n                                                             nil)\n                                                            (\"2\"\n                                                             (assert)\n                                                             nil\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil)\n          (\"2\" (expand \"bv2int\") ((\"2\" (propax) nil nil)) nil))\n         nil)\n        (\"2\" (expand \"bv2int\") ((\"2\" (propax) nil nil)) nil)\n        (\"3\" (assert) nil nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"divrem_overflow","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"f0e449ce6955458c18f72ec15d05e245a9a7df4a"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":-1}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"f0e449ce6955458c18f72ec15d05e245a9a7df4a"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}},{"tag":"integer","integer-value":0}]}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (skosimp)\n ((\"\" (expand* \"\/\" \"\/\/\")\n   ((\"\" (assert)\n     ((\"\" (case-replace \"-dvs!1 = one\")\n       ((\"1\" (use \"divrem1_dvs1[N]\")\n         ((\"1\" (flatten)\n           ((\"1\" (replace*)\n             ((\"1\" (rewrite \"bv2int_neg[N]\")\n               ((\"1\" (rewrite \"bv2int_neg[N]\")\n                 ((\"1\" (rewrite \"bv2int_fill_F[N]\")\n                   ((\"1\" (expand \"minint\") ((\"1\" (propax) nil nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil)\n        (\"2\" (hide -1 2)\n         ((\"2\" (use \"bv2int_neg[N]\")\n           ((\"2\" (expand \"minint\")\n             ((\"2\" (lemma \"N_size\")\n               ((\"2\" (assert)\n                 ((\"2\" (replace -3)\n                   ((\"2\" (assert)\n                     ((\"2\" (expand \"bv2int\" -2)\n                       ((\"2\" (lift-if)\n                         ((\"2\" (ground)\n                           ((\"2\" (lemma \"bv2nat_one[N]\")\n                             ((\"2\" (use \"bv2nat_inj[N]\")\n                               ((\"2\" (assert) nil nil)) nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"div_sgn","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"f0e449ce6955458c18f72ec15d05e245a9a7df4a"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":-1}]}}]}}},{"tag":"apply","operator":{"tag":"constant","id":"\/=","library":"pvs:prelude","theory":"notequal","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}],"type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":">","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"OR","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}},{"tag":"apply","operator":{"tag":"constant","id":">","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}}]}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}],"type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"abs","library":"pvs:prelude","theory":"real_defs","type":{"typehash":"0109749130847e761fb441fc1af10c39be61919b"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}},{"tag":"apply","operator":{"tag":"constant","id":"abs","library":"pvs:prelude","theory":"real_defs","type":{"typehash":"0109749130847e761fb441fc1af10c39be61919b"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}],"type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"OR","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"f0e449ce6955458c18f72ec15d05e245a9a7df4a"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"f0e449ce6955458c18f72ec15d05e245a9a7df4a"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}}]}},{"tag":"apply","operator":{"tag":"constant","id":">","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}}]}}]}}]}}]}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skosimp)\n   ((\"\" (expand* \"\/\" \"abs\")\n     ((\"\" (case \"bv2int[N](dvs!1) > 0\")\n       ((\"1\" (case \"bv2int[N](dvd!1) >= 0\")\n         ((\"1\" (assert)\n           ((\"1\" (use \"div1_eq0[N]\")\n             ((\"1\" (use \"div1_below_dvd[N]\")\n               ((\"1\" (expand \"bv2int\") ((\"1\" (reduce) nil nil)) nil))\n               nil))\n             nil))\n           nil)\n          (\"2\" (assert)\n           ((\"2\" (hide 2)\n             ((\"2\" (use \"div1_eq0[N]\")\n               ((\"2\" (use \"div1_below_dvd[N]\")\n                 ((\"2\" (assert)\n                   ((\"2\" (rewrite \"bv2nat_minus_bv[N]\")\n                     ((\"2\" (expand \"bv2int\")\n                       ((\"2\" (lift-if +)\n                         ((\"2\" (split +)\n                           ((\"1\" (flatten) ((\"1\" (assert) nil nil))\n                             nil)\n                            (\"2\" (flatten)\n                             ((\"2\" (lift-if +)\n                               ((\"2\"\n                                 (split +)\n                                 ((\"1\"\n                                   (flatten)\n                                   ((\"1\"\n                                     (assert)\n                                     ((\"1\"\n                                       (rewrite \"bv2nat_minus_bv[N]\")\n                                       ((\"1\" (reduce) nil nil))\n                                       nil))\n                                     nil))\n                                   nil)\n                                  (\"2\"\n                                   (flatten)\n                                   ((\"2\" (assert) nil nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil)\n        (\"2\" (case \"bv2int[N](dvd!1) >= 0\")\n         ((\"1\" (assert)\n           ((\"1\" (assert)\n             ((\"1\" (hide 2)\n               ((\"1\" (use \"div1_eq0[N]\")\n                 ((\"1\" (use \"div1_below_dvd[N]\")\n                   ((\"1\" (rewrite \"bv2nat_minus_bv[N]\")\n                     ((\"1\" (expand \"bv2int\")\n                       ((\"1\" (rewrite \"bv2nat_minus_bv[N]\")\n                         ((\"1\" (expand \"exp2\" 3 1)\n                           ((\"1\" (expand \"exp2\" 3 15)\n                             ((\"1\" (reduce) nil nil)) nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil)\n          (\"2\" (assert)\n           ((\"2\" (use \"div1_eq0[N]\")\n             ((\"2\" (use \"div1_below_dvd[N]\")\n               ((\"2\" (assert)\n                 ((\"2\" (case \"bv2nat(-dvs!1) \/= 0\")\n                   ((\"1\" (assert)\n                     ((\"1\" (rewrite \"bv2nat_minus_bv[N]\")\n                       ((\"1\" (rewrite \"bv2nat_minus_bv[N]\")\n                         ((\"1\" (lift-if)\n                           ((\"1\" (split)\n                             ((\"1\" (expand \"bv2int\")\n                               ((\"1\" (reduce) nil nil)) nil)\n                              (\"2\" (flatten)\n                               ((\"2\"\n                                 (assert)\n                                 ((\"2\"\n                                   (expand \"bv2int\")\n                                   ((\"2\"\n                                     (expand \"exp2\" -2)\n                                     ((\"2\"\n                                       (lift-if)\n                                       ((\"2\"\n                                         (split +)\n                                         ((\"1\"\n                                           (flatten)\n                                           ((\"1\" (assert) nil nil))\n                                           nil)\n                                          (\"2\"\n                                           (flatten)\n                                           ((\"2\"\n                                             (lift-if)\n                                             ((\"2\"\n                                               (split +)\n                                               ((\"1\"\n                                                 (flatten)\n                                                 ((\"1\"\n                                                   (assert)\n                                                   nil\n                                                   nil))\n                                                 nil)\n                                                (\"2\"\n                                                 (flatten)\n                                                 ((\"2\"\n                                                   (assert)\n                                                   ((\"2\"\n                                                     (replace -2)\n                                                     ((\"2\"\n                                                       (case\n                                                        \"bv2nat(div[N](-dvd!1, -dvs!1)) < exp2(N - 1)\")\n                                                       ((\"1\"\n                                                         (reduce)\n                                                         nil\n                                                         nil)\n                                                        (\"2\"\n                                                         (assert)\n                                                         ((\"2\"\n                                                           (case-replace\n                                                            \"bv2nat[N](div(-dvd!1, -dvs!1)) = exp2(N-1)\")\n                                                           ((\"1\"\n                                                             (hide\n                                                              -2\n                                                              1\n                                                              3\n                                                              5)\n                                                             ((\"1\"\n                                                               (use\n                                                                \"divrem1_eq[N]\")\n                                                               ((\"1\"\n                                                                 (replace\n                                                                  -2)\n                                                                 ((\"1\"\n                                                                   (case\n                                                                    \"exp2(N - 1) * bv2nat(-dvs!1) >= exp2(N)\")\n                                                                   ((\"1\"\n                                                                     (assert)\n                                                                     nil\n                                                                     nil)\n                                                                    (\"2\"\n                                                                     (hide\n                                                                      -1)\n                                                                     ((\"2\"\n                                                                       (case\n                                                                        \"bv2nat(-dvs!1) >= 2\")\n                                                                       ((\"1\"\n                                                                         (expand\n                                                                          \"exp2\"\n                                                                          1\n                                                                          2)\n                                                                         ((\"1\"\n                                                                           (assert)\n                                                                           ((\"1\"\n                                                                             (lemma\n                                                                              \"both_sides_times_pos_ge1\")\n                                                                             ((\"1\"\n                                                                               (inst\n                                                                                -\n                                                                                \"exp2(N - 1)\"\n                                                                                \"bv2nat(-dvs!1)\"\n                                                                                2)\n                                                                               ((\"1\"\n                                                                                 (assert)\n                                                                                 nil\n                                                                                 nil))\n                                                                               nil))\n                                                                             nil))\n                                                                           nil))\n                                                                         nil)\n                                                                        (\"2\"\n                                                                         (case-replace\n                                                                          \"bv2nat(-dvs!1) = 1\")\n                                                                         ((\"1\"\n                                                                           (assert)\n                                                                           ((\"1\"\n                                                                             (use\n                                                                              \"divrem1_dvs1[N]\")\n                                                                             ((\"1\"\n                                                                               (flatten)\n                                                                               ((\"1\"\n                                                                                 (rewrite\n                                                                                  \"bv2nat_minus_bv[N]\")\n                                                                                 ((\"1\"\n                                                                                   (expand\n                                                                                    \"exp2\"\n                                                                                    -3)\n                                                                                   ((\"1\"\n                                                                                     (expand\n                                                                                      \"exp2\"\n                                                                                      8\n                                                                                      1)\n                                                                                     ((\"1\"\n                                                                                       (case-replace\n                                                                                        \"dvs!1 = -one[N]\")\n                                                                                       ((\"1\"\n                                                                                         (rewrite\n                                                                                          \"bv2nat_minus_bv[N]\")\n                                                                                         ((\"1\"\n                                                                                           (lemma\n                                                                                            \"bv2nat_one[N]\")\n                                                                                           ((\"1\"\n                                                                                             (assert)\n                                                                                             nil\n                                                                                             nil))\n                                                                                           nil))\n                                                                                         nil)\n                                                                                        (\"2\"\n                                                                                         (case\n                                                                                          \"bv2nat(-one[N]) = exp2(N) - 1\")\n                                                                                         ((\"1\"\n                                                                                           (use\n                                                                                            \"bv2nat_inj[N]\")\n                                                                                           ((\"1\"\n                                                                                             (assert)\n                                                                                             ((\"1\"\n                                                                                               (expand\n                                                                                                \"exp2\"\n                                                                                                -1)\n                                                                                               ((\"1\"\n                                                                                                 (assert)\n                                                                                                 nil\n                                                                                                 nil))\n                                                                                               nil))\n                                                                                             nil))\n                                                                                           nil)\n                                                                                          (\"2\"\n                                                                                           (rewrite\n                                                                                            \"bv2nat_minus_bv[N]\")\n                                                                                           ((\"2\"\n                                                                                             (lemma\n                                                                                              \"bv2nat_one[N]\")\n                                                                                             ((\"2\"\n                                                                                               (assert)\n                                                                                               nil\n                                                                                               nil))\n                                                                                             nil))\n                                                                                           nil))\n                                                                                         nil))\n                                                                                       nil))\n                                                                                     nil))\n                                                                                   nil))\n                                                                                 nil))\n                                                                               nil))\n                                                                             nil))\n                                                                           nil)\n                                                                          (\"2\"\n                                                                           (assert)\n                                                                           nil\n                                                                           nil))\n                                                                         nil))\n                                                                       nil))\n                                                                     nil))\n                                                                   nil))\n                                                                 nil))\n                                                               nil))\n                                                             nil)\n                                                            (\"2\"\n                                                             (assert)\n                                                             ((\"2\"\n                                                               (expand\n                                                                \"exp2\"\n                                                                -)\n                                                               ((\"2\"\n                                                                 (assert)\n                                                                 nil\n                                                                 nil))\n                                                               nil))\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil)\n                    (\"2\" (hide -1 -2 2 3 4 6)\n                     ((\"2\" (flatten)\n                       ((\"2\" (forward-chain \"bv2nat_eq0[N]\")\n                         ((\"2\" (use \"bv2nat_minus_bv[N]\")\n                           ((\"2\" (replace -2)\n                             ((\"2\" (rewrite \"bv2nat_fill_F[N]\")\n                               ((\"2\"\n                                 (expand \"bv2int\")\n                                 ((\"2\" (reduce) nil nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"rem_sgn","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":">","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}},{"tag":"integer","integer-value":0}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}},{"tag":"integer","integer-value":0}]}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skolem!)\n   ((\"\" (assert)\n     ((\"\" (case \"bv2int(dvs!1) = 0\")\n       ((\"1\" (expand \"bv2int\")\n         ((\"1\" (lift-if -)\n           ((\"1\" (split)\n             ((\"1\" (flatten)\n               ((\"1\" (assert)\n                 ((\"1\" (forward-chain \"bv2nat_eq0[N]\")\n                   ((\"1\" (replace -1)\n                     ((\"1\" (expand \"\/\/\")\n                       ((\"1\" (rewrite \"bv2int_fill_F[N]\")\n                         ((\"1\" (assert)\n                           ((\"1\" (lift-if)\n                             ((\"1\" (rewrite \"rem1_dvs0\")\n                               ((\"1\"\n                                 (assert)\n                                 ((\"1\"\n                                   (rewrite \"rem1_dvs0\")\n                                   ((\"1\"\n                                     (rewrite \"bv_double_neg[N]\")\n                                     ((\"1\" (reduce) nil nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil)\n              (\"2\" (flatten) ((\"2\" (assert) nil nil)) nil))\n             nil))\n           nil))\n         nil)\n        (\"2\"\n         (case \"bv2int(dvd!1) = -exp2(N - 1) AND bv2int(dvs!1) = -1\")\n         ((\"1\" (use \"divrem_overflow\") ((\"1\" (ground) nil nil)) nil)\n          (\"2\" (use \"div_sgn\")\n           ((\"2\" (use \"divrem_eq\")\n             ((\"2\" (replace 1)\n               ((\"2\" (assert)\n                 ((\"2\" (flatten)\n                   ((\"2\" (case \"bv2int(dvd!1 \/ dvs!1) = 0\")\n                     ((\"1\" (assert)\n                       ((\"1\" (hide 1 2)\n                         ((\"1\" (expand* \"abs\" \"bv2int\")\n                           ((\"1\" (reduce) nil nil)) nil))\n                         nil))\n                       nil)\n                      (\"2\" (case \"bv2int(dvd!1 \/ dvs!1) > 0\")\n                       ((\"1\" (assert)\n                         ((\"1\" (hide 2 3)\n                           ((\"1\" (split)\n                             ((\"1\" (flatten)\n                               ((\"1\"\n                                 (assert)\n                                 ((\"1\"\n                                   (lemma \"rem1_below_dvs[N]\")\n                                   ((\"1\"\n                                     (inst - \"dvd!1\" \"dvs!1\")\n                                     ((\"1\"\n                                       (expand* \"bv2int\" \"\/\/\")\n                                       ((\"1\" (reduce) nil nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil)\n                              (\"2\" (flatten)\n                               ((\"2\"\n                                 (split 4)\n                                 ((\"1\"\n                                   (flatten)\n                                   ((\"1\" (assert) nil nil))\n                                   nil)\n                                  (\"2\"\n                                   (flatten)\n                                   ((\"2\"\n                                     (assert)\n                                     ((\"2\"\n                                       (expand \"bv2int\")\n                                       ((\"2\"\n                                         (lift-if -)\n                                         ((\"2\"\n                                           (split)\n                                           ((\"1\"\n                                             (flatten)\n                                             ((\"1\" (assert) nil nil))\n                                             nil)\n                                            (\"2\"\n                                             (flatten)\n                                             ((\"2\"\n                                               (assert)\n                                               ((\"2\"\n                                                 (lift-if -)\n                                                 ((\"2\"\n                                                   (split)\n                                                   ((\"1\"\n                                                     (flatten)\n                                                     ((\"1\"\n                                                       (assert)\n                                                       nil\n                                                       nil))\n                                                     nil)\n                                                    (\"2\"\n                                                     (flatten)\n                                                     ((\"2\"\n                                                       (assert)\n                                                       ((\"2\"\n                                                         (split)\n                                                         ((\"1\"\n                                                           (propax)\n                                                           nil\n                                                           nil)\n                                                          (\"2\"\n                                                           (split)\n                                                           ((\"1\"\n                                                             (flatten)\n                                                             ((\"1\"\n                                                               (assert)\n                                                               ((\"1\"\n                                                                 (expand\n                                                                  \"\/\/\")\n                                                                 ((\"1\"\n                                                                   (rewrite\n                                                                    \"bv2nat_minus_bv[N]\")\n                                                                   ((\"1\"\n                                                                     (lemma\n                                                                      \"rem1_below_dvs[N]\")\n                                                                     ((\"1\"\n                                                                       (inst\n                                                                        -\n                                                                        \"-dvd!1\"\n                                                                        \"-dvs!1\")\n                                                                       ((\"1\"\n                                                                         (assert)\n                                                                         ((\"1\"\n                                                                           (split)\n                                                                           ((\"1\"\n                                                                             (rewrite\n                                                                              \"bv2nat_minus_bv[N]\")\n                                                                             ((\"1\"\n                                                                               (reduce)\n                                                                               nil\n                                                                               nil))\n                                                                             nil)\n                                                                            (\"2\"\n                                                                             (flatten)\n                                                                             ((\"2\"\n                                                                               (rewrite\n                                                                                \"bv2nat_minus_bv[N]\")\n                                                                               ((\"2\"\n                                                                                 (assert)\n                                                                                 nil\n                                                                                 nil))\n                                                                               nil))\n                                                                             nil))\n                                                                           nil))\n                                                                         nil))\n                                                                       nil))\n                                                                     nil))\n                                                                   nil))\n                                                                 nil))\n                                                               nil))\n                                                             nil)\n                                                            (\"2\"\n                                                             (propax)\n                                                             nil\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil)\n                        (\"2\" (assert)\n                         ((\"2\" (hide 3 4)\n                           ((\"2\" (split)\n                             ((\"1\" (flatten)\n                               ((\"1\"\n                                 (assert)\n                                 ((\"1\"\n                                   (expand \"\/\/\")\n                                   ((\"1\"\n                                     (use \"rem1_below_dvs[N]\")\n                                     ((\"1\"\n                                       (assert)\n                                       ((\"1\"\n                                         (split)\n                                         ((\"1\"\n                                           (rewrite\n                                            \"bv2nat_minus_bv[N]\")\n                                           ((\"1\"\n                                             (expand \"bv2int\")\n                                             ((\"1\" (smash) nil nil))\n                                             nil))\n                                           nil)\n                                          (\"2\"\n                                           (flatten)\n                                           ((\"2\"\n                                             (case-replace\n                                              \"bv2int[N](dvs!1) = 0\")\n                                             ((\"2\"\n                                               (rewrite\n                                                \"bv2nat_minus_bv[N]\")\n                                               ((\"2\"\n                                                 (expand \"bv2int\" 1)\n                                                 ((\"2\"\n                                                   (reduce)\n                                                   nil\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil)\n                              (\"2\" (flatten)\n                               ((\"2\"\n                                 (assert)\n                                 ((\"2\"\n                                   (hide 3)\n                                   ((\"2\"\n                                     (expand \"\/\/\")\n                                     ((\"2\"\n                                       (use \"rem1_below_dvs[N]\")\n                                       ((\"2\"\n                                         (assert)\n                                         ((\"2\"\n                                           (split)\n                                           ((\"1\"\n                                             (expand \"bv2int\" 1)\n                                             ((\"1\"\n                                               (lift-if)\n                                               ((\"1\"\n                                                 (expand \"bv2int\")\n                                                 ((\"1\"\n                                                   (reduce)\n                                                   ((\"1\"\n                                                     (rewrite\n                                                      \"bv2nat_minus_bv[N]\")\n                                                     ((\"1\"\n                                                       (lift-if)\n                                                       ((\"1\"\n                                                         (ground)\n                                                         nil\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil)\n                                            (\"2\"\n                                             (expand \"bv2int\")\n                                             ((\"2\" (reduce) nil nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"divrem_uniqueness","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"q","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"variable","id":"r","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"NOT","library":"pvs:prelude","theory":"booleans","type":{"typehash":"2dd224b393847a08c08146f380310f3a3e311e59"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"f0e449ce6955458c18f72ec15d05e245a9a7df4a"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},{"tag":"integer","integer-value":1}]}}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":-1}]}}]}}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/=","library":"pvs:prelude","theory":"notequal","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}],"type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":">","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"q","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"OR","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}},{"tag":"apply","operator":{"tag":"constant","id":">","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}}]}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}],"type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"q","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"abs","library":"pvs:prelude","theory":"real_defs","type":{"typehash":"0109749130847e761fb441fc1af10c39be61919b"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}},{"tag":"apply","operator":{"tag":"constant","id":"abs","library":"pvs:prelude","theory":"real_defs","type":{"typehash":"0109749130847e761fb441fc1af10c39be61919b"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}],"type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"q","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"OR","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"f0e449ce6955458c18f72ec15d05e245a9a7df4a"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"f0e449ce6955458c18f72ec15d05e245a9a7df4a"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}}]}},{"tag":"apply","operator":{"tag":"constant","id":">","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}}]}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":">","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"r","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"integer","integer-value":0}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"r","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"integer","integer-value":0}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"abs","library":"pvs:prelude","theory":"real_defs","type":{"typehash":"0109749130847e761fb441fc1af10c39be61919b"}},"argument":{"tag":"variable","id":"r","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}},{"tag":"apply","operator":{"tag":"constant","id":"abs","library":"pvs:prelude","theory":"real_defs","type":{"typehash":"0109749130847e761fb441fc1af10c39be61919b"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"q","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}},{"tag":"variable","id":"r","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}]}}]}}]}}]}}]}}]}}]}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"q","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}}]}},{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"r","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}}]}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skosimp)\n   ((\"\" (use \"divrem_eq\")\n     ((\"\" (use \"rem_sgn\")\n       ((\"\" (use \"rem_below_dvs\")\n         ((\"\" (use \"div_sgn\")\n           ((\"\" (replace 1)\n             ((\"\" (assert)\n               ((\"\" (flatten)\n                 ((\"\" (lemma \"unique_division\")\n                   ((\"\" (case \"bv2int(dvd!1) > 0\")\n                     ((\"1\" (assert)\n                       ((\"1\" (expand \"abs\")\n                         ((\"1\" (case \"bv2int(dvs!1) < 0\")\n                           ((\"1\" (assert)\n                             ((\"1\"\n                               (inst\n                                -\n                                \"-bv2int(dvs!1)\"\n                                \"-q!1\"\n                                \"-bv2int[N](dvd!1 \/ dvs!1)\"\n                                \"r!1\"\n                                \"bv2int[N](dvd!1 \/\/ dvs!1)\")\n                               ((\"1\"\n                                 (assert)\n                                 ((\"1\"\n                                   (flatten)\n                                   ((\"1\" (assert) nil nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil)\n                            (\"2\" (assert)\n                             ((\"2\"\n                               (inst\n                                -\n                                \"bv2int(dvs!1)\"\n                                \"q!1\"\n                                \"bv2int[N](dvd!1 \/ dvs!1)\"\n                                \"r!1\"\n                                \"bv2int[N](dvd!1 \/\/ dvs!1)\")\n                               ((\"2\" (assert) nil nil)) nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil)\n                      (\"2\" (case \"bv2int(dvd!1) < 0\")\n                       ((\"1\" (assert)\n                         ((\"1\" (expand \"abs\")\n                           ((\"1\" (case \"bv2int(dvs!1) < 0\")\n                             ((\"1\" (assert)\n                               ((\"1\"\n                                 (inst\n                                  -\n                                  \"-bv2int(dvs!1)\"\n                                  \"q!1\"\n                                  \"bv2int[N](dvd!1 \/ dvs!1)\"\n                                  \"-r!1\"\n                                  \"-bv2int[N](dvd!1 \/\/ dvs!1)\")\n                                 ((\"1\"\n                                   (assert)\n                                   ((\"1\"\n                                     (flatten)\n                                     ((\"1\" (assert) nil nil))\n                                     nil))\n                                   nil)\n                                  (\"2\" (assert) nil nil)\n                                  (\"3\" (assert) nil nil))\n                                 nil))\n                               nil)\n                              (\"2\" (assert)\n                               ((\"2\"\n                                 (inst\n                                  -\n                                  \"bv2int(dvs!1)\"\n                                  \"-q!1\"\n                                  \"-bv2int[N](dvd!1 \/ dvs!1)\"\n                                  \"-r!1\"\n                                  \"-bv2int[N](dvd!1 \/\/ dvs!1)\")\n                                 ((\"1\"\n                                   (assert)\n                                   ((\"1\"\n                                     (flatten)\n                                     ((\"1\" (assert) nil nil))\n                                     nil))\n                                   nil)\n                                  (\"2\" (assert) nil nil)\n                                  (\"3\" (assert) nil nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil)\n                        (\"2\" (smash) nil nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}},{"tag":"formula-decl","id":"div_largest","label":"lemma","definition":{"tag":"forall","bindings":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"q","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"IMPLIES","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"\/=","library":"pvs:prelude","theory":"notequal","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"integer","integer-value":0}]}},{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"abs","library":"pvs:prelude","theory":"real_defs","type":{"typehash":"0109749130847e761fb441fc1af10c39be61919b"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"variable","id":"q","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}]}}},{"tag":"apply","operator":{"tag":"constant","id":"abs","library":"pvs:prelude","theory":"real_defs","type":{"typehash":"0109749130847e761fb441fc1af10c39be61919b"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}}]}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"abs","library":"pvs:prelude","theory":"real_defs","type":{"typehash":"0109749130847e761fb441fc1af10c39be61919b"}},"argument":{"tag":"variable","id":"q","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}},{"tag":"apply","operator":{"tag":"constant","id":"abs","library":"pvs:prelude","theory":"real_defs","type":{"typehash":"0109749130847e761fb441fc1af10c39be61919b"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"\/","theory":"BitvectorTwoComplementDivision","type":{"typehash":"18ac9ba548b6ebb4e044d8d94a129414044cc811"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"dvd","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},{"tag":"variable","id":"dvs","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}]}}}}]}}]}}},"proof":{"tag":"proof-info","script":"(\"\" (lemma \"N_size\")\n ((\"\" (skosimp)\n   ((\"\" (assert)\n     ((\"\" (case \"bv2int(dvd!1) = -exp2(N-1) AND bv2int(dvs!1) = -1\")\n       ((\"1\" (flatten)\n         ((\"1\" (replace*)\n           ((\"1\" (expand \"abs\")\n             ((\"1\" (assert)\n               ((\"1\" (use \"divrem_overflow\") ((\"1\" (reduce) nil nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil)\n        (\"2\" (use \"divrem_eq\")\n         ((\"2\" (replace 1)\n           ((\"2\" (assert)\n             ((\"2\" (expand \"abs\")\n               ((\"2\" (use \"div_sgn\")\n                 ((\"2\" (use \"rem_sgn\")\n                   ((\"2\" (use \"rem_below_dvs\")\n                     ((\"2\" (replace*)\n                       ((\"2\" (assert)\n                         ((\"2\" (expand \"abs\")\n                           ((\"2\" (flatten)\n                             ((\"2\" (case \"bv2int(dvs!1) > 0\")\n                               ((\"1\"\n                                 (assert)\n                                 ((\"1\"\n                                   (case \"bv2int(dvd!1) > 0\")\n                                   ((\"1\"\n                                     (assert)\n                                     ((\"1\"\n                                       (lift-if -)\n                                       ((\"1\"\n                                         (split)\n                                         ((\"1\"\n                                           (flatten)\n                                           ((\"1\" (assert) nil nil))\n                                           nil)\n                                          (\"2\"\n                                           (flatten)\n                                           ((\"2\"\n                                             (case \"q!1 >= 0\")\n                                             ((\"1\"\n                                               (assert)\n                                               ((\"1\"\n                                                 (rewrite\n                                                  \"neg_times_lt\")\n                                                 ((\"1\"\n                                                   (case\n                                                    \"bv2int(dvs!1) * q!1 < bv2int(dvs!1) * (bv2int[N](dvd!1 \/ dvs!1) + 1)\")\n                                                   ((\"1\"\n                                                     (rewrite\n                                                      \"both_sides_times_pos_lt2\")\n                                                     nil\n                                                     nil)\n                                                    (\"2\"\n                                                     (assert)\n                                                     nil\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil)\n                                              (\"2\"\n                                               (assert)\n                                               ((\"2\"\n                                                 (rewrite\n                                                  \"neg_times_lt\")\n                                                 ((\"2\"\n                                                   (case\n                                                    \"bv2int(dvs!1) * -q!1 < bv2int(dvs!1) * (bv2int[N](dvd!1 \/ dvs!1) + 1)\")\n                                                   ((\"1\"\n                                                     (rewrite\n                                                      \"both_sides_times_pos_lt2\")\n                                                     nil\n                                                     nil)\n                                                    (\"2\"\n                                                     (assert)\n                                                     nil\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil)\n                                    (\"2\"\n                                     (assert)\n                                     ((\"2\"\n                                       (case-replace\n                                        \"bv2int(dvd!1) = 0\")\n                                       ((\"1\"\n                                         (assert)\n                                         ((\"1\"\n                                           (rewrite \"neg_times_lt\")\n                                           ((\"1\"\n                                             (replace*)\n                                             ((\"1\"\n                                               (case \"q!1 >= 0\")\n                                               ((\"1\"\n                                                 (assert)\n                                                 ((\"1\"\n                                                   (rewrite\n                                                    \"neg_times_le\")\n                                                   nil\n                                                   nil))\n                                                 nil)\n                                                (\"2\"\n                                                 (assert)\n                                                 ((\"2\"\n                                                   (lemma\n                                                    \"pos_times_ge\")\n                                                   ((\"2\"\n                                                     (inst\n                                                      -\n                                                      \"bv2int(dvs!1)\"\n                                                      \"q!1\")\n                                                     ((\"2\"\n                                                       (assert)\n                                                       nil\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil)\n                                        (\"2\"\n                                         (assert)\n                                         ((\"2\"\n                                           (case\n                                            \"bv2int(dvd!1) <= -bv2int(dvs!1)\")\n                                           ((\"1\"\n                                             (assert)\n                                             ((\"1\"\n                                               (case-replace\n                                                \"bv2int(dvd!1 \/\/ dvs!1) = 0\")\n                                               ((\"1\"\n                                                 (assert)\n                                                 ((\"1\"\n                                                   (rewrite\n                                                    \"neg_times_lt\")\n                                                   ((\"1\"\n                                                     (case \"q!1 >= 0\")\n                                                     ((\"1\"\n                                                       (assert)\n                                                       ((\"1\"\n                                                         (case\n                                                          \"bv2int(dvs!1) * q!1 <= bv2int(dvs!1) * -bv2int[N](dvd!1 \/ dvs!1)\")\n                                                         ((\"1\"\n                                                           (rewrite\n                                                            \"both_sides_times_pos_le2\")\n                                                           nil\n                                                           nil)\n                                                          (\"2\"\n                                                           (assert)\n                                                           nil\n                                                           nil))\n                                                         nil))\n                                                       nil)\n                                                      (\"2\"\n                                                       (assert)\n                                                       ((\"2\"\n                                                         (case\n                                                          \"bv2int(dvs!1) * -q!1 <= bv2int(dvs!1) * -bv2int[N](dvd!1 \/ dvs!1)\")\n                                                         ((\"1\"\n                                                           (rewrite\n                                                            \"both_sides_times_pos_le2\")\n                                                           nil\n                                                           nil)\n                                                          (\"2\"\n                                                           (assert)\n                                                           nil\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil)\n                                                (\"2\"\n                                                 (assert)\n                                                 ((\"2\"\n                                                   (rewrite\n                                                    \"neg_times_lt\")\n                                                   ((\"2\"\n                                                     (case \"q!1 >= 0\")\n                                                     ((\"1\"\n                                                       (assert)\n                                                       ((\"1\"\n                                                         (case\n                                                          \"bv2int(dvs!1) * q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 \/ dvs!1) + 1)\")\n                                                         ((\"1\"\n                                                           (rewrite\n                                                            \"both_sides_times_pos_lt2\")\n                                                           nil\n                                                           nil)\n                                                          (\"2\"\n                                                           (assert)\n                                                           nil\n                                                           nil))\n                                                         nil))\n                                                       nil)\n                                                      (\"2\"\n                                                       (assert)\n                                                       ((\"2\"\n                                                         (case\n                                                          \"bv2int(dvs!1) * -q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 \/ dvs!1) + 1)\")\n                                                         ((\"1\"\n                                                           (rewrite\n                                                            \"both_sides_times_pos_lt2\")\n                                                           nil\n                                                           nil)\n                                                          (\"2\"\n                                                           (assert)\n                                                           nil\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil)\n                                            (\"2\"\n                                             (assert)\n                                             ((\"2\"\n                                               (rewrite \"neg_times_lt\")\n                                               ((\"2\"\n                                                 (case \"q!1 >= 0\")\n                                                 ((\"1\"\n                                                   (assert)\n                                                   ((\"1\"\n                                                     (case\n                                                      \"bv2int(dvs!1) * q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 \/ dvs!1) + 1)\")\n                                                     ((\"1\"\n                                                       (rewrite\n                                                        \"both_sides_times_pos_lt2\")\n                                                       nil\n                                                       nil)\n                                                      (\"2\"\n                                                       (assert)\n                                                       nil\n                                                       nil))\n                                                     nil))\n                                                   nil)\n                                                  (\"2\"\n                                                   (assert)\n                                                   ((\"2\"\n                                                     (case\n                                                      \"bv2int(dvs!1) * -q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 \/ dvs!1) + 1)\")\n                                                     ((\"1\"\n                                                       (rewrite\n                                                        \"both_sides_times_pos_lt2\")\n                                                       nil\n                                                       nil)\n                                                      (\"2\"\n                                                       (assert)\n                                                       nil\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil)\n                                (\"2\"\n                                 (case \"bv2int(dvd!1) > 0\")\n                                 ((\"1\"\n                                   (assert)\n                                   ((\"1\"\n                                     (case-replace \"q!1 = 0\")\n                                     ((\"1\" (assert) nil nil)\n                                      (\"2\"\n                                       (rewrite \"neg_times_lt\")\n                                       ((\"2\"\n                                         (case\n                                          \"bv2int(dvd!1) >= -bv2int(dvs!1)\")\n                                         ((\"1\"\n                                           (assert)\n                                           ((\"1\"\n                                             (case \"q!1 >= 0\")\n                                             ((\"1\"\n                                               (assert)\n                                               ((\"1\"\n                                                 (case\n                                                  \"bv2int(dvs!1) * -q!1 < bv2int(dvs!1) * (bv2int[N](dvd!1 \/ dvs!1) - 1)\")\n                                                 ((\"1\"\n                                                   (rewrite\n                                                    \"both_sides_times_neg_lt2\")\n                                                   nil\n                                                   nil)\n                                                  (\"2\"\n                                                   (assert)\n                                                   nil\n                                                   nil))\n                                                 nil))\n                                               nil)\n                                              (\"2\"\n                                               (assert)\n                                               ((\"2\"\n                                                 (case\n                                                  \"bv2int(dvs!1) * q!1 < bv2int(dvs!1) * (bv2int[N](dvd!1 \/ dvs!1) - 1)\")\n                                                 ((\"1\"\n                                                   (rewrite\n                                                    \"both_sides_times_neg_lt2\")\n                                                   nil\n                                                   nil)\n                                                  (\"2\"\n                                                   (assert)\n                                                   nil\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil)\n                                          (\"2\"\n                                           (assert)\n                                           ((\"2\"\n                                             (case \"q!1 >= 0\")\n                                             ((\"1\"\n                                               (assert)\n                                               ((\"1\"\n                                                 (case\n                                                  \"bv2int(dvs!1) * -q!1 < bv2int(dvs!1) * (bv2int[N](dvd!1 \/ dvs!1) - 1)\")\n                                                 ((\"1\"\n                                                   (rewrite\n                                                    \"both_sides_times_neg_lt2\")\n                                                   nil\n                                                   nil)\n                                                  (\"2\"\n                                                   (assert)\n                                                   nil\n                                                   nil))\n                                                 nil))\n                                               nil)\n                                              (\"2\"\n                                               (assert)\n                                               ((\"2\"\n                                                 (case\n                                                  \"bv2int(dvs!1) * q!1 < bv2int(dvs!1) * (bv2int[N](dvd!1 \/ dvs!1) - 1)\")\n                                                 ((\"1\"\n                                                   (rewrite\n                                                    \"both_sides_times_neg_lt2\")\n                                                   nil\n                                                   nil)\n                                                  (\"2\"\n                                                   (assert)\n                                                   nil\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil)\n                                  (\"2\"\n                                   (assert)\n                                   ((\"2\"\n                                     (rewrite \"neg_times_lt\")\n                                     ((\"2\"\n                                       (case-replace \"q!1 = 0\")\n                                       ((\"1\" (assert) nil nil)\n                                        (\"2\"\n                                         (case-replace\n                                          \"bv2int(dvd!1) = 0\")\n                                         ((\"1\"\n                                           (assert)\n                                           ((\"1\"\n                                             (replace*)\n                                             ((\"1\"\n                                               (case \"q!1 >= 0\")\n                                               ((\"1\"\n                                                 (assert)\n                                                 ((\"1\"\n                                                   (lemma\n                                                    \"pos_times_ge\")\n                                                   ((\"1\"\n                                                     (inst\n                                                      -\n                                                      \"bv2int(dvs!1)\"\n                                                      \"q!1\")\n                                                     ((\"1\"\n                                                       (assert)\n                                                       nil\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil)\n                                                (\"2\"\n                                                 (assert)\n                                                 ((\"2\"\n                                                   (rewrite\n                                                    \"neg_times_le\")\n                                                   nil\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil)\n                                          (\"2\"\n                                           (assert)\n                                           ((\"2\"\n                                             (case\n                                              \"bv2int(dvd!1) <= bv2int(dvs!1)\")\n                                             ((\"1\"\n                                               (assert)\n                                               ((\"1\"\n                                                 (lift-if -)\n                                                 ((\"1\"\n                                                   (split)\n                                                   ((\"1\"\n                                                     (flatten)\n                                                     ((\"1\"\n                                                       (assert)\n                                                       ((\"1\"\n                                                         (case\n                                                          \"q!1 >= 0\")\n                                                         ((\"1\"\n                                                           (assert)\n                                                           ((\"1\"\n                                                             (case\n                                                              \"bv2int(dvs!1) * -q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 \/ dvs!1) - 1)\")\n                                                             ((\"1\"\n                                                               (rewrite\n                                                                \"both_sides_times_neg_lt2\")\n                                                               nil\n                                                               nil)\n                                                              (\"2\"\n                                                               (assert)\n                                                               nil\n                                                               nil))\n                                                             nil))\n                                                           nil)\n                                                          (\"2\"\n                                                           (assert)\n                                                           ((\"2\"\n                                                             (case\n                                                              \"bv2int(dvs!1) * q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 \/ dvs!1) - 1)\")\n                                                             ((\"1\"\n                                                               (rewrite\n                                                                \"both_sides_times_neg_lt2\")\n                                                               nil\n                                                               nil)\n                                                              (\"2\"\n                                                               (assert)\n                                                               nil\n                                                               nil))\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil)\n                                                    (\"2\"\n                                                     (assert)\n                                                     ((\"2\"\n                                                       (case\n                                                        \"q!1 >= 0\")\n                                                       ((\"1\"\n                                                         (assert)\n                                                         ((\"1\"\n                                                           (case\n                                                            \"bv2int(dvs!1) * -q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 \/ dvs!1) - 1)\")\n                                                           ((\"1\"\n                                                             (rewrite\n                                                              \"both_sides_times_neg_lt2\")\n                                                             nil\n                                                             nil)\n                                                            (\"2\"\n                                                             (assert)\n                                                             nil\n                                                             nil))\n                                                           nil))\n                                                         nil)\n                                                        (\"2\"\n                                                         (assert)\n                                                         ((\"2\"\n                                                           (case\n                                                            \"bv2int(dvs!1) * q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 \/ dvs!1) - 1)\")\n                                                           ((\"1\"\n                                                             (rewrite\n                                                              \"both_sides_times_neg_lt2\")\n                                                             nil\n                                                             nil)\n                                                            (\"2\"\n                                                             (assert)\n                                                             nil\n                                                             nil))\n                                                           nil))\n                                                         nil))\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil)\n                                              (\"2\"\n                                               (assert)\n                                               ((\"2\"\n                                                 (case \"q!1 >= 0\")\n                                                 ((\"1\"\n                                                   (assert)\n                                                   ((\"1\"\n                                                     (case\n                                                      \"bv2int(dvs!1) * -q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 \/ dvs!1) - 1)\")\n                                                     ((\"1\"\n                                                       (rewrite\n                                                        \"both_sides_times_neg_lt2\")\n                                                       nil\n                                                       nil)\n                                                      (\"2\"\n                                                       (assert)\n                                                       nil\n                                                       nil))\n                                                     nil))\n                                                   nil)\n                                                  (\"2\"\n                                                   (assert)\n                                                   ((\"2\"\n                                                     (case\n                                                      \"bv2int(dvs!1) * q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 \/ dvs!1) - 1)\")\n                                                     ((\"1\"\n                                                       (rewrite\n                                                        \"both_sides_times_neg_lt2\")\n                                                       nil\n                                                       nil)\n                                                      (\"2\"\n                                                       (assert)\n                                                       nil\n                                                       nil))\n                                                     nil))\n                                                   nil))\n                                                 nil))\n                                               nil))\n                                             nil))\n                                           nil))\n                                         nil))\n                                       nil))\n                                     nil))\n                                   nil))\n                                 nil))\n                               nil))\n                             nil))\n                           nil))\n                         nil))\n                       nil))\n                     nil))\n                   nil))\n                 nil))\n               nil))\n             nil))\n           nil))\n         nil))\n       nil))\n     nil))\n   nil))\n nil)","status":"unfinished"}}]},"type-hash":{"tag":"typelist","entries":{"86f8e00f94a81b8b2a4c3e9affb8534402002cb9":{"tag":"functiontype","domain":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"d46e1652b5c3501e071bb1a40d5756226051e200":{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}}},"print-type":[{"tag":"type-application","type":[{"tag":"typename","id":"below","library":"pvs:prelude","theory":"naturalnumbers","actuals":[]}],"parameters":[{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}]}]},"0dde3b25b87646d17094a7684887b4b8bb7b8c19":{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}}},"print-type":[{"tag":"type-application","type":[{"tag":"typename","id":"below","library":"pvs:prelude","theory":"naturalnumbers","actuals":[]}],"parameters":[{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":{"typehash":"87d274baeb32650e8d07e49288fd20e8eda69103"}},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}]},"96b143aba8a2ae9712b1f7bf1c0942ba61cb4cb4":{"tag":"dependent-functiontype","domain":{"tag":"dep-binding","id":"d","type":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"}},"range":[{"tag":"subtype","supertype":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"bv","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":[{"tag":"functiontype","domain":[{"tag":"tupletype","types":[{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"},{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}]}],"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}]},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":[{"tag":"functiontype","domain":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"range":[{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}}}}]}]},"argument":{"tag":"variable","id":"bv","type":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}}},{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":[{"tag":"functiontype","domain":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"range":[{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}}}}]}]},"argument":{"tag":"project","argument":{"tag":"variable","id":"d","type":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"}},"index":1}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":[{"tag":"functiontype","domain":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"range":[{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}}}}]}]},"argument":{"tag":"project","argument":{"tag":"variable","id":"d","type":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"}},"index":2}}]}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}},"then":{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":[{"tag":"functiontype","domain":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"range":[{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}}}}]}]},"argument":{"tag":"project","argument":{"tag":"variable","id":"d","type":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"}},"index":1}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":[{"tag":"functiontype","domain":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"range":[{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}}}}]}]},"argument":{"tag":"project","argument":{"tag":"variable","id":"d","type":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"}},"index":2}}]}},"else":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"+","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":[{"tag":"functiontype","domain":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"range":[{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}}}}]}]},"argument":{"tag":"project","argument":{"tag":"variable","id":"d","type":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"}},"index":1}},{"tag":"apply","operator":{"tag":"constant","id":"bv2nat","library":"pvs:prelude","theory":"bv_nat","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}],"type":[{"tag":"functiontype","domain":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"range":[{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}}}}]}]},"argument":{"tag":"project","argument":{"tag":"variable","id":"d","type":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"}},"index":2}}]}},{"tag":"apply","operator":{"tag":"constant","id":"exp2","library":"pvs:prelude","theory":"exp2","type":[{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}}}]}}}}]},"e16e0107f5f27971f19bd45ba383df683f19dff8":{"tag":"functiontype","domain":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},"range":{"typehash":"0dde3b25b87646d17094a7684887b4b8bb7b8c19"}},"f3923c5f8d3927211e5aff1cfbcee01af195158b":{"tag":"tupletype","types":[{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}]},"30bf94d35b333e4090fb1ff869405e24e5d8e718":{"tag":"functiontype","domain":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"},"range":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"120f814405b86d927919a8e6aaf145e82ed7a16c":{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":">","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"integer","integer-value":0}]}}},"print-type":[{"tag":"typename","id":"posnat","library":"pvs:prelude","theory":"integers","actuals":[]}]},"146a37095d79b99006383a517eb8738d36d01122":{"tag":"functiontype","domain":{"typehash":"11c15fe18e476f962d4d8a6529ffdee55c710026"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"255fc968a29595c401e05c55e3263dd5e336ff42":{"tag":"tupletype","types":[{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"},{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}]},"717a9c25eb892eba350c91b4c9080187b6bc2aa4":{"tag":"subtype","supertype":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"},"predicate":{"tag":"constant","id":"rational_pred","library":"pvs:prelude","theory":"rationals","type":{"typehash":"5f72d24643ab14e4b255c8b1ac6dd982887152d4"}},"print-type":[{"tag":"typename","id":"rational","library":"pvs:prelude","theory":"rationals","actuals":[]}]},"87d274baeb32650e8d07e49288fd20e8eda69103":{"tag":"functiontype","domain":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"range":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}},"f9dfc0c5daed68d735ec591f7efd16ec22075ef8":{"tag":"functiontype","domain":{"typehash":"e82fb70ca2174d284e3c0dc69979ae0796a1bdf1"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"d288fd11ae1e75ed5502a350466c5a64f3c1f435":{"tag":"typename","id":"number","library":"pvs:prelude","theory":"numbers","actuals":[]},"0109749130847e761fb441fc1af10c39be61919b":{"tag":"dependent-functiontype","domain":{"tag":"dep-binding","id":"m","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}},"range":[{"tag":"subtype","supertype":[{"tag":"subtype","supertype":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"x","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"x","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}},{"tag":"integer","integer-value":0}]}}}}],"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"n","type":[{"tag":"subtype","supertype":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"x","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"x","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}},{"tag":"integer","integer-value":0}]}}}}]}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":[{"tag":"subtype","supertype":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"x","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"x","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}},{"tag":"integer","integer-value":0}]}}}}]},{"tag":"variable","id":"m","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}}]}},{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"n","type":[{"tag":"subtype","supertype":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"x","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"x","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}},{"tag":"integer","integer-value":0}]}}}}]},{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":[{"tag":"functiontype","domain":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},"range":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}}]},"argument":{"tag":"variable","id":"m","type":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"}}}]}}]}}}}]},"34012ce34c4ce7e8874dfceb61781aace60c5d79":{"tag":"functiontype","domain":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"eea4c410d31f9d4afb5b48e23a617102bdaaa73b":{"tag":"subtype","supertype":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"AND","library":"pvs:prelude","theory":"booleans","type":{"typehash":"f9dfc0c5daed68d735ec591f7efd16ec22075ef8"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"constant","id":"minint","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}]}},{"tag":"apply","operator":{"tag":"constant","id":"<=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"constant","id":"maxint","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}]}}]}}},"print-type":[{"tag":"typename","id":"rng_2s_comp","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}]}]},"113360277aaa54127896c188a2f404db570c97dd":{"tag":"tupletype","types":[{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"},{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}]},"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe":{"tag":"subtype","supertype":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"<","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"s","type":{"typehash":"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9"}},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}},"print-type":[{"tag":"type-application","type":[{"tag":"typename","id":"below","library":"pvs:prelude","theory":"naturalnumbers","actuals":[]}],"parameters":[{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}]},"2d48580ab0bd5f657656b976607e44a52fb03c7d":{"tag":"functiontype","domain":{"typehash":"d46e1652b5c3501e071bb1a40d5756226051e200"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"},"print-type":[{"tag":"typename","id":"bvec","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"apply","operator":{"tag":"constant","id":"*","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"350b58e8264ad023a2d621d5506d89de8beb16e3"}},"argument":{"tag":"tuple","exprs":[{"tag":"integer","integer-value":2},{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}]}}}]}]},"ad1dc8ab57d614e9869574f391457e68ed2d335c":{"tag":"functiontype","domain":{"typehash":"113360277aaa54127896c188a2f404db570c97dd"},"range":{"typehash":"2d48580ab0bd5f657656b976607e44a52fb03c7d"}},"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03":{"tag":"subtype","supertype":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},"predicate":{"tag":"constant","id":"real_pred","library":"pvs:prelude","theory":"reals","type":{"typehash":"34012ce34c4ce7e8874dfceb61781aace60c5d79"}},"print-type":[{"tag":"typename","id":"real","library":"pvs:prelude","theory":"reals","actuals":[]}]},"5f72d24643ab14e4b255c8b1ac6dd982887152d4":{"tag":"functiontype","domain":{"typehash":"1b6a2d4bf6f8c1d87f74b700909c1f85c75ffe03"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"f4f200a0d337e4a60b30dfe136d073c7265be3e1":{"tag":"subtype","supertype":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"},"predicate":{"tag":"constant","id":"number_field_pred","library":"pvs:prelude","theory":"number_fields","type":{"typehash":"a56a4a9403ce4ae14abf07cdf6b328b8f111f42b"}},"print-type":[{"tag":"typename","id":"number_field","library":"pvs:prelude","theory":"number_fields","actuals":[]}]},"aece8f38c7b6554bf39a6677488f47877026313a":{"tag":"subtype","supertype":{"typehash":"717a9c25eb892eba350c91b4c9080187b6bc2aa4"},"predicate":{"tag":"constant","id":"integer_pred","library":"pvs:prelude","theory":"integers","type":{"typehash":"4e480c5400c53df5b58cca7d1bbe3ee6c2f584cc"}},"print-type":[{"tag":"typename","id":"int","library":"pvs:prelude","theory":"integers","actuals":[]}]},"11c15fe18e476f962d4d8a6529ffdee55c710026":{"tag":"tupletype","types":[{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"},{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}]},"350b58e8264ad023a2d621d5506d89de8beb16e3":{"tag":"functiontype","domain":{"typehash":"39d6637d76121441a824031ab58b03e07adec56e"},"range":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}},"4e480c5400c53df5b58cca7d1bbe3ee6c2f584cc":{"tag":"functiontype","domain":{"typehash":"717a9c25eb892eba350c91b4c9080187b6bc2aa4"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"f0e449ce6955458c18f72ec15d05e245a9a7df4a":{"tag":"functiontype","domain":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},"range":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}},"c5e89992401b89fc8e77c8d0a230e2c741840e00":{"tag":"dependent-functiontype","domain":{"tag":"dep-binding","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"range":[{"tag":"subtype","supertype":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"bvn","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"bvn","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"if","test":{"tag":"apply","operator":{"tag":"constant","id":"=","library":"pvs:prelude","theory":"equalities","actuals":[{"tag":"type-actual","type":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"}}],"type":{"typehash":"146a37095d79b99006383a517eb8738d36d01122"}},"argument":{"tag":"tuple","exprs":[{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},{"tag":"constant","id":"minint","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}]}},"then":{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}},"else":{"tag":"apply","operator":{"tag":"constant","id":"-","library":"pvs:prelude","theory":"number_fields","type":[{"tag":"functiontype","domain":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},"range":{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}}]},"argument":{"tag":"apply","operator":{"tag":"constant","id":"bv2int","library":"pvs:prelude","theory":"bv_int_defs","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}],"type":{"typehash":"556105aee05f526b5c9e6c23e656c7f998fd8fb9"}},"argument":{"tag":"variable","id":"bv","type":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}}}}}]}}}}]},"856a0db181f9502265b9418d0cd5ac1ccd5ac0d9":{"tag":"subtype","supertype":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"},"predicate":{"tag":"lambda","bindings":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}}],"expression":{"tag":"apply","operator":{"tag":"constant","id":">=","library":"pvs:prelude","theory":"reals","type":{"typehash":"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf"}},"argument":{"tag":"tuple","exprs":[{"tag":"variable","id":"i","type":{"typehash":"aece8f38c7b6554bf39a6677488f47877026313a"}},{"tag":"integer","integer-value":0}]}}},"print-type":[{"tag":"typename","id":"nonneg_int","library":"pvs:prelude","theory":"integers","actuals":[]}]},"4f19419082f24e96423f3b076548a2c3de11ecd9":{"tag":"typename","id":"boolean","library":"pvs:prelude","theory":"booleans","actuals":[]},"70f41804411e5424c96eb8e91443442e1f07ce81":{"tag":"functiontype","domain":{"typehash":"f3923c5f8d3927211e5aff1cfbcee01af195158b"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"556105aee05f526b5c9e6c23e656c7f998fd8fb9":{"tag":"functiontype","domain":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"},"range":{"typehash":"eea4c410d31f9d4afb5b48e23a617102bdaaa73b"}},"112028b13dc40fe67507f4744441b1f75725ea19":{"tag":"functiontype","domain":{"typehash":"53eb14229dcdc8e71c7c2ea6a101bb5e56164abe"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"},"print-type":[{"tag":"typename","id":"bvec","library":"pvs:prelude","theory":"bv","actuals":[{"tag":"const-actual","expr":{"tag":"formal-constant","id":"N","theory":"BitvectorTwoComplementDivision","type":{"typehash":"120f814405b86d927919a8e6aaf145e82ed7a16c"}}}]}]},"a56a4a9403ce4ae14abf07cdf6b328b8f111f42b":{"tag":"functiontype","domain":{"typehash":"d288fd11ae1e75ed5502a350466c5a64f3c1f435"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"39d6637d76121441a824031ab58b03e07adec56e":{"tag":"tupletype","types":[{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"},{"typehash":"f4f200a0d337e4a60b30dfe136d073c7265be3e1"}]},"2dd224b393847a08c08146f380310f3a3e311e59":{"tag":"functiontype","domain":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}},"18ac9ba548b6ebb4e044d8d94a129414044cc811":{"tag":"functiontype","domain":{"typehash":"f3923c5f8d3927211e5aff1cfbcee01af195158b"},"range":{"typehash":"112028b13dc40fe67507f4744441b1f75725ea19"}},"e82fb70ca2174d284e3c0dc69979ae0796a1bdf1":{"tag":"tupletype","types":[{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"},{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}]},"b773d4e9bd9e0f2359c9655b38ff40e5cb62a3cf":{"tag":"functiontype","domain":{"typehash":"255fc968a29595c401e05c55e3263dd5e336ff42"},"range":{"typehash":"4f19419082f24e96423f3b076548a2c3de11ecd9"}}}}}