type nat = Z | S of nat;;

[@@@redef true]

let rec plus x y =
  match x with
  | Z -> y
  | S n -> S (plus n y)

let (+) = plus

let rec times x y =
  match x with
  | Z -> Z
  | S n -> plus y (times n y)

let ( * ) = times

let rec lessp x y =
  match x, y with
  | _, Z -> false
  | Z, _ -> true
  | S n, S m -> lessp n m

let (<) = lessp

let rec difference x y =
  match x,y with
  | Z, _     -> Z
  | _, Z     -> x
  | S n, S m -> difference n m

let (-) = difference

let rec remainder i j =
  if j = Z then i
  else if lessp i j then i
  else remainder (difference i j) j
[@@no_validate]

let rem = remainder

let rec gcd x y =
  if x = Z then y
  else if y = Z then x
  else if lessp x y then
    gcd x (difference y x)
  else
    gcd (difference x y) y
[@@no_validate]

let divides x y =
  remainder y x = Z

let lesseqp x y = x = y || lessp x y

let (<=) = lesseqp

let rec quotient i j =
  if j = Z then Z
  else if lessp i j then Z
  else S (quotient (difference i j) j)
[@@no_validate]
